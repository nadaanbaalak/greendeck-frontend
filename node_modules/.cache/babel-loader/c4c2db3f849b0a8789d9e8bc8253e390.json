{"ast":null,"code":"/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from \"prop-types\";\nimport { keysOf } from '../common';\nimport classNames from 'classnames';\nvar typeToClassNameMap = {\n  regular: 'euiCommentEvent--regular',\n  update: 'euiCommentEvent--update'\n};\nexport var TYPES = keysOf(typeToClassNameMap);\nexport var EuiCommentEvent = function EuiCommentEvent(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      username = _ref.username,\n      timestamp = _ref.timestamp,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'regular' : _ref$type,\n      event = _ref.event,\n      actions = _ref.actions;\n  var classes = classNames('euiCommentEvent', typeToClassNameMap[type], className);\n  var isFigure = type === 'regular' || type === 'update' && typeof children !== 'undefined';\n  var Element = isFigure ? 'figure' : 'div';\n  var HeaderElement = isFigure ? 'figcaption' : 'div';\n  return React.createElement(Element, {\n    className: classes\n  }, React.createElement(HeaderElement, {\n    className: \"euiCommentEvent__header\"\n  }, React.createElement(\"div\", {\n    className: \"euiCommentEvent__headerData\"\n  }, React.createElement(\"div\", {\n    className: \"euiCommentEvent__headerUsername\"\n  }, username), React.createElement(\"div\", {\n    className: \"euiCommentEvent__headerEvent\"\n  }, event), timestamp ? React.createElement(\"div\", {\n    className: \"euiCommentEvent__headerTimestamp\"\n  }, React.createElement(\"time\", null, timestamp)) : undefined), actions ? React.createElement(\"div\", {\n    className: \"euiCommentEvent__headerActions\"\n  }, actions) : undefined), children ? React.createElement(\"div\", {\n    className: \"euiCommentEvent__body\"\n  }, children) : undefined);\n};\nEuiCommentEvent.propTypes = {\n  /**\n     * Author of the comment. Display a small icon or avatar with it if needed.\n     */\n  username: PropTypes.node.isRequired,\n\n  /**\n     * Time of occurrence of the event. Its format is set on the consumer's side\n     */\n  timestamp: PropTypes.node,\n\n  /**\n     * Describes the event that took place\n     */\n  event: PropTypes.node,\n\n  /**\n     * Custom actions that the user can perform from the comment's header\n     */\n  actions: PropTypes.node,\n\n  /**\n     * Use \"update\" when the comment is primarily showing info about actions that the user or the system has performed (e.g. \"user1 edited a case\").\n     */\n  type: PropTypes.oneOf([\"regular\", \"update\"]),\n  className: PropTypes.string,\n  \"aria-label\": PropTypes.string,\n  \"data-test-subj\": PropTypes.string\n};\nEuiCommentEvent.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiCommentEvent\",\n  \"props\": {\n    \"type\": {\n      \"defaultValue\": {\n        \"value\": \"'regular'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"regular\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"update\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Use \\\"update\\\" when the comment is primarily showing info about actions that the user or the system has performed (e.g. \\\"user1 edited a case\\\").\"\n    },\n    \"username\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": true,\n      \"description\": \"Author of the comment. Display a small icon or avatar with it if needed.\"\n    },\n    \"timestamp\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Time of occurrence of the event. Its format is set on the consumer's side\"\n    },\n    \"event\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Describes the event that took place\"\n    },\n    \"actions\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Custom actions that the user can perform from the comment's header\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"aria-label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"data-test-subj\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/@elastic/eui/es/components/comment_list/comment_event.js"],"names":["React","PropTypes","keysOf","classNames","typeToClassNameMap","regular","update","TYPES","EuiCommentEvent","_ref","children","className","username","timestamp","_ref$type","type","event","actions","classes","isFigure","Element","HeaderElement","createElement","undefined","propTypes","node","isRequired","oneOf","string","__docgenInfo"],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from \"prop-types\";\nimport { keysOf } from '../common';\nimport classNames from 'classnames';\nvar typeToClassNameMap = {\n  regular: 'euiCommentEvent--regular',\n  update: 'euiCommentEvent--update'\n};\nexport var TYPES = keysOf(typeToClassNameMap);\nexport var EuiCommentEvent = function EuiCommentEvent(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      username = _ref.username,\n      timestamp = _ref.timestamp,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'regular' : _ref$type,\n      event = _ref.event,\n      actions = _ref.actions;\n  var classes = classNames('euiCommentEvent', typeToClassNameMap[type], className);\n  var isFigure = type === 'regular' || type === 'update' && typeof children !== 'undefined';\n  var Element = isFigure ? 'figure' : 'div';\n  var HeaderElement = isFigure ? 'figcaption' : 'div';\n  return React.createElement(Element, {\n    className: classes\n  }, React.createElement(HeaderElement, {\n    className: \"euiCommentEvent__header\"\n  }, React.createElement(\"div\", {\n    className: \"euiCommentEvent__headerData\"\n  }, React.createElement(\"div\", {\n    className: \"euiCommentEvent__headerUsername\"\n  }, username), React.createElement(\"div\", {\n    className: \"euiCommentEvent__headerEvent\"\n  }, event), timestamp ? React.createElement(\"div\", {\n    className: \"euiCommentEvent__headerTimestamp\"\n  }, React.createElement(\"time\", null, timestamp)) : undefined), actions ? React.createElement(\"div\", {\n    className: \"euiCommentEvent__headerActions\"\n  }, actions) : undefined), children ? React.createElement(\"div\", {\n    className: \"euiCommentEvent__body\"\n  }, children) : undefined);\n};\nEuiCommentEvent.propTypes = {\n  /**\n     * Author of the comment. Display a small icon or avatar with it if needed.\n     */\n  username: PropTypes.node.isRequired,\n\n  /**\n     * Time of occurrence of the event. Its format is set on the consumer's side\n     */\n  timestamp: PropTypes.node,\n\n  /**\n     * Describes the event that took place\n     */\n  event: PropTypes.node,\n\n  /**\n     * Custom actions that the user can perform from the comment's header\n     */\n  actions: PropTypes.node,\n\n  /**\n     * Use \"update\" when the comment is primarily showing info about actions that the user or the system has performed (e.g. \"user1 edited a case\").\n     */\n  type: PropTypes.oneOf([\"regular\", \"update\"]),\n  className: PropTypes.string,\n  \"aria-label\": PropTypes.string,\n  \"data-test-subj\": PropTypes.string\n};\nEuiCommentEvent.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiCommentEvent\",\n  \"props\": {\n    \"type\": {\n      \"defaultValue\": {\n        \"value\": \"'regular'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"regular\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"update\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Use \\\"update\\\" when the comment is primarily showing info about actions that the user or the system has performed (e.g. \\\"user1 edited a case\\\").\"\n    },\n    \"username\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": true,\n      \"description\": \"Author of the comment. Display a small icon or avatar with it if needed.\"\n    },\n    \"timestamp\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Time of occurrence of the event. Its format is set on the consumer's side\"\n    },\n    \"event\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Describes the event that took place\"\n    },\n    \"actions\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Custom actions that the user can perform from the comment's header\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"aria-label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"data-test-subj\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}