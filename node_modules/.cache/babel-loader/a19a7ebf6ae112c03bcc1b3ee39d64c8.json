{"ast":null,"code":"/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport var isWithinRange = function isWithinRange(min, max, value) {\n  if (min === '' || max === '' || value === '') {\n    return false;\n  }\n\n  var val = Number(value);\n  return Number(min) <= val && val <= Number(max);\n}; // 1e-6 covers up to 10,000,000,000 factored by a decimal\n\nvar EPSILON = 1e-6;\nexport function isEvenlyDivisibleBy(num, factor) {\n  var remainder = num % factor; // due to floating point issues the remainder needs to be within a margin instead of exactly 0\n  // 1 % 0.1          === 0.09999999999999995\n  // 1000000000 % 0.1 === 0.09999994448884877\n  // 1 % 0.05         === 0.04999999999999995\n  // Compare the smaller of (remainder, factor - remainder) to EPSILON\n\n  return Math.min(remainder, // remainder may be smallest, it is 0 in the well-formed case\n  Math.abs(factor - remainder) // otherwise the positive difference between factor and remainder\n  ) < EPSILON;\n}","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/@elastic/eui/es/services/number/number.js"],"names":["isWithinRange","min","max","value","val","Number","EPSILON","isEvenlyDivisibleBy","num","factor","remainder","Math","abs"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAO,IAAIA,aAAa,GAAG,SAASA,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,KAAjC,EAAwC;AACjE,MAAIF,GAAG,KAAK,EAAR,IAAcC,GAAG,KAAK,EAAtB,IAA4BC,KAAK,KAAK,EAA1C,EAA8C;AAC5C,WAAO,KAAP;AACD;;AAED,MAAIC,GAAG,GAAGC,MAAM,CAACF,KAAD,CAAhB;AACA,SAAOE,MAAM,CAACJ,GAAD,CAAN,IAAeG,GAAf,IAAsBA,GAAG,IAAIC,MAAM,CAACH,GAAD,CAA1C;AACD,CAPM,C,CAOJ;;AAEH,IAAII,OAAO,GAAG,IAAd;AACA,OAAO,SAASC,mBAAT,CAA6BC,GAA7B,EAAkCC,MAAlC,EAA0C;AAC/C,MAAIC,SAAS,GAAGF,GAAG,GAAGC,MAAtB,CAD+C,CACjB;AAC9B;AACA;AACA;AACA;;AAEA,SAAOE,IAAI,CAACV,GAAL,CAASS,SAAT,EAAoB;AAC3BC,EAAAA,IAAI,CAACC,GAAL,CAASH,MAAM,GAAGC,SAAlB,CADO,CACsB;AADtB,MAEHJ,OAFJ;AAGD","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport var isWithinRange = function isWithinRange(min, max, value) {\n  if (min === '' || max === '' || value === '') {\n    return false;\n  }\n\n  var val = Number(value);\n  return Number(min) <= val && val <= Number(max);\n}; // 1e-6 covers up to 10,000,000,000 factored by a decimal\n\nvar EPSILON = 1e-6;\nexport function isEvenlyDivisibleBy(num, factor) {\n  var remainder = num % factor; // due to floating point issues the remainder needs to be within a margin instead of exactly 0\n  // 1 % 0.1          === 0.09999999999999995\n  // 1000000000 % 0.1 === 0.09999994448884877\n  // 1 % 0.05         === 0.04999999999999995\n  // Compare the smaller of (remainder, factor - remainder) to EPSILON\n\n  return Math.min(remainder, // remainder may be smallest, it is 0 in the well-formed case\n  Math.abs(factor - remainder) // otherwise the positive difference between factor and remainder\n  ) < EPSILON;\n}"]},"metadata":{},"sourceType":"module"}