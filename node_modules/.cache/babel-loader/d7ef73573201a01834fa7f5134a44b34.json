{"ast":null,"code":"/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { isString } from '../../services/predicate';\nimport { EuiButtonEmpty, EuiButtonIcon } from '../button';\nimport { EuiToolTip } from '../tool_tip'; // In order to use generics with an arrow function inside a .tsx file, it's necessary to use\n// this `extends` hack and declare the types as shown, instead of declaring the const as a\n// FunctionComponent\n\nexport var DefaultItemAction = function DefaultItemAction(_ref) {\n  var action = _ref.action,\n      enabled = _ref.enabled,\n      item = _ref.item,\n      className = _ref.className;\n\n  if (!action.onClick && !action.href) {\n    throw new Error(\"Cannot render item action [\".concat(action.name, \"]. Missing required 'onClick' callback\\n      or 'href' string. If you want to provide a custom action control, make sure to define the 'render' callback\"));\n  }\n\n  var onClick = action.onClick ? function () {\n    return action.onClick(item);\n  } : undefined;\n  var buttonColor = action.color;\n  var color = 'primary';\n\n  if (buttonColor) {\n    color = isString(buttonColor) ? buttonColor : buttonColor(item);\n  }\n\n  var buttonIcon = action.icon;\n  var icon;\n\n  if (buttonIcon) {\n    icon = isString(buttonIcon) ? buttonIcon : buttonIcon(item);\n  }\n\n  var button;\n\n  if (action.type === 'icon') {\n    if (!icon) {\n      throw new Error(\"Cannot render item action [\".concat(action.name, \"]. It is configured to render as an icon but no\\n      icon is provided. Make sure to set the 'icon' property of the action\"));\n    }\n\n    button = React.createElement(EuiButtonIcon, {\n      className: className,\n      \"aria-label\": action.name,\n      isDisabled: !enabled,\n      color: color,\n      iconType: icon,\n      onClick: onClick,\n      href: action.href,\n      target: action.target,\n      \"data-test-subj\": action['data-test-subj']\n    });\n  } else {\n    button = React.createElement(EuiButtonEmpty, {\n      className: className,\n      size: \"s\",\n      isDisabled: !enabled,\n      color: color,\n      iconType: icon,\n      onClick: onClick,\n      href: action.href,\n      target: action.target,\n      \"data-test-subj\": action['data-test-subj'],\n      flush: \"right\"\n    }, action.name);\n  }\n\n  return enabled && action.description ? React.createElement(EuiToolTip, {\n    content: action.description,\n    delay: \"long\"\n  }, button) : button;\n};","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/@elastic/eui/es/components/basic_table/default_item_action.js"],"names":["React","isString","EuiButtonEmpty","EuiButtonIcon","EuiToolTip","DefaultItemAction","_ref","action","enabled","item","className","onClick","href","Error","concat","name","undefined","buttonColor","color","buttonIcon","icon","button","type","createElement","isDisabled","iconType","target","size","flush","description","content","delay"],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { isString } from '../../services/predicate';\nimport { EuiButtonEmpty, EuiButtonIcon } from '../button';\nimport { EuiToolTip } from '../tool_tip';\n// In order to use generics with an arrow function inside a .tsx file, it's necessary to use\n// this `extends` hack and declare the types as shown, instead of declaring the const as a\n// FunctionComponent\nexport var DefaultItemAction = function DefaultItemAction(_ref) {\n  var action = _ref.action,\n      enabled = _ref.enabled,\n      item = _ref.item,\n      className = _ref.className;\n\n  if (!action.onClick && !action.href) {\n    throw new Error(\"Cannot render item action [\".concat(action.name, \"]. Missing required 'onClick' callback\\n      or 'href' string. If you want to provide a custom action control, make sure to define the 'render' callback\"));\n  }\n\n  var onClick = action.onClick ? function () {\n    return action.onClick(item);\n  } : undefined;\n  var buttonColor = action.color;\n  var color = 'primary';\n\n  if (buttonColor) {\n    color = isString(buttonColor) ? buttonColor : buttonColor(item);\n  }\n\n  var buttonIcon = action.icon;\n  var icon;\n\n  if (buttonIcon) {\n    icon = isString(buttonIcon) ? buttonIcon : buttonIcon(item);\n  }\n\n  var button;\n\n  if (action.type === 'icon') {\n    if (!icon) {\n      throw new Error(\"Cannot render item action [\".concat(action.name, \"]. It is configured to render as an icon but no\\n      icon is provided. Make sure to set the 'icon' property of the action\"));\n    }\n\n    button = React.createElement(EuiButtonIcon, {\n      className: className,\n      \"aria-label\": action.name,\n      isDisabled: !enabled,\n      color: color,\n      iconType: icon,\n      onClick: onClick,\n      href: action.href,\n      target: action.target,\n      \"data-test-subj\": action['data-test-subj']\n    });\n  } else {\n    button = React.createElement(EuiButtonEmpty, {\n      className: className,\n      size: \"s\",\n      isDisabled: !enabled,\n      color: color,\n      iconType: icon,\n      onClick: onClick,\n      href: action.href,\n      target: action.target,\n      \"data-test-subj\": action['data-test-subj'],\n      flush: \"right\"\n    }, action.name);\n  }\n\n  return enabled && action.description ? React.createElement(EuiToolTip, {\n    content: action.description,\n    delay: \"long\"\n  }, button) : button;\n};"]},"metadata":{},"sourceType":"module"}