{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\nexport var flattenOptionGroups = function flattenOptionGroups(optionsOrGroups) {\n  return optionsOrGroups.reduce(function (options, optionOrGroup) {\n    if (optionOrGroup.options) {\n      options.push.apply(options, _toConsumableArray(optionOrGroup.options));\n    } else {\n      options.push(optionOrGroup);\n    }\n\n    return options;\n  }, []);\n};\nexport var getSelectedOptionForSearchValue = function getSelectedOptionForSearchValue(searchValue, selectedOptions) {\n  var normalizedSearchValue = searchValue.toLowerCase();\n  return selectedOptions.find(function (option) {\n    return option.label.toLowerCase() === normalizedSearchValue;\n  });\n};\n\nvar collectMatchingOption = function collectMatchingOption(accumulator, option, selectedOptions, normalizedSearchValue, isPreFiltered, showPrevSelected) {\n  // Only show options which haven't yet been selected unless requested.\n  var selectedOption = getSelectedOptionForSearchValue(option.label, selectedOptions);\n\n  if (selectedOption && !showPrevSelected) {\n    return false;\n  } // If the options have already been pre-filtered then we can skip filtering against the search value.\n\n\n  if (isPreFiltered) {\n    accumulator.push(option);\n    return;\n  }\n\n  if (!normalizedSearchValue) {\n    accumulator.push(option);\n    return;\n  }\n\n  var normalizedOption = option.label.trim().toLowerCase();\n\n  if (normalizedOption.includes(normalizedSearchValue)) {\n    accumulator.push(option);\n  }\n};\n\nexport var getMatchingOptions = function getMatchingOptions(options, selectedOptions, searchValue, isPreFiltered, showPrevSelected) {\n  var normalizedSearchValue = searchValue.trim().toLowerCase();\n  var matchingOptions = [];\n  options.forEach(function (option) {\n    if (option.options) {\n      var matchingOptionsForGroup = [];\n      option.options.forEach(function (groupOption) {\n        collectMatchingOption(matchingOptionsForGroup, groupOption, selectedOptions, normalizedSearchValue, isPreFiltered, showPrevSelected);\n      });\n\n      if (matchingOptionsForGroup.length > 0) {\n        // Add option for group label\n        matchingOptions.push({\n          label: option.label,\n          isGroupLabelOption: true\n        }); // Add matching options for group\n\n        matchingOptions.push.apply(matchingOptions, matchingOptionsForGroup);\n      }\n    } else {\n      collectMatchingOption(matchingOptions, option, selectedOptions, normalizedSearchValue, isPreFiltered, showPrevSelected);\n    }\n  });\n  return matchingOptions;\n};","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/@elastic/eui/es/components/combo_box/matching_options.js"],"names":["_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","Object","prototype","toString","call","Array","from","isArray","i","arr2","length","flattenOptionGroups","optionsOrGroups","reduce","options","optionOrGroup","push","apply","getSelectedOptionForSearchValue","searchValue","selectedOptions","normalizedSearchValue","toLowerCase","find","option","label","collectMatchingOption","accumulator","isPreFiltered","showPrevSelected","selectedOption","normalizedOption","trim","includes","getMatchingOptions","matchingOptions","forEach","matchingOptionsForGroup","groupOption","isGroupLabelOption"],"mappings":"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","sourcesContent":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport var flattenOptionGroups = function flattenOptionGroups(optionsOrGroups) {\n  return optionsOrGroups.reduce(function (options, optionOrGroup) {\n    if (optionOrGroup.options) {\n      options.push.apply(options, _toConsumableArray(optionOrGroup.options));\n    } else {\n      options.push(optionOrGroup);\n    }\n\n    return options;\n  }, []);\n};\nexport var getSelectedOptionForSearchValue = function getSelectedOptionForSearchValue(searchValue, selectedOptions) {\n  var normalizedSearchValue = searchValue.toLowerCase();\n  return selectedOptions.find(function (option) {\n    return option.label.toLowerCase() === normalizedSearchValue;\n  });\n};\n\nvar collectMatchingOption = function collectMatchingOption(accumulator, option, selectedOptions, normalizedSearchValue, isPreFiltered, showPrevSelected) {\n  // Only show options which haven't yet been selected unless requested.\n  var selectedOption = getSelectedOptionForSearchValue(option.label, selectedOptions);\n\n  if (selectedOption && !showPrevSelected) {\n    return false;\n  } // If the options have already been pre-filtered then we can skip filtering against the search value.\n\n\n  if (isPreFiltered) {\n    accumulator.push(option);\n    return;\n  }\n\n  if (!normalizedSearchValue) {\n    accumulator.push(option);\n    return;\n  }\n\n  var normalizedOption = option.label.trim().toLowerCase();\n\n  if (normalizedOption.includes(normalizedSearchValue)) {\n    accumulator.push(option);\n  }\n};\n\nexport var getMatchingOptions = function getMatchingOptions(options, selectedOptions, searchValue, isPreFiltered, showPrevSelected) {\n  var normalizedSearchValue = searchValue.trim().toLowerCase();\n  var matchingOptions = [];\n  options.forEach(function (option) {\n    if (option.options) {\n      var matchingOptionsForGroup = [];\n      option.options.forEach(function (groupOption) {\n        collectMatchingOption(matchingOptionsForGroup, groupOption, selectedOptions, normalizedSearchValue, isPreFiltered, showPrevSelected);\n      });\n\n      if (matchingOptionsForGroup.length > 0) {\n        // Add option for group label\n        matchingOptions.push({\n          label: option.label,\n          isGroupLabelOption: true\n        }); // Add matching options for group\n\n        matchingOptions.push.apply(matchingOptions, matchingOptionsForGroup);\n      }\n    } else {\n      collectMatchingOption(matchingOptions, option, selectedOptions, normalizedSearchValue, isPreFiltered, showPrevSelected);\n    }\n  });\n  return matchingOptions;\n};"]},"metadata":{},"sourceType":"module"}