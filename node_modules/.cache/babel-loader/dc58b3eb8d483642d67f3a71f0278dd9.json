{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nexport var DEFAULT_HEIGHT = 30;\nexport var DEFAULT_WIDTH = 100; // Enables more intelligent mapping of a given column and row index to an item ID.\n// This prevents a cell cache from being invalidated when its parent collection is modified.\n\n/**\n * Caches measurements for a given cell.\n */\n\nvar CellMeasurerCache = function () {\n  function CellMeasurerCache() {\n    var _this = this;\n\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, CellMeasurerCache);\n\n    this._cellHeightCache = {};\n    this._cellWidthCache = {};\n    this._columnWidthCache = {};\n    this._rowHeightCache = {};\n    this._columnCount = 0;\n    this._rowCount = 0;\n\n    this.columnWidth = function (_ref) {\n      var index = _ref.index;\n\n      var key = _this._keyMapper(0, index);\n\n      return _this._columnWidthCache.hasOwnProperty(key) ? _this._columnWidthCache[key] : _this._defaultWidth;\n    };\n\n    this.rowHeight = function (_ref2) {\n      var index = _ref2.index;\n\n      var key = _this._keyMapper(index, 0);\n\n      return _this._rowHeightCache.hasOwnProperty(key) ? _this._rowHeightCache[key] : _this._defaultHeight;\n    };\n\n    var defaultHeight = params.defaultHeight,\n        defaultWidth = params.defaultWidth,\n        fixedHeight = params.fixedHeight,\n        fixedWidth = params.fixedWidth,\n        keyMapper = params.keyMapper,\n        minHeight = params.minHeight,\n        minWidth = params.minWidth;\n    this._hasFixedHeight = fixedHeight === true;\n    this._hasFixedWidth = fixedWidth === true;\n    this._minHeight = minHeight || 0;\n    this._minWidth = minWidth || 0;\n    this._keyMapper = keyMapper || defaultKeyMapper;\n    this._defaultHeight = Math.max(this._minHeight, typeof defaultHeight === 'number' ? defaultHeight : DEFAULT_HEIGHT);\n    this._defaultWidth = Math.max(this._minWidth, typeof defaultWidth === 'number' ? defaultWidth : DEFAULT_WIDTH);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (this._hasFixedHeight === false && this._hasFixedWidth === false) {\n        console.warn(\"CellMeasurerCache should only measure a cell's width or height. \" + 'You have configured CellMeasurerCache to measure both. ' + 'This will result in poor performance.');\n      }\n\n      if (this._hasFixedHeight === false && this._defaultHeight === 0) {\n        console.warn('Fixed height CellMeasurerCache should specify a :defaultHeight greater than 0. ' + 'Failing to do so will lead to unnecessary layout and poor performance.');\n      }\n\n      if (this._hasFixedWidth === false && this._defaultWidth === 0) {\n        console.warn('Fixed width CellMeasurerCache should specify a :defaultWidth greater than 0. ' + 'Failing to do so will lead to unnecessary layout and poor performance.');\n      }\n    }\n  }\n\n  _createClass(CellMeasurerCache, [{\n    key: 'clear',\n    value: function clear(rowIndex) {\n      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var key = this._keyMapper(rowIndex, columnIndex);\n\n      delete this._cellHeightCache[key];\n      delete this._cellWidthCache[key];\n\n      this._updateCachedColumnAndRowSizes(rowIndex, columnIndex);\n    }\n  }, {\n    key: 'clearAll',\n    value: function clearAll() {\n      this._cellHeightCache = {};\n      this._cellWidthCache = {};\n      this._columnWidthCache = {};\n      this._rowHeightCache = {};\n      this._rowCount = 0;\n      this._columnCount = 0;\n    }\n  }, {\n    key: 'hasFixedHeight',\n    value: function hasFixedHeight() {\n      return this._hasFixedHeight;\n    }\n  }, {\n    key: 'hasFixedWidth',\n    value: function hasFixedWidth() {\n      return this._hasFixedWidth;\n    }\n  }, {\n    key: 'getHeight',\n    value: function getHeight(rowIndex) {\n      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (this._hasFixedHeight) {\n        return this._defaultHeight;\n      } else {\n        var _key = this._keyMapper(rowIndex, columnIndex);\n\n        return this._cellHeightCache.hasOwnProperty(_key) ? Math.max(this._minHeight, this._cellHeightCache[_key]) : this._defaultHeight;\n      }\n    }\n  }, {\n    key: 'getWidth',\n    value: function getWidth(rowIndex) {\n      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (this._hasFixedWidth) {\n        return this._defaultWidth;\n      } else {\n        var _key2 = this._keyMapper(rowIndex, columnIndex);\n\n        return this._cellWidthCache.hasOwnProperty(_key2) ? Math.max(this._minWidth, this._cellWidthCache[_key2]) : this._defaultWidth;\n      }\n    }\n  }, {\n    key: 'has',\n    value: function has(rowIndex) {\n      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var key = this._keyMapper(rowIndex, columnIndex);\n\n      return this._cellHeightCache.hasOwnProperty(key);\n    }\n  }, {\n    key: 'set',\n    value: function set(rowIndex, columnIndex, width, height) {\n      var key = this._keyMapper(rowIndex, columnIndex);\n\n      if (columnIndex >= this._columnCount) {\n        this._columnCount = columnIndex + 1;\n      }\n\n      if (rowIndex >= this._rowCount) {\n        this._rowCount = rowIndex + 1;\n      } // Size is cached per cell so we don't have to re-measure if cells are re-ordered.\n\n\n      this._cellHeightCache[key] = height;\n      this._cellWidthCache[key] = width;\n\n      this._updateCachedColumnAndRowSizes(rowIndex, columnIndex);\n    }\n  }, {\n    key: '_updateCachedColumnAndRowSizes',\n    value: function _updateCachedColumnAndRowSizes(rowIndex, columnIndex) {\n      // :columnWidth and :rowHeight are derived based on all cells in a column/row.\n      // Pre-cache these derived values for faster lookup later.\n      // Reads are expected to occur more frequently than writes in this case.\n      // Only update non-fixed dimensions though to avoid doing unnecessary work.\n      if (!this._hasFixedWidth) {\n        var columnWidth = 0;\n\n        for (var i = 0; i < this._rowCount; i++) {\n          columnWidth = Math.max(columnWidth, this.getWidth(i, columnIndex));\n        }\n\n        var columnKey = this._keyMapper(0, columnIndex);\n\n        this._columnWidthCache[columnKey] = columnWidth;\n      }\n\n      if (!this._hasFixedHeight) {\n        var rowHeight = 0;\n\n        for (var _i = 0; _i < this._columnCount; _i++) {\n          rowHeight = Math.max(rowHeight, this.getHeight(rowIndex, _i));\n        }\n\n        var rowKey = this._keyMapper(rowIndex, 0);\n\n        this._rowHeightCache[rowKey] = rowHeight;\n      }\n    }\n  }, {\n    key: 'defaultHeight',\n    get: function get() {\n      return this._defaultHeight;\n    }\n  }, {\n    key: 'defaultWidth',\n    get: function get() {\n      return this._defaultWidth;\n    }\n  }]);\n\n  return CellMeasurerCache;\n}();\n\nexport default CellMeasurerCache;\n\nfunction defaultKeyMapper(rowIndex, columnIndex) {\n  return rowIndex + '-' + columnIndex;\n}\n\nimport { bpfrpt_proptype_CellMeasureCache } from './types';","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/react-virtualized/dist/es/CellMeasurer/CellMeasurerCache.js"],"names":["_classCallCheck","_createClass","DEFAULT_HEIGHT","DEFAULT_WIDTH","CellMeasurerCache","_this","params","arguments","length","undefined","_cellHeightCache","_cellWidthCache","_columnWidthCache","_rowHeightCache","_columnCount","_rowCount","columnWidth","_ref","index","key","_keyMapper","hasOwnProperty","_defaultWidth","rowHeight","_ref2","_defaultHeight","defaultHeight","defaultWidth","fixedHeight","fixedWidth","keyMapper","minHeight","minWidth","_hasFixedHeight","_hasFixedWidth","_minHeight","_minWidth","defaultKeyMapper","Math","max","process","env","NODE_ENV","console","warn","value","clear","rowIndex","columnIndex","_updateCachedColumnAndRowSizes","clearAll","hasFixedHeight","hasFixedWidth","getHeight","_key","getWidth","_key2","has","set","width","height","i","columnKey","_i","rowKey","get","bpfrpt_proptype_CellMeasureCache"],"mappings":"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","sourcesContent":["import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\n\n\nexport var DEFAULT_HEIGHT = 30;\n\nexport var DEFAULT_WIDTH = 100;\n\n// Enables more intelligent mapping of a given column and row index to an item ID.\n// This prevents a cell cache from being invalidated when its parent collection is modified.\n\n/**\n * Caches measurements for a given cell.\n */\nvar CellMeasurerCache = function () {\n  function CellMeasurerCache() {\n    var _this = this;\n\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, CellMeasurerCache);\n\n    this._cellHeightCache = {};\n    this._cellWidthCache = {};\n    this._columnWidthCache = {};\n    this._rowHeightCache = {};\n    this._columnCount = 0;\n    this._rowCount = 0;\n\n    this.columnWidth = function (_ref) {\n      var index = _ref.index;\n\n      var key = _this._keyMapper(0, index);\n\n      return _this._columnWidthCache.hasOwnProperty(key) ? _this._columnWidthCache[key] : _this._defaultWidth;\n    };\n\n    this.rowHeight = function (_ref2) {\n      var index = _ref2.index;\n\n      var key = _this._keyMapper(index, 0);\n\n      return _this._rowHeightCache.hasOwnProperty(key) ? _this._rowHeightCache[key] : _this._defaultHeight;\n    };\n\n    var defaultHeight = params.defaultHeight,\n        defaultWidth = params.defaultWidth,\n        fixedHeight = params.fixedHeight,\n        fixedWidth = params.fixedWidth,\n        keyMapper = params.keyMapper,\n        minHeight = params.minHeight,\n        minWidth = params.minWidth;\n\n\n    this._hasFixedHeight = fixedHeight === true;\n    this._hasFixedWidth = fixedWidth === true;\n    this._minHeight = minHeight || 0;\n    this._minWidth = minWidth || 0;\n    this._keyMapper = keyMapper || defaultKeyMapper;\n\n    this._defaultHeight = Math.max(this._minHeight, typeof defaultHeight === 'number' ? defaultHeight : DEFAULT_HEIGHT);\n    this._defaultWidth = Math.max(this._minWidth, typeof defaultWidth === 'number' ? defaultWidth : DEFAULT_WIDTH);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (this._hasFixedHeight === false && this._hasFixedWidth === false) {\n        console.warn(\"CellMeasurerCache should only measure a cell's width or height. \" + 'You have configured CellMeasurerCache to measure both. ' + 'This will result in poor performance.');\n      }\n\n      if (this._hasFixedHeight === false && this._defaultHeight === 0) {\n        console.warn('Fixed height CellMeasurerCache should specify a :defaultHeight greater than 0. ' + 'Failing to do so will lead to unnecessary layout and poor performance.');\n      }\n\n      if (this._hasFixedWidth === false && this._defaultWidth === 0) {\n        console.warn('Fixed width CellMeasurerCache should specify a :defaultWidth greater than 0. ' + 'Failing to do so will lead to unnecessary layout and poor performance.');\n      }\n    }\n  }\n\n  _createClass(CellMeasurerCache, [{\n    key: 'clear',\n    value: function clear(rowIndex) {\n      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var key = this._keyMapper(rowIndex, columnIndex);\n\n      delete this._cellHeightCache[key];\n      delete this._cellWidthCache[key];\n\n      this._updateCachedColumnAndRowSizes(rowIndex, columnIndex);\n    }\n  }, {\n    key: 'clearAll',\n    value: function clearAll() {\n      this._cellHeightCache = {};\n      this._cellWidthCache = {};\n      this._columnWidthCache = {};\n      this._rowHeightCache = {};\n      this._rowCount = 0;\n      this._columnCount = 0;\n    }\n  }, {\n    key: 'hasFixedHeight',\n    value: function hasFixedHeight() {\n      return this._hasFixedHeight;\n    }\n  }, {\n    key: 'hasFixedWidth',\n    value: function hasFixedWidth() {\n      return this._hasFixedWidth;\n    }\n  }, {\n    key: 'getHeight',\n    value: function getHeight(rowIndex) {\n      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (this._hasFixedHeight) {\n        return this._defaultHeight;\n      } else {\n        var _key = this._keyMapper(rowIndex, columnIndex);\n\n        return this._cellHeightCache.hasOwnProperty(_key) ? Math.max(this._minHeight, this._cellHeightCache[_key]) : this._defaultHeight;\n      }\n    }\n  }, {\n    key: 'getWidth',\n    value: function getWidth(rowIndex) {\n      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (this._hasFixedWidth) {\n        return this._defaultWidth;\n      } else {\n        var _key2 = this._keyMapper(rowIndex, columnIndex);\n\n        return this._cellWidthCache.hasOwnProperty(_key2) ? Math.max(this._minWidth, this._cellWidthCache[_key2]) : this._defaultWidth;\n      }\n    }\n  }, {\n    key: 'has',\n    value: function has(rowIndex) {\n      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var key = this._keyMapper(rowIndex, columnIndex);\n\n      return this._cellHeightCache.hasOwnProperty(key);\n    }\n  }, {\n    key: 'set',\n    value: function set(rowIndex, columnIndex, width, height) {\n      var key = this._keyMapper(rowIndex, columnIndex);\n\n      if (columnIndex >= this._columnCount) {\n        this._columnCount = columnIndex + 1;\n      }\n      if (rowIndex >= this._rowCount) {\n        this._rowCount = rowIndex + 1;\n      }\n\n      // Size is cached per cell so we don't have to re-measure if cells are re-ordered.\n      this._cellHeightCache[key] = height;\n      this._cellWidthCache[key] = width;\n\n      this._updateCachedColumnAndRowSizes(rowIndex, columnIndex);\n    }\n  }, {\n    key: '_updateCachedColumnAndRowSizes',\n    value: function _updateCachedColumnAndRowSizes(rowIndex, columnIndex) {\n      // :columnWidth and :rowHeight are derived based on all cells in a column/row.\n      // Pre-cache these derived values for faster lookup later.\n      // Reads are expected to occur more frequently than writes in this case.\n      // Only update non-fixed dimensions though to avoid doing unnecessary work.\n      if (!this._hasFixedWidth) {\n        var columnWidth = 0;\n        for (var i = 0; i < this._rowCount; i++) {\n          columnWidth = Math.max(columnWidth, this.getWidth(i, columnIndex));\n        }\n        var columnKey = this._keyMapper(0, columnIndex);\n        this._columnWidthCache[columnKey] = columnWidth;\n      }\n      if (!this._hasFixedHeight) {\n        var rowHeight = 0;\n        for (var _i = 0; _i < this._columnCount; _i++) {\n          rowHeight = Math.max(rowHeight, this.getHeight(rowIndex, _i));\n        }\n        var rowKey = this._keyMapper(rowIndex, 0);\n        this._rowHeightCache[rowKey] = rowHeight;\n      }\n    }\n  }, {\n    key: 'defaultHeight',\n    get: function get() {\n      return this._defaultHeight;\n    }\n  }, {\n    key: 'defaultWidth',\n    get: function get() {\n      return this._defaultWidth;\n    }\n  }]);\n\n  return CellMeasurerCache;\n}();\n\nexport default CellMeasurerCache;\n\n\nfunction defaultKeyMapper(rowIndex, columnIndex) {\n  return rowIndex + '-' + columnIndex;\n}\nimport { bpfrpt_proptype_CellMeasureCache } from './types';"]},"metadata":{},"sourceType":"module"}