{"ast":null,"code":"import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\n/**\n * High-order component that auto-calculates column-widths for `Grid` cells.\n */\n\nvar ColumnSizer = function (_React$PureComponent) {\n  _inherits(ColumnSizer, _React$PureComponent);\n\n  function ColumnSizer(props, context) {\n    _classCallCheck(this, ColumnSizer);\n\n    var _this = _possibleConstructorReturn(this, (ColumnSizer.__proto__ || _Object$getPrototypeOf(ColumnSizer)).call(this, props, context));\n\n    _this._registerChild = _this._registerChild.bind(_this);\n    return _this;\n  }\n\n  _createClass(ColumnSizer, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var _props = this.props,\n          columnMaxWidth = _props.columnMaxWidth,\n          columnMinWidth = _props.columnMinWidth,\n          columnCount = _props.columnCount,\n          width = _props.width;\n\n      if (columnMaxWidth !== prevProps.columnMaxWidth || columnMinWidth !== prevProps.columnMinWidth || columnCount !== prevProps.columnCount || width !== prevProps.width) {\n        if (this._registeredChild) {\n          this._registeredChild.recomputeGridSize();\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          children = _props2.children,\n          columnMaxWidth = _props2.columnMaxWidth,\n          columnMinWidth = _props2.columnMinWidth,\n          columnCount = _props2.columnCount,\n          width = _props2.width;\n      var safeColumnMinWidth = columnMinWidth || 1;\n      var safeColumnMaxWidth = columnMaxWidth ? Math.min(columnMaxWidth, width) : width;\n      var columnWidth = width / columnCount;\n      columnWidth = Math.max(safeColumnMinWidth, columnWidth);\n      columnWidth = Math.min(safeColumnMaxWidth, columnWidth);\n      columnWidth = Math.floor(columnWidth);\n      var adjustedWidth = Math.min(width, columnWidth * columnCount);\n      return children({\n        adjustedWidth: adjustedWidth,\n        columnWidth: columnWidth,\n        getColumnWidth: function getColumnWidth() {\n          return columnWidth;\n        },\n        registerChild: this._registerChild\n      });\n    }\n  }, {\n    key: '_registerChild',\n    value: function _registerChild(child) {\n      if (child && typeof child.recomputeGridSize !== 'function') {\n        throw Error('Unexpected child type registered; only Grid/MultiGrid children are supported.');\n      }\n\n      this._registeredChild = child;\n\n      if (this._registeredChild) {\n        this._registeredChild.recomputeGridSize();\n      }\n    }\n  }]);\n\n  return ColumnSizer;\n}(React.PureComponent);\n\nexport default ColumnSizer;\nColumnSizer.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * Function responsible for rendering a virtualized Grid.\n   * This function should implement the following signature:\n   * ({ adjustedWidth, getColumnWidth, registerChild }) => PropTypes.element\n   *\n   * The specified :getColumnWidth function should be passed to the Grid's :columnWidth property.\n   * The :registerChild should be passed to the Grid's :ref property.\n   * The :adjustedWidth property is optional; it reflects the lesser of the overall width or the width of all columns.\n   */\n  children: PropTypes.func.isRequired,\n\n  /** Optional maximum allowed column width */\n  columnMaxWidth: PropTypes.number,\n\n  /** Optional minimum allowed column width */\n  columnMinWidth: PropTypes.number,\n\n  /** Number of columns in Grid or Table child */\n  columnCount: PropTypes.number.isRequired,\n\n  /** Width of Grid or Table child */\n  width: PropTypes.number.isRequired\n} : {};","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/react-virtualized/dist/es/ColumnSizer/ColumnSizer.js"],"names":["_Object$getPrototypeOf","_classCallCheck","_createClass","_possibleConstructorReturn","_inherits","PropTypes","React","ColumnSizer","_React$PureComponent","props","context","_this","__proto__","call","_registerChild","bind","key","value","componentDidUpdate","prevProps","_props","columnMaxWidth","columnMinWidth","columnCount","width","_registeredChild","recomputeGridSize","render","_props2","children","safeColumnMinWidth","safeColumnMaxWidth","Math","min","columnWidth","max","floor","adjustedWidth","getColumnWidth","registerChild","child","Error","PureComponent","propTypes","process","env","NODE_ENV","func","isRequired","number"],"mappings":"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","sourcesContent":["import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\n\n/**\n * High-order component that auto-calculates column-widths for `Grid` cells.\n */\n\nvar ColumnSizer = function (_React$PureComponent) {\n  _inherits(ColumnSizer, _React$PureComponent);\n\n  function ColumnSizer(props, context) {\n    _classCallCheck(this, ColumnSizer);\n\n    var _this = _possibleConstructorReturn(this, (ColumnSizer.__proto__ || _Object$getPrototypeOf(ColumnSizer)).call(this, props, context));\n\n    _this._registerChild = _this._registerChild.bind(_this);\n    return _this;\n  }\n\n  _createClass(ColumnSizer, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var _props = this.props,\n          columnMaxWidth = _props.columnMaxWidth,\n          columnMinWidth = _props.columnMinWidth,\n          columnCount = _props.columnCount,\n          width = _props.width;\n\n\n      if (columnMaxWidth !== prevProps.columnMaxWidth || columnMinWidth !== prevProps.columnMinWidth || columnCount !== prevProps.columnCount || width !== prevProps.width) {\n        if (this._registeredChild) {\n          this._registeredChild.recomputeGridSize();\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          children = _props2.children,\n          columnMaxWidth = _props2.columnMaxWidth,\n          columnMinWidth = _props2.columnMinWidth,\n          columnCount = _props2.columnCount,\n          width = _props2.width;\n\n\n      var safeColumnMinWidth = columnMinWidth || 1;\n\n      var safeColumnMaxWidth = columnMaxWidth ? Math.min(columnMaxWidth, width) : width;\n\n      var columnWidth = width / columnCount;\n      columnWidth = Math.max(safeColumnMinWidth, columnWidth);\n      columnWidth = Math.min(safeColumnMaxWidth, columnWidth);\n      columnWidth = Math.floor(columnWidth);\n\n      var adjustedWidth = Math.min(width, columnWidth * columnCount);\n\n      return children({\n        adjustedWidth: adjustedWidth,\n        columnWidth: columnWidth,\n        getColumnWidth: function getColumnWidth() {\n          return columnWidth;\n        },\n        registerChild: this._registerChild\n      });\n    }\n  }, {\n    key: '_registerChild',\n    value: function _registerChild(child) {\n      if (child && typeof child.recomputeGridSize !== 'function') {\n        throw Error('Unexpected child type registered; only Grid/MultiGrid children are supported.');\n      }\n\n      this._registeredChild = child;\n\n      if (this._registeredChild) {\n        this._registeredChild.recomputeGridSize();\n      }\n    }\n  }]);\n\n  return ColumnSizer;\n}(React.PureComponent);\n\nexport default ColumnSizer;\nColumnSizer.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * Function responsible for rendering a virtualized Grid.\n   * This function should implement the following signature:\n   * ({ adjustedWidth, getColumnWidth, registerChild }) => PropTypes.element\n   *\n   * The specified :getColumnWidth function should be passed to the Grid's :columnWidth property.\n   * The :registerChild should be passed to the Grid's :ref property.\n   * The :adjustedWidth property is optional; it reflects the lesser of the overall width or the width of all columns.\n   */\n  children: PropTypes.func.isRequired,\n\n  /** Optional maximum allowed column width */\n  columnMaxWidth: PropTypes.number,\n\n  /** Optional minimum allowed column width */\n  columnMinWidth: PropTypes.number,\n\n  /** Number of columns in Grid or Table child */\n  columnCount: PropTypes.number.isRequired,\n\n  /** Width of Grid or Table child */\n  width: PropTypes.number.isRequired\n} : {};"]},"metadata":{},"sourceType":"module"}