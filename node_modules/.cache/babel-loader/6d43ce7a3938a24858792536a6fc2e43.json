{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\nimport { dateFormat, dateGranularity } from './date_format';\nimport { isDateValue } from './date_value';\nimport { isArray, isBoolean, isNumber, isString, isDateLike, isNil } from '../../../services/predicate';\nimport moment from 'moment';\nvar utc = moment.utc;\n\nvar resolveValueAsDate = function resolveValueAsDate(value) {\n  if (moment.isMoment(value)) {\n    return value;\n  }\n\n  if (moment.isDate(value) || isNumber(value)) {\n    return moment(value);\n  }\n\n  return dateFormat.parse(String(value));\n};\n\nvar defaultEqOptions = {\n  ignoreCase: true\n};\nexport var eq = function eq(fieldValue, clauseValue) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  options = _objectSpread({}, defaultEqOptions, {}, options);\n\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return fieldValue === clauseValue;\n  }\n\n  if (isBoolean(fieldValue)) {\n    return clauseValue === fieldValue;\n  }\n\n  if (isArray(fieldValue)) {\n    if (fieldValue.length > 0) {\n      return fieldValue.some(function (item) {\n        return eq(item, clauseValue, options);\n      });\n    } else {\n      return eq('', clauseValue, options);\n    }\n  }\n\n  if (isDateValue(clauseValue)) {\n    var dateFieldValue = resolveValueAsDate(fieldValue);\n\n    if (clauseValue.granularity) {\n      return clauseValue.granularity.isSame(dateFieldValue, clauseValue.resolve());\n    }\n\n    return dateFieldValue.isSame(clauseValue.resolve());\n  }\n\n  if (isString(fieldValue)) {\n    if (options.exactMatch === true) {\n      return options.ignoreCase ? fieldValue.toLowerCase() === clauseValue.toString().toLowerCase() : fieldValue === clauseValue.toString();\n    } else {\n      return options.ignoreCase ? fieldValue.toLowerCase().includes(clauseValue.toString().toLowerCase()) : fieldValue.includes(clauseValue.toString());\n    }\n  }\n\n  if (isNumber(fieldValue)) {\n    clauseValue = Number(clauseValue);\n    return fieldValue === clauseValue;\n  }\n\n  if (isDateLike(fieldValue)) {\n    var date = resolveValueAsDate(clauseValue);\n\n    if (!date.isValid()) {\n      return false;\n    }\n\n    var granularity = dateGranularity(date);\n\n    if (!granularity) {\n      return utc(fieldValue).isSame(date);\n    }\n\n    return granularity.isSame(fieldValue, date);\n  }\n\n  return false; // unknown value type\n};\nexport var exact = function exact(fieldValue, clauseValue) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return eq(fieldValue, clauseValue, _objectSpread({}, options, {\n    exactMatch: true\n  }));\n};\n\nvar greaterThen = function greaterThen(fieldValue, clauseValue) {\n  var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (isDateValue(clauseValue)) {\n    var clauseDateValue = clauseValue.resolve();\n    var fieldValueAsMomentInput = fieldValue;\n\n    if (!clauseValue.granularity) {\n      return inclusive ? utc(fieldValueAsMomentInput).isSameOrAfter(clauseDateValue) : utc(fieldValueAsMomentInput).isAfter(clauseDateValue);\n    }\n\n    if (inclusive) {\n      return utc(fieldValueAsMomentInput).isSameOrAfter(clauseValue.granularity.start(clauseDateValue));\n    }\n\n    return utc(fieldValueAsMomentInput).isSameOrAfter(clauseValue.granularity.startOfNext(clauseDateValue));\n  }\n\n  if (isString(fieldValue)) {\n    var str = String(clauseValue);\n    return inclusive ? fieldValue >= str : fieldValue > str;\n  }\n\n  if (isNumber(fieldValue)) {\n    var number = Number(clauseValue);\n    return inclusive ? fieldValue >= number : fieldValue > number;\n  }\n\n  if (isDateLike(fieldValue)) {\n    var date = resolveValueAsDate(clauseValue);\n    var granularity = dateGranularity(date);\n\n    if (!granularity) {\n      return inclusive ? utc(fieldValue).isSameOrAfter(date) : utc(fieldValue).isAfter(date);\n    }\n\n    if (inclusive) {\n      return utc(fieldValue).isSameOrAfter(granularity.start(date));\n    }\n\n    return utc(fieldValue).isSameOrAfter(granularity.startOfNext(date));\n  }\n\n  if (isArray(fieldValue)) {\n    return fieldValue.every(function (item) {\n      return greaterThen(item, clauseValue, inclusive);\n    });\n  }\n\n  return false; // unsupported value type\n};\n\nexport var gt = function gt(fieldValue, clauseValue) {\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return false;\n  }\n\n  return greaterThen(fieldValue, clauseValue);\n};\nexport var gte = function gte(fieldValue, clauseValue) {\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return fieldValue === clauseValue;\n  }\n\n  return greaterThen(fieldValue, clauseValue, true);\n};\nexport var lt = function lt(fieldValue, clauseValue) {\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return false;\n  }\n\n  return !greaterThen(fieldValue, clauseValue, true);\n};\nexport var lte = function lte(fieldValue, clauseValue) {\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return fieldValue === clauseValue;\n  }\n\n  return !greaterThen(fieldValue, clauseValue);\n};","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/@elastic/eui/es/components/search_bar/query/operators.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","dateFormat","dateGranularity","isDateValue","isArray","isBoolean","isNumber","isString","isDateLike","isNil","moment","utc","resolveValueAsDate","isMoment","isDate","parse","String","defaultEqOptions","ignoreCase","eq","fieldValue","clauseValue","options","undefined","some","item","dateFieldValue","granularity","isSame","resolve","exactMatch","toLowerCase","toString","includes","Number","date","isValid","exact","greaterThen","inclusive","clauseDateValue","fieldValueAsMomentInput","isSameOrAfter","isAfter","start","startOfNext","str","number","every","gt","gte","lt","lte"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { dateFormat, dateGranularity } from './date_format';\nimport { isDateValue } from './date_value';\nimport { isArray, isBoolean, isNumber, isString, isDateLike, isNil } from '../../../services/predicate';\nimport moment from 'moment';\nvar utc = moment.utc;\n\nvar resolveValueAsDate = function resolveValueAsDate(value) {\n  if (moment.isMoment(value)) {\n    return value;\n  }\n\n  if (moment.isDate(value) || isNumber(value)) {\n    return moment(value);\n  }\n\n  return dateFormat.parse(String(value));\n};\n\nvar defaultEqOptions = {\n  ignoreCase: true\n};\nexport var eq = function eq(fieldValue, clauseValue) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  options = _objectSpread({}, defaultEqOptions, {}, options);\n\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return fieldValue === clauseValue;\n  }\n\n  if (isBoolean(fieldValue)) {\n    return clauseValue === fieldValue;\n  }\n\n  if (isArray(fieldValue)) {\n    if (fieldValue.length > 0) {\n      return fieldValue.some(function (item) {\n        return eq(item, clauseValue, options);\n      });\n    } else {\n      return eq('', clauseValue, options);\n    }\n  }\n\n  if (isDateValue(clauseValue)) {\n    var dateFieldValue = resolveValueAsDate(fieldValue);\n\n    if (clauseValue.granularity) {\n      return clauseValue.granularity.isSame(dateFieldValue, clauseValue.resolve());\n    }\n\n    return dateFieldValue.isSame(clauseValue.resolve());\n  }\n\n  if (isString(fieldValue)) {\n    if (options.exactMatch === true) {\n      return options.ignoreCase ? fieldValue.toLowerCase() === clauseValue.toString().toLowerCase() : fieldValue === clauseValue.toString();\n    } else {\n      return options.ignoreCase ? fieldValue.toLowerCase().includes(clauseValue.toString().toLowerCase()) : fieldValue.includes(clauseValue.toString());\n    }\n  }\n\n  if (isNumber(fieldValue)) {\n    clauseValue = Number(clauseValue);\n    return fieldValue === clauseValue;\n  }\n\n  if (isDateLike(fieldValue)) {\n    var date = resolveValueAsDate(clauseValue);\n\n    if (!date.isValid()) {\n      return false;\n    }\n\n    var granularity = dateGranularity(date);\n\n    if (!granularity) {\n      return utc(fieldValue).isSame(date);\n    }\n\n    return granularity.isSame(fieldValue, date);\n  }\n\n  return false; // unknown value type\n};\nexport var exact = function exact(fieldValue, clauseValue) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return eq(fieldValue, clauseValue, _objectSpread({}, options, {\n    exactMatch: true\n  }));\n};\n\nvar greaterThen = function greaterThen(fieldValue, clauseValue) {\n  var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (isDateValue(clauseValue)) {\n    var clauseDateValue = clauseValue.resolve();\n    var fieldValueAsMomentInput = fieldValue;\n\n    if (!clauseValue.granularity) {\n      return inclusive ? utc(fieldValueAsMomentInput).isSameOrAfter(clauseDateValue) : utc(fieldValueAsMomentInput).isAfter(clauseDateValue);\n    }\n\n    if (inclusive) {\n      return utc(fieldValueAsMomentInput).isSameOrAfter(clauseValue.granularity.start(clauseDateValue));\n    }\n\n    return utc(fieldValueAsMomentInput).isSameOrAfter(clauseValue.granularity.startOfNext(clauseDateValue));\n  }\n\n  if (isString(fieldValue)) {\n    var str = String(clauseValue);\n    return inclusive ? fieldValue >= str : fieldValue > str;\n  }\n\n  if (isNumber(fieldValue)) {\n    var number = Number(clauseValue);\n    return inclusive ? fieldValue >= number : fieldValue > number;\n  }\n\n  if (isDateLike(fieldValue)) {\n    var date = resolveValueAsDate(clauseValue);\n    var granularity = dateGranularity(date);\n\n    if (!granularity) {\n      return inclusive ? utc(fieldValue).isSameOrAfter(date) : utc(fieldValue).isAfter(date);\n    }\n\n    if (inclusive) {\n      return utc(fieldValue).isSameOrAfter(granularity.start(date));\n    }\n\n    return utc(fieldValue).isSameOrAfter(granularity.startOfNext(date));\n  }\n\n  if (isArray(fieldValue)) {\n    return fieldValue.every(function (item) {\n      return greaterThen(item, clauseValue, inclusive);\n    });\n  }\n\n  return false; // unsupported value type\n};\n\nexport var gt = function gt(fieldValue, clauseValue) {\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return false;\n  }\n\n  return greaterThen(fieldValue, clauseValue);\n};\nexport var gte = function gte(fieldValue, clauseValue) {\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return fieldValue === clauseValue;\n  }\n\n  return greaterThen(fieldValue, clauseValue, true);\n};\nexport var lt = function lt(fieldValue, clauseValue) {\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return false;\n  }\n\n  return !greaterThen(fieldValue, clauseValue, true);\n};\nexport var lte = function lte(fieldValue, clauseValue) {\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return fieldValue === clauseValue;\n  }\n\n  return !greaterThen(fieldValue, clauseValue);\n};"]},"metadata":{},"sourceType":"module"}