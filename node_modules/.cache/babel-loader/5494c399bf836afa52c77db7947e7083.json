{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\nimport { Comparators } from './comparators';\n/**\n * @typedef {Object} SortableProperty\n * @property {string} sortableProperty.name - Name of the property.\n * @property {function} sortableProperty.getValue - A function that takes in an object and returns a value to sort\n * by.\n * @property {boolean} sortableProperty.isAscending - The direction of the last sort by this property. Used to preserve\n * past sort orders.\n */\n\n/**\n * Stores sort information for a set of SortableProperties, including which property is currently being sorted on, as\n * well as the last sort order for each property.\n */\n\nexport var SortableProperties = /*#__PURE__*/function () {\n  /**\n   * @param {Array<SortableProperty>} sortableProperties - a set of sortable properties.\n   * @param {string} initialSortablePropertyName - Which sort property should be sorted on by default.\n   */\n  function SortableProperties(sortableProperties, initialSortablePropertyName) {\n    _classCallCheck(this, SortableProperties);\n\n    _defineProperty(this, \"sortableProperties\", void 0);\n\n    _defineProperty(this, \"currentSortedProperty\", void 0);\n\n    this.sortableProperties = sortableProperties;\n    /**\n     * The current property that is being sorted on.\n     * @type {SortableProperty}\n     */\n\n    var currentSortedProperty = this.getSortablePropertyByName(initialSortablePropertyName);\n\n    if (!currentSortedProperty) {\n      throw new Error(\"No property with the name \".concat(initialSortablePropertyName));\n    }\n\n    this.currentSortedProperty = currentSortedProperty;\n  }\n  /**\n   * @returns {SortableProperty} The current property that is being sorted on. Undefined if no sort order is applied.\n   */\n\n\n  _createClass(SortableProperties, [{\n    key: \"getSortedProperty\",\n    value: function getSortedProperty() {\n      return this.currentSortedProperty;\n    }\n    /**\n     * Sorts the items passed in and returns a newly sorted array.\n     * @param items {Array.<Object>}\n     * @returns {Array.<Object>} sorted array of items, based off the sort properties.\n     */\n\n  }, {\n    key: \"sortItems\",\n    value: function sortItems(items) {\n      var copy = _toConsumableArray(items);\n\n      var comparator = Comparators.value(this.getSortedProperty().getValue);\n\n      if (!this.isCurrentSortAscending()) {\n        comparator = Comparators.reverse(comparator);\n      }\n\n      copy.sort(comparator);\n      return copy;\n    }\n    /**\n     * Returns the SortProperty with the given name, if found.\n     * @param {String} propertyName\n     * @returns {SortableProperty|undefined}\n     */\n\n  }, {\n    key: \"getSortablePropertyByName\",\n    value: function getSortablePropertyByName(propertyName) {\n      return this.sortableProperties.find(function (property) {\n        return property.name === propertyName;\n      });\n    }\n    /**\n     * Updates the sort property, potentially flipping the sort order based on whether the same\n     * property was already being sorted.\n     * @param propertyName {String}\n     */\n\n  }, {\n    key: \"sortOn\",\n    value: function sortOn(propertyName) {\n      var newSortedProperty = this.getSortablePropertyByName(propertyName);\n\n      if (!newSortedProperty) {\n        throw new Error(\"No property with the name \".concat(propertyName));\n      }\n\n      var sortedProperty = this.getSortedProperty();\n\n      if (sortedProperty.name === newSortedProperty.name) {\n        this.flipCurrentSortOrder();\n      } else {\n        this.currentSortedProperty = newSortedProperty;\n      }\n    }\n    /**\n     * @returns {boolean} True if the current sortable property is sorted in ascending order.\n     */\n\n  }, {\n    key: \"isCurrentSortAscending\",\n    value: function isCurrentSortAscending() {\n      var sortedProperty = this.getSortedProperty();\n      return sortedProperty ? this.isAscendingByName(sortedProperty.name) : false;\n    }\n    /**\n     * @param {string} propertyName\n     * @returns {boolean} True if the given sort property is sorted in ascending order.\n     */\n\n  }, {\n    key: \"isAscendingByName\",\n    value: function isAscendingByName(propertyName) {\n      var sortedProperty = this.getSortablePropertyByName(propertyName);\n      return sortedProperty ? sortedProperty.isAscending : false;\n    }\n    /**\n     * Flips the current sorted property sort order.\n     */\n\n  }, {\n    key: \"flipCurrentSortOrder\",\n    value: function flipCurrentSortOrder() {\n      this.currentSortedProperty.isAscending = !this.currentSortedProperty.isAscending;\n    }\n  }]);\n\n  return SortableProperties;\n}();","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/@elastic/eui/es/services/sort/sortable_properties.js"],"names":["_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","Object","prototype","toString","call","Array","from","isArray","i","arr2","length","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","_defineProperty","obj","value","Comparators","SortableProperties","sortableProperties","initialSortablePropertyName","currentSortedProperty","getSortablePropertyByName","Error","concat","getSortedProperty","sortItems","items","copy","comparator","getValue","isCurrentSortAscending","reverse","sort","propertyName","find","property","name","sortOn","newSortedProperty","sortedProperty","flipCurrentSortOrder","isAscendingByName","isAscending"],"mappings":"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","sourcesContent":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Comparators } from './comparators';\n\n/**\n * @typedef {Object} SortableProperty\n * @property {string} sortableProperty.name - Name of the property.\n * @property {function} sortableProperty.getValue - A function that takes in an object and returns a value to sort\n * by.\n * @property {boolean} sortableProperty.isAscending - The direction of the last sort by this property. Used to preserve\n * past sort orders.\n */\n\n/**\n * Stores sort information for a set of SortableProperties, including which property is currently being sorted on, as\n * well as the last sort order for each property.\n */\nexport var SortableProperties =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {Array<SortableProperty>} sortableProperties - a set of sortable properties.\n   * @param {string} initialSortablePropertyName - Which sort property should be sorted on by default.\n   */\n  function SortableProperties(sortableProperties, initialSortablePropertyName) {\n    _classCallCheck(this, SortableProperties);\n\n    _defineProperty(this, \"sortableProperties\", void 0);\n\n    _defineProperty(this, \"currentSortedProperty\", void 0);\n\n    this.sortableProperties = sortableProperties;\n    /**\n     * The current property that is being sorted on.\n     * @type {SortableProperty}\n     */\n\n    var currentSortedProperty = this.getSortablePropertyByName(initialSortablePropertyName);\n\n    if (!currentSortedProperty) {\n      throw new Error(\"No property with the name \".concat(initialSortablePropertyName));\n    }\n\n    this.currentSortedProperty = currentSortedProperty;\n  }\n  /**\n   * @returns {SortableProperty} The current property that is being sorted on. Undefined if no sort order is applied.\n   */\n\n\n  _createClass(SortableProperties, [{\n    key: \"getSortedProperty\",\n    value: function getSortedProperty() {\n      return this.currentSortedProperty;\n    }\n    /**\n     * Sorts the items passed in and returns a newly sorted array.\n     * @param items {Array.<Object>}\n     * @returns {Array.<Object>} sorted array of items, based off the sort properties.\n     */\n\n  }, {\n    key: \"sortItems\",\n    value: function sortItems(items) {\n      var copy = _toConsumableArray(items);\n\n      var comparator = Comparators.value(this.getSortedProperty().getValue);\n\n      if (!this.isCurrentSortAscending()) {\n        comparator = Comparators.reverse(comparator);\n      }\n\n      copy.sort(comparator);\n      return copy;\n    }\n    /**\n     * Returns the SortProperty with the given name, if found.\n     * @param {String} propertyName\n     * @returns {SortableProperty|undefined}\n     */\n\n  }, {\n    key: \"getSortablePropertyByName\",\n    value: function getSortablePropertyByName(propertyName) {\n      return this.sortableProperties.find(function (property) {\n        return property.name === propertyName;\n      });\n    }\n    /**\n     * Updates the sort property, potentially flipping the sort order based on whether the same\n     * property was already being sorted.\n     * @param propertyName {String}\n     */\n\n  }, {\n    key: \"sortOn\",\n    value: function sortOn(propertyName) {\n      var newSortedProperty = this.getSortablePropertyByName(propertyName);\n\n      if (!newSortedProperty) {\n        throw new Error(\"No property with the name \".concat(propertyName));\n      }\n\n      var sortedProperty = this.getSortedProperty();\n\n      if (sortedProperty.name === newSortedProperty.name) {\n        this.flipCurrentSortOrder();\n      } else {\n        this.currentSortedProperty = newSortedProperty;\n      }\n    }\n    /**\n     * @returns {boolean} True if the current sortable property is sorted in ascending order.\n     */\n\n  }, {\n    key: \"isCurrentSortAscending\",\n    value: function isCurrentSortAscending() {\n      var sortedProperty = this.getSortedProperty();\n      return sortedProperty ? this.isAscendingByName(sortedProperty.name) : false;\n    }\n    /**\n     * @param {string} propertyName\n     * @returns {boolean} True if the given sort property is sorted in ascending order.\n     */\n\n  }, {\n    key: \"isAscendingByName\",\n    value: function isAscendingByName(propertyName) {\n      var sortedProperty = this.getSortablePropertyByName(propertyName);\n      return sortedProperty ? sortedProperty.isAscending : false;\n    }\n    /**\n     * Flips the current sorted property sort order.\n     */\n\n  }, {\n    key: \"flipCurrentSortOrder\",\n    value: function flipCurrentSortOrder() {\n      this.currentSortedProperty.isAscending = !this.currentSortedProperty.isAscending;\n    }\n  }]);\n\n  return SortableProperties;\n}();"]},"metadata":{},"sourceType":"module"}