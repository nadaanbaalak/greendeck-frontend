{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar unitsMap = {\n  ms: {\n    weight: 1,\n    type: 'fixed',\n    base: 1\n  },\n  s: {\n    weight: 2,\n    type: 'fixed',\n    base: 1000\n  },\n  m: {\n    weight: 3,\n    type: 'mixed',\n    base: 1000 * 60\n  },\n  h: {\n    weight: 4,\n    type: 'mixed',\n    base: 1000 * 60 * 60\n  },\n  d: {\n    weight: 5,\n    type: 'mixed',\n    base: 1000 * 60 * 60 * 24\n  },\n  w: {\n    weight: 6,\n    type: 'calendar',\n    base: NaN\n  },\n  M: {\n    weight: 7,\n    type: 'calendar',\n    base: NaN\n  },\n  // q: { weight: 8, type: 'calendar' }, // TODO: moment duration does not support quarter\n  y: {\n    weight: 9,\n    type: 'calendar',\n    base: NaN\n  }\n};\nvar units = Object.keys(unitsMap).sort(function (a, b) {\n  return unitsMap[b].weight - unitsMap[a].weight;\n});\n\nvar unitsDesc = _toConsumableArray(units);\n\nvar unitsAsc = _toConsumableArray(units).reverse();\n\nvar isDate = function isDate(d) {\n  return Object.prototype.toString.call(d) === '[object Date]';\n};\n\nvar isValidDate = function isValidDate(d) {\n  return isDate(d) && !isNaN(d.valueOf());\n};\n/*\n * This is a simplified version of elasticsearch's date parser.\n * If you pass in a momentjs instance as the third parameter the calculation\n * will be done using this (and its locale settings) instead of the one bundled\n * with this library.\n */\n\n\nfunction parse(text) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$roundUp = _ref.roundUp,\n      roundUp = _ref$roundUp === void 0 ? false : _ref$roundUp,\n      _ref$momentInstance = _ref.momentInstance,\n      momentInstance = _ref$momentInstance === void 0 ? _moment.default : _ref$momentInstance,\n      forceNow = _ref.forceNow;\n\n  if (!text) return undefined;\n  if (momentInstance.isMoment(text)) return text;\n  if (isDate(text)) return momentInstance(text);\n\n  if (forceNow !== undefined && !isValidDate(forceNow)) {\n    throw new Error('forceNow must be a valid Date');\n  }\n\n  var time;\n  var mathString = '';\n  var index;\n  var parseString;\n\n  if (text.substring(0, 3) === 'now') {\n    time = momentInstance(forceNow);\n    mathString = text.substring('now'.length);\n  } else {\n    index = text.indexOf('||');\n\n    if (index === -1) {\n      parseString = text;\n      mathString = ''; // nothing else\n    } else {\n      parseString = text.substring(0, index);\n      mathString = text.substring(index + 2);\n    } // We're going to just require ISO8601 timestamps, k?\n\n\n    time = momentInstance(parseString);\n  }\n\n  if (!mathString.length) {\n    return time;\n  }\n\n  return parseDateMath(mathString, time, roundUp);\n}\n\nfunction parseDateMath(mathString, time, roundUp) {\n  var dateTime = time;\n  var len = mathString.length;\n  var i = 0;\n\n  while (i < len) {\n    var c = mathString.charAt(i++);\n    var type = void 0;\n    var num = void 0;\n    var unit = void 0;\n\n    if (c === '/') {\n      type = 0;\n    } else if (c === '+') {\n      type = 1;\n    } else if (c === '-') {\n      type = 2;\n    } else {\n      return;\n    }\n\n    if (isNaN(mathString.charAt(i))) {\n      num = 1;\n    } else if (mathString.length === 2) {\n      num = mathString.charAt(i);\n    } else {\n      var numFrom = i;\n\n      while (!isNaN(mathString.charAt(i))) {\n        i++;\n        if (i >= len) return;\n      }\n\n      num = parseInt(mathString.substring(numFrom, i), 10);\n    }\n\n    if (type === 0) {\n      // rounding is only allowed on whole, single, units (eg M or 1M, not 0.5M or 2M)\n      if (num !== 1) {\n        return;\n      }\n    }\n\n    unit = mathString.charAt(i++); // append additional characters in the unit\n\n    for (var j = i; j < len; j++) {\n      var unitChar = mathString.charAt(i);\n\n      if (/[a-z]/i.test(unitChar)) {\n        unit += unitChar;\n        i++;\n      } else {\n        break;\n      }\n    }\n\n    if (units.indexOf(unit) === -1) {\n      return;\n    } else {\n      if (type === 0) {\n        if (roundUp) dateTime.endOf(unit);else dateTime.startOf(unit);\n      } else if (type === 1) {\n        dateTime.add(num, unit);\n      } else if (type === 2) {\n        dateTime.subtract(num, unit);\n      }\n    }\n  }\n\n  return dateTime;\n}\n\nvar _default = {\n  parse: parse,\n  unitsMap: Object.freeze(unitsMap),\n  units: Object.freeze(units),\n  unitsAsc: Object.freeze(unitsAsc),\n  unitsDesc: Object.freeze(unitsDesc)\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/@elastic/datemath/target/index.js"],"names":["Object","defineProperty","exports","value","default","_moment","_interopRequireDefault","require","obj","__esModule","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","unitsMap","ms","weight","type","base","s","m","h","d","w","NaN","M","y","units","keys","sort","a","b","unitsDesc","unitsAsc","reverse","isDate","isValidDate","isNaN","valueOf","parse","text","_ref","arguments","undefined","_ref$roundUp","roundUp","_ref$momentInstance","momentInstance","forceNow","isMoment","Error","time","mathString","index","parseString","substring","indexOf","parseDateMath","dateTime","c","charAt","num","unit","numFrom","parseInt","j","unitChar","endOf","startOf","add","subtract","_default","freeze","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar unitsMap = {\n  ms: {\n    weight: 1,\n    type: 'fixed',\n    base: 1\n  },\n  s: {\n    weight: 2,\n    type: 'fixed',\n    base: 1000\n  },\n  m: {\n    weight: 3,\n    type: 'mixed',\n    base: 1000 * 60\n  },\n  h: {\n    weight: 4,\n    type: 'mixed',\n    base: 1000 * 60 * 60\n  },\n  d: {\n    weight: 5,\n    type: 'mixed',\n    base: 1000 * 60 * 60 * 24\n  },\n  w: {\n    weight: 6,\n    type: 'calendar',\n    base: NaN\n  },\n  M: {\n    weight: 7,\n    type: 'calendar',\n    base: NaN\n  },\n  // q: { weight: 8, type: 'calendar' }, // TODO: moment duration does not support quarter\n  y: {\n    weight: 9,\n    type: 'calendar',\n    base: NaN\n  }\n};\nvar units = Object.keys(unitsMap).sort(function (a, b) {\n  return unitsMap[b].weight - unitsMap[a].weight;\n});\n\nvar unitsDesc = _toConsumableArray(units);\n\nvar unitsAsc = _toConsumableArray(units).reverse();\n\nvar isDate = function isDate(d) {\n  return Object.prototype.toString.call(d) === '[object Date]';\n};\n\nvar isValidDate = function isValidDate(d) {\n  return isDate(d) && !isNaN(d.valueOf());\n};\n/*\n * This is a simplified version of elasticsearch's date parser.\n * If you pass in a momentjs instance as the third parameter the calculation\n * will be done using this (and its locale settings) instead of the one bundled\n * with this library.\n */\n\n\nfunction parse(text) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$roundUp = _ref.roundUp,\n      roundUp = _ref$roundUp === void 0 ? false : _ref$roundUp,\n      _ref$momentInstance = _ref.momentInstance,\n      momentInstance = _ref$momentInstance === void 0 ? _moment.default : _ref$momentInstance,\n      forceNow = _ref.forceNow;\n\n  if (!text) return undefined;\n  if (momentInstance.isMoment(text)) return text;\n  if (isDate(text)) return momentInstance(text);\n\n  if (forceNow !== undefined && !isValidDate(forceNow)) {\n    throw new Error('forceNow must be a valid Date');\n  }\n\n  var time;\n  var mathString = '';\n  var index;\n  var parseString;\n\n  if (text.substring(0, 3) === 'now') {\n    time = momentInstance(forceNow);\n    mathString = text.substring('now'.length);\n  } else {\n    index = text.indexOf('||');\n\n    if (index === -1) {\n      parseString = text;\n      mathString = ''; // nothing else\n    } else {\n      parseString = text.substring(0, index);\n      mathString = text.substring(index + 2);\n    } // We're going to just require ISO8601 timestamps, k?\n\n\n    time = momentInstance(parseString);\n  }\n\n  if (!mathString.length) {\n    return time;\n  }\n\n  return parseDateMath(mathString, time, roundUp);\n}\n\nfunction parseDateMath(mathString, time, roundUp) {\n  var dateTime = time;\n  var len = mathString.length;\n  var i = 0;\n\n  while (i < len) {\n    var c = mathString.charAt(i++);\n    var type = void 0;\n    var num = void 0;\n    var unit = void 0;\n\n    if (c === '/') {\n      type = 0;\n    } else if (c === '+') {\n      type = 1;\n    } else if (c === '-') {\n      type = 2;\n    } else {\n      return;\n    }\n\n    if (isNaN(mathString.charAt(i))) {\n      num = 1;\n    } else if (mathString.length === 2) {\n      num = mathString.charAt(i);\n    } else {\n      var numFrom = i;\n\n      while (!isNaN(mathString.charAt(i))) {\n        i++;\n        if (i >= len) return;\n      }\n\n      num = parseInt(mathString.substring(numFrom, i), 10);\n    }\n\n    if (type === 0) {\n      // rounding is only allowed on whole, single, units (eg M or 1M, not 0.5M or 2M)\n      if (num !== 1) {\n        return;\n      }\n    }\n\n    unit = mathString.charAt(i++); // append additional characters in the unit\n\n    for (var j = i; j < len; j++) {\n      var unitChar = mathString.charAt(i);\n\n      if (/[a-z]/i.test(unitChar)) {\n        unit += unitChar;\n        i++;\n      } else {\n        break;\n      }\n    }\n\n    if (units.indexOf(unit) === -1) {\n      return;\n    } else {\n      if (type === 0) {\n        if (roundUp) dateTime.endOf(unit);else dateTime.startOf(unit);\n      } else if (type === 1) {\n        dateTime.add(num, unit);\n      } else if (type === 2) {\n        dateTime.subtract(num, unit);\n      }\n    }\n  }\n\n  return dateTime;\n}\n\nvar _default = {\n  parse: parse,\n  unitsMap: Object.freeze(unitsMap),\n  units: Object.freeze(units),\n  unitsAsc: Object.freeze(unitsAsc),\n  unitsDesc: Object.freeze(unitsDesc)\n};\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}