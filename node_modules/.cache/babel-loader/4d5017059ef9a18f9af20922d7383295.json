{"ast":null,"code":"import _Object$assign from 'babel-runtime/core-js/object/assign';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport calculateSizeAndPositionDataAndUpdateScrollOffset from './utils/calculateSizeAndPositionDataAndUpdateScrollOffset';\nimport ScalingCellSizeAndPositionManager from './utils/ScalingCellSizeAndPositionManager';\nimport createCallbackMemoizer from '../utils/createCallbackMemoizer';\nimport defaultOverscanIndicesGetter, { SCROLL_DIRECTION_BACKWARD, SCROLL_DIRECTION_FORWARD } from './defaultOverscanIndicesGetter';\nimport updateScrollIndexHelper from './utils/updateScrollIndexHelper';\nimport defaultCellRangeRenderer from './defaultCellRangeRenderer';\nimport scrollbarSize from 'dom-helpers/scrollbarSize';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { requestAnimationTimeout, cancelAnimationTimeout } from '../utils/requestAnimationTimeout';\n/**\n * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.\n * This improves performance and makes scrolling smoother.\n */\n\nexport var DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;\n/**\n * Controls whether the Grid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.\n * This prevents Grid from interrupting mouse-wheel animations (see issue #2).\n */\n\nvar SCROLL_POSITION_CHANGE_REASONS = {\n  OBSERVED: 'observed',\n  REQUESTED: 'requested'\n};\n\nvar renderNull = function renderNull() {\n  return null;\n};\n/**\n * Renders tabular data with virtualization along the vertical and horizontal axes.\n * Row heights and column widths must be known ahead of time and specified as properties.\n */\n\n\nvar Grid = function (_React$PureComponent) {\n  _inherits(Grid, _React$PureComponent); // Invokes onSectionRendered callback only when start/stop row or column indices change\n\n\n  function Grid(props) {\n    _classCallCheck(this, Grid);\n\n    var _this = _possibleConstructorReturn(this, (Grid.__proto__ || _Object$getPrototypeOf(Grid)).call(this, props));\n\n    _this._onGridRenderedMemoizer = createCallbackMemoizer();\n    _this._onScrollMemoizer = createCallbackMemoizer(false);\n    _this._deferredInvalidateColumnIndex = null;\n    _this._deferredInvalidateRowIndex = null;\n    _this._recomputeScrollLeftFlag = false;\n    _this._recomputeScrollTopFlag = false;\n    _this._horizontalScrollBarSize = 0;\n    _this._verticalScrollBarSize = 0;\n    _this._scrollbarPresenceChanged = false;\n    _this._renderedColumnStartIndex = 0;\n    _this._renderedColumnStopIndex = 0;\n    _this._renderedRowStartIndex = 0;\n    _this._renderedRowStopIndex = 0;\n    _this._styleCache = {};\n    _this._cellCache = {};\n\n    _this._debounceScrollEndedCallback = function () {\n      _this._disablePointerEventsTimeoutId = null; // isScrolling is used to determine if we reset styleCache\n\n      _this.setState({\n        isScrolling: false,\n        needToResetStyleCache: false\n      });\n    };\n\n    _this._invokeOnGridRenderedHelper = function () {\n      var onSectionRendered = _this.props.onSectionRendered;\n\n      _this._onGridRenderedMemoizer({\n        callback: onSectionRendered,\n        indices: {\n          columnOverscanStartIndex: _this._columnStartIndex,\n          columnOverscanStopIndex: _this._columnStopIndex,\n          columnStartIndex: _this._renderedColumnStartIndex,\n          columnStopIndex: _this._renderedColumnStopIndex,\n          rowOverscanStartIndex: _this._rowStartIndex,\n          rowOverscanStopIndex: _this._rowStopIndex,\n          rowStartIndex: _this._renderedRowStartIndex,\n          rowStopIndex: _this._renderedRowStopIndex\n        }\n      });\n    };\n\n    _this._setScrollingContainerRef = function (ref) {\n      _this._scrollingContainer = ref;\n    };\n\n    _this._onScroll = function (event) {\n      // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.\n      // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.\n      // See issue #404 for more information.\n      if (event.target === _this._scrollingContainer) {\n        _this.handleScrollEvent(event.target);\n      }\n    };\n\n    var columnSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.columnCount,\n      cellSizeGetter: function cellSizeGetter(params) {\n        return Grid._wrapSizeGetter(props.columnWidth)(params);\n      },\n      estimatedCellSize: Grid._getEstimatedColumnSize(props)\n    });\n    var rowSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.rowCount,\n      cellSizeGetter: function cellSizeGetter(params) {\n        return Grid._wrapSizeGetter(props.rowHeight)(params);\n      },\n      estimatedCellSize: Grid._getEstimatedRowSize(props)\n    });\n    _this.state = {\n      instanceProps: {\n        columnSizeAndPositionManager: columnSizeAndPositionManager,\n        rowSizeAndPositionManager: rowSizeAndPositionManager,\n        prevColumnWidth: props.columnWidth,\n        prevRowHeight: props.rowHeight,\n        prevColumnCount: props.columnCount,\n        prevRowCount: props.rowCount,\n        prevIsScrolling: props.isScrolling === true,\n        prevScrollToColumn: props.scrollToColumn,\n        prevScrollToRow: props.scrollToRow,\n        scrollbarSize: 0,\n        scrollbarSizeMeasured: false\n      },\n      isScrolling: false,\n      scrollDirectionHorizontal: SCROLL_DIRECTION_FORWARD,\n      scrollDirectionVertical: SCROLL_DIRECTION_FORWARD,\n      scrollLeft: 0,\n      scrollTop: 0,\n      scrollPositionChangeReason: null,\n      needToResetStyleCache: false\n    };\n\n    if (props.scrollToRow > 0) {\n      _this._initialScrollTop = _this._getCalculatedScrollTop(props, _this.state);\n    }\n\n    if (props.scrollToColumn > 0) {\n      _this._initialScrollLeft = _this._getCalculatedScrollLeft(props, _this.state);\n    }\n\n    return _this;\n  }\n  /**\n   * Gets offsets for a given cell and alignment.\n   */\n\n\n  _createClass(Grid, [{\n    key: 'getOffsetForCell',\n    value: function getOffsetForCell() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$alignment = _ref.alignment,\n          alignment = _ref$alignment === undefined ? this.props.scrollToAlignment : _ref$alignment,\n          _ref$columnIndex = _ref.columnIndex,\n          columnIndex = _ref$columnIndex === undefined ? this.props.scrollToColumn : _ref$columnIndex,\n          _ref$rowIndex = _ref.rowIndex,\n          rowIndex = _ref$rowIndex === undefined ? this.props.scrollToRow : _ref$rowIndex;\n\n      var offsetProps = _extends({}, this.props, {\n        scrollToAlignment: alignment,\n        scrollToColumn: columnIndex,\n        scrollToRow: rowIndex\n      });\n\n      return {\n        scrollLeft: this._getCalculatedScrollLeft(offsetProps),\n        scrollTop: this._getCalculatedScrollTop(offsetProps)\n      };\n    }\n    /**\n     * Gets estimated total rows' height.\n     */\n\n  }, {\n    key: 'getTotalRowsHeight',\n    value: function getTotalRowsHeight() {\n      return this.state.instanceProps.rowSizeAndPositionManager.getTotalSize();\n    }\n    /**\n     * Gets estimated total columns' width.\n     */\n\n  }, {\n    key: 'getTotalColumnsWidth',\n    value: function getTotalColumnsWidth() {\n      return this.state.instanceProps.columnSizeAndPositionManager.getTotalSize();\n    }\n    /**\n     * This method handles a scroll event originating from an external scroll control.\n     * It's an advanced method and should probably not be used unless you're implementing a custom scroll-bar solution.\n     */\n\n  }, {\n    key: 'handleScrollEvent',\n    value: function handleScrollEvent(_ref2) {\n      var _ref2$scrollLeft = _ref2.scrollLeft,\n          scrollLeftParam = _ref2$scrollLeft === undefined ? 0 : _ref2$scrollLeft,\n          _ref2$scrollTop = _ref2.scrollTop,\n          scrollTopParam = _ref2$scrollTop === undefined ? 0 : _ref2$scrollTop; // On iOS, we can arrive at negative offsets by swiping past the start.\n      // To prevent flicker here, we make playing in the negative offset zone cause nothing to happen.\n\n      if (scrollTopParam < 0) {\n        return;\n      } // Prevent pointer events from interrupting a smooth scroll\n\n\n      this._debounceScrollEnded();\n\n      var _props = this.props,\n          autoHeight = _props.autoHeight,\n          autoWidth = _props.autoWidth,\n          height = _props.height,\n          width = _props.width;\n      var instanceProps = this.state.instanceProps; // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,\n      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.\n      // This causes a series of rapid renders that is slow for long lists.\n      // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.\n\n      var scrollbarSize = instanceProps.scrollbarSize;\n      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      var scrollLeft = Math.min(Math.max(0, totalColumnsWidth - width + scrollbarSize), scrollLeftParam);\n      var scrollTop = Math.min(Math.max(0, totalRowsHeight - height + scrollbarSize), scrollTopParam); // Certain devices (like Apple touchpad) rapid-fire duplicate events.\n      // Don't force a re-render if this is the case.\n      // The mouse may move faster then the animation frame does.\n      // Use requestAnimationFrame to avoid over-updating.\n\n      if (this.state.scrollLeft !== scrollLeft || this.state.scrollTop !== scrollTop) {\n        // Track scrolling direction so we can more efficiently overscan rows to reduce empty space around the edges while scrolling.\n        // Don't change direction for an axis unless scroll offset has changed.\n        var _scrollDirectionHorizontal = scrollLeft !== this.state.scrollLeft ? scrollLeft > this.state.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionHorizontal;\n\n        var _scrollDirectionVertical = scrollTop !== this.state.scrollTop ? scrollTop > this.state.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionVertical;\n\n        var newState = {\n          isScrolling: true,\n          scrollDirectionHorizontal: _scrollDirectionHorizontal,\n          scrollDirectionVertical: _scrollDirectionVertical,\n          scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.OBSERVED\n        };\n\n        if (!autoHeight) {\n          newState.scrollTop = scrollTop;\n        }\n\n        if (!autoWidth) {\n          newState.scrollLeft = scrollLeft;\n        }\n\n        newState.needToResetStyleCache = false;\n        this.setState(newState);\n      }\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop,\n        totalColumnsWidth: totalColumnsWidth,\n        totalRowsHeight: totalRowsHeight\n      });\n    }\n    /**\n     * Invalidate Grid size and recompute visible cells.\n     * This is a deferred wrapper for recomputeGridSize().\n     * It sets a flag to be evaluated on cDM/cDU to avoid unnecessary renders.\n     * This method is intended for advanced use-cases like CellMeasurer.\n     */\n    // @TODO (bvaughn) Add automated test coverage for this.\n\n  }, {\n    key: 'invalidateCellSizeAfterRender',\n    value: function invalidateCellSizeAfterRender(_ref3) {\n      var columnIndex = _ref3.columnIndex,\n          rowIndex = _ref3.rowIndex;\n      this._deferredInvalidateColumnIndex = typeof this._deferredInvalidateColumnIndex === 'number' ? Math.min(this._deferredInvalidateColumnIndex, columnIndex) : columnIndex;\n      this._deferredInvalidateRowIndex = typeof this._deferredInvalidateRowIndex === 'number' ? Math.min(this._deferredInvalidateRowIndex, rowIndex) : rowIndex;\n    }\n    /**\n     * Pre-measure all columns and rows in a Grid.\n     * Typically cells are only measured as needed and estimated sizes are used for cells that have not yet been measured.\n     * This method ensures that the next call to getTotalSize() returns an exact size (as opposed to just an estimated one).\n     */\n\n  }, {\n    key: 'measureAllCells',\n    value: function measureAllCells() {\n      var _props2 = this.props,\n          columnCount = _props2.columnCount,\n          rowCount = _props2.rowCount;\n      var instanceProps = this.state.instanceProps;\n      instanceProps.columnSizeAndPositionManager.getSizeAndPositionOfCell(columnCount - 1);\n      instanceProps.rowSizeAndPositionManager.getSizeAndPositionOfCell(rowCount - 1);\n    }\n    /**\n     * Forced recompute of row heights and column widths.\n     * This function should be called if dynamic column or row sizes have changed but nothing else has.\n     * Since Grid only receives :columnCount and :rowCount it has no way of detecting when the underlying data changes.\n     */\n\n  }, {\n    key: 'recomputeGridSize',\n    value: function recomputeGridSize() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref4$columnIndex = _ref4.columnIndex,\n          columnIndex = _ref4$columnIndex === undefined ? 0 : _ref4$columnIndex,\n          _ref4$rowIndex = _ref4.rowIndex,\n          rowIndex = _ref4$rowIndex === undefined ? 0 : _ref4$rowIndex;\n\n      var _props3 = this.props,\n          scrollToColumn = _props3.scrollToColumn,\n          scrollToRow = _props3.scrollToRow;\n      var instanceProps = this.state.instanceProps;\n      instanceProps.columnSizeAndPositionManager.resetCell(columnIndex);\n      instanceProps.rowSizeAndPositionManager.resetCell(rowIndex); // Cell sizes may be determined by a function property.\n      // In this case the cDU handler can't know if they changed.\n      // Store this flag to let the next cDU pass know it needs to recompute the scroll offset.\n\n      this._recomputeScrollLeftFlag = scrollToColumn >= 0 && (this.state.scrollDirectionHorizontal === SCROLL_DIRECTION_FORWARD ? columnIndex <= scrollToColumn : columnIndex >= scrollToColumn);\n      this._recomputeScrollTopFlag = scrollToRow >= 0 && (this.state.scrollDirectionVertical === SCROLL_DIRECTION_FORWARD ? rowIndex <= scrollToRow : rowIndex >= scrollToRow); // Clear cell cache in case we are scrolling;\n      // Invalid row heights likely mean invalid cached content as well.\n\n      this._styleCache = {};\n      this._cellCache = {};\n      this.forceUpdate();\n    }\n    /**\n     * Ensure column and row are visible.\n     */\n\n  }, {\n    key: 'scrollToCell',\n    value: function scrollToCell(_ref5) {\n      var columnIndex = _ref5.columnIndex,\n          rowIndex = _ref5.rowIndex;\n      var columnCount = this.props.columnCount;\n      var props = this.props; // Don't adjust scroll offset for single-column grids (eg List, Table).\n      // This can cause a funky scroll offset because of the vertical scrollbar width.\n\n      if (columnCount > 1 && columnIndex !== undefined) {\n        this._updateScrollLeftForScrollToColumn(_extends({}, props, {\n          scrollToColumn: columnIndex\n        }));\n      }\n\n      if (rowIndex !== undefined) {\n        this._updateScrollTopForScrollToRow(_extends({}, props, {\n          scrollToRow: rowIndex\n        }));\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props4 = this.props,\n          getScrollbarSize = _props4.getScrollbarSize,\n          height = _props4.height,\n          scrollLeft = _props4.scrollLeft,\n          scrollToColumn = _props4.scrollToColumn,\n          scrollTop = _props4.scrollTop,\n          scrollToRow = _props4.scrollToRow,\n          width = _props4.width;\n      var instanceProps = this.state.instanceProps; // Reset initial offsets to be ignored in browser\n\n      this._initialScrollTop = 0;\n      this._initialScrollLeft = 0; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n      // We must do this at the start of the method as we may calculate and update scroll position below.\n\n      this._handleInvalidatedGridSize(); // If this component was first rendered server-side, scrollbar size will be undefined.\n      // In that event we need to remeasure.\n\n\n      if (!instanceProps.scrollbarSizeMeasured) {\n        this.setState(function (prevState) {\n          var stateUpdate = _extends({}, prevState, {\n            needToResetStyleCache: false\n          });\n\n          stateUpdate.instanceProps.scrollbarSize = getScrollbarSize();\n          stateUpdate.instanceProps.scrollbarSizeMeasured = true;\n          return stateUpdate;\n        });\n      }\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0 || typeof scrollTop === 'number' && scrollTop >= 0) {\n        var stateUpdate = Grid._getScrollToPositionStateUpdate({\n          prevState: this.state,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        });\n\n        if (stateUpdate) {\n          stateUpdate.needToResetStyleCache = false;\n          this.setState(stateUpdate);\n        }\n      } // refs don't work in `react-test-renderer`\n\n\n      if (this._scrollingContainer) {\n        // setting the ref's scrollLeft and scrollTop.\n        // Somehow in MultiGrid the main grid doesn't trigger a update on mount.\n        if (this._scrollingContainer.scrollLeft !== this.state.scrollLeft) {\n          this._scrollingContainer.scrollLeft = this.state.scrollLeft;\n        }\n\n        if (this._scrollingContainer.scrollTop !== this.state.scrollTop) {\n          this._scrollingContainer.scrollTop = this.state.scrollTop;\n        }\n      } // Don't update scroll offset if the size is 0; we don't render any cells in this case.\n      // Setting a state may cause us to later thing we've updated the offce when we haven't.\n\n\n      var sizeIsBiggerThanZero = height > 0 && width > 0;\n\n      if (scrollToColumn >= 0 && sizeIsBiggerThanZero) {\n        this._updateScrollLeftForScrollToColumn();\n      }\n\n      if (scrollToRow >= 0 && sizeIsBiggerThanZero) {\n        this._updateScrollTopForScrollToRow();\n      } // Update onRowsRendered callback\n\n\n      this._invokeOnGridRenderedHelper(); // Initialize onScroll callback\n\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft || 0,\n        scrollTop: scrollTop || 0,\n        totalColumnsWidth: instanceProps.columnSizeAndPositionManager.getTotalSize(),\n        totalRowsHeight: instanceProps.rowSizeAndPositionManager.getTotalSize()\n      });\n\n      this._maybeCallOnScrollbarPresenceChange();\n    }\n    /**\n     * @private\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) New scroll-to-cell props have been set\n     */\n\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      var _props5 = this.props,\n          autoHeight = _props5.autoHeight,\n          autoWidth = _props5.autoWidth,\n          columnCount = _props5.columnCount,\n          height = _props5.height,\n          rowCount = _props5.rowCount,\n          scrollToAlignment = _props5.scrollToAlignment,\n          scrollToColumn = _props5.scrollToColumn,\n          scrollToRow = _props5.scrollToRow,\n          width = _props5.width;\n      var _state = this.state,\n          scrollLeft = _state.scrollLeft,\n          scrollPositionChangeReason = _state.scrollPositionChangeReason,\n          scrollTop = _state.scrollTop,\n          instanceProps = _state.instanceProps; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n      // We must do this at the start of the method as we may calculate and update scroll position below.\n\n      this._handleInvalidatedGridSize(); // Handle edge case where column or row count has only just increased over 0.\n      // In this case we may have to restore a previously-specified scroll offset.\n      // For more info see bvaughn/react-virtualized/issues/218\n\n\n      var columnOrRowCountJustIncreasedFromZero = columnCount > 0 && prevProps.columnCount === 0 || rowCount > 0 && prevProps.rowCount === 0; // Make sure requested changes to :scrollLeft or :scrollTop get applied.\n      // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,\n      // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).\n      // So we only set these when we require an adjustment of the scroll position.\n      // See issue #2 for more information.\n\n      if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {\n        // @TRICKY :autoHeight and :autoWidth properties instructs Grid to leave :scrollTop and :scrollLeft management to an external HOC (eg WindowScroller).\n        // In this case we should avoid checking scrollingContainer.scrollTop and scrollingContainer.scrollLeft since it forces layout/flow.\n        if (!autoWidth && scrollLeft >= 0 && (scrollLeft !== this._scrollingContainer.scrollLeft || columnOrRowCountJustIncreasedFromZero)) {\n          this._scrollingContainer.scrollLeft = scrollLeft;\n        }\n\n        if (!autoHeight && scrollTop >= 0 && (scrollTop !== this._scrollingContainer.scrollTop || columnOrRowCountJustIncreasedFromZero)) {\n          this._scrollingContainer.scrollTop = scrollTop;\n        }\n      } // Special case where the previous size was 0:\n      // In this case we don't show any windowed cells at all.\n      // So we should always recalculate offset afterwards.\n\n\n      var sizeJustIncreasedFromZero = (prevProps.width === 0 || prevProps.height === 0) && height > 0 && width > 0; // Update scroll offsets if the current :scrollToColumn or :scrollToRow values requires it\n      // @TODO Do we also need this check or can the one in componentWillUpdate() suffice?\n\n      if (this._recomputeScrollLeftFlag) {\n        this._recomputeScrollLeftFlag = false;\n\n        this._updateScrollLeftForScrollToColumn(this.props);\n      } else {\n        updateScrollIndexHelper({\n          cellSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n          previousCellsCount: prevProps.columnCount,\n          previousCellSize: prevProps.columnWidth,\n          previousScrollToAlignment: prevProps.scrollToAlignment,\n          previousScrollToIndex: prevProps.scrollToColumn,\n          previousSize: prevProps.width,\n          scrollOffset: scrollLeft,\n          scrollToAlignment: scrollToAlignment,\n          scrollToIndex: scrollToColumn,\n          size: width,\n          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,\n          updateScrollIndexCallback: function updateScrollIndexCallback() {\n            return _this2._updateScrollLeftForScrollToColumn(_this2.props);\n          }\n        });\n      }\n\n      if (this._recomputeScrollTopFlag) {\n        this._recomputeScrollTopFlag = false;\n\n        this._updateScrollTopForScrollToRow(this.props);\n      } else {\n        updateScrollIndexHelper({\n          cellSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n          previousCellsCount: prevProps.rowCount,\n          previousCellSize: prevProps.rowHeight,\n          previousScrollToAlignment: prevProps.scrollToAlignment,\n          previousScrollToIndex: prevProps.scrollToRow,\n          previousSize: prevProps.height,\n          scrollOffset: scrollTop,\n          scrollToAlignment: scrollToAlignment,\n          scrollToIndex: scrollToRow,\n          size: height,\n          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,\n          updateScrollIndexCallback: function updateScrollIndexCallback() {\n            return _this2._updateScrollTopForScrollToRow(_this2.props);\n          }\n        });\n      } // Update onRowsRendered callback if start/stop indices have changed\n\n\n      this._invokeOnGridRenderedHelper(); // Changes to :scrollLeft or :scrollTop should also notify :onScroll listeners\n\n\n      if (scrollLeft !== prevState.scrollLeft || scrollTop !== prevState.scrollTop) {\n        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n\n        this._invokeOnScrollMemoizer({\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          totalColumnsWidth: totalColumnsWidth,\n          totalRowsHeight: totalRowsHeight\n        });\n      }\n\n      this._maybeCallOnScrollbarPresenceChange();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this._disablePointerEventsTimeoutId) {\n        cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n      }\n    }\n    /**\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) Empty content (0 rows or columns)\n     * 2) New scroll props overriding the current state\n     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid\n     */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props6 = this.props,\n          autoContainerWidth = _props6.autoContainerWidth,\n          autoHeight = _props6.autoHeight,\n          autoWidth = _props6.autoWidth,\n          className = _props6.className,\n          containerProps = _props6.containerProps,\n          containerRole = _props6.containerRole,\n          containerStyle = _props6.containerStyle,\n          height = _props6.height,\n          id = _props6.id,\n          noContentRenderer = _props6.noContentRenderer,\n          role = _props6.role,\n          style = _props6.style,\n          tabIndex = _props6.tabIndex,\n          width = _props6.width;\n      var _state2 = this.state,\n          instanceProps = _state2.instanceProps,\n          needToResetStyleCache = _state2.needToResetStyleCache;\n\n      var isScrolling = this._isScrolling();\n\n      var gridStyle = {\n        boxSizing: 'border-box',\n        direction: 'ltr',\n        height: autoHeight ? 'auto' : height,\n        position: 'relative',\n        width: autoWidth ? 'auto' : width,\n        WebkitOverflowScrolling: 'touch',\n        willChange: 'transform'\n      };\n\n      if (needToResetStyleCache) {\n        this._styleCache = {};\n      } // calculate _styleCache here\n      // if state.isScrolling (not from _isScrolling) then reset\n\n\n      if (!this.state.isScrolling) {\n        this._resetStyleCache();\n      } // calculate children to render here\n\n\n      this._calculateChildrenToRender(this.props, this.state);\n\n      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize(); // Force browser to hide scrollbars when we know they aren't necessary.\n      // Otherwise once scrollbars appear they may not disappear again.\n      // For more info see issue #116\n\n      var verticalScrollBarSize = totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n      var horizontalScrollBarSize = totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n\n      if (horizontalScrollBarSize !== this._horizontalScrollBarSize || verticalScrollBarSize !== this._verticalScrollBarSize) {\n        this._horizontalScrollBarSize = horizontalScrollBarSize;\n        this._verticalScrollBarSize = verticalScrollBarSize;\n        this._scrollbarPresenceChanged = true;\n      } // Also explicitly init styles to 'auto' if scrollbars are required.\n      // This works around an obscure edge case where external CSS styles have not yet been loaded,\n      // But an initial scroll index of offset is set as an external prop.\n      // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.\n      // This was originally reported via clauderic/react-infinite-calendar/issues/23\n\n\n      gridStyle.overflowX = totalColumnsWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';\n      gridStyle.overflowY = totalRowsHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';\n      var childrenToDisplay = this._childrenToDisplay;\n      var showNoContentRenderer = childrenToDisplay.length === 0 && height > 0 && width > 0;\n      return React.createElement('div', _extends({\n        ref: this._setScrollingContainerRef\n      }, containerProps, {\n        'aria-label': this.props['aria-label'],\n        'aria-readonly': this.props['aria-readonly'],\n        className: clsx('ReactVirtualized__Grid', className),\n        id: id,\n        onScroll: this._onScroll,\n        role: role,\n        style: _extends({}, gridStyle, style),\n        tabIndex: tabIndex\n      }), childrenToDisplay.length > 0 && React.createElement('div', {\n        className: 'ReactVirtualized__Grid__innerScrollContainer',\n        role: containerRole,\n        style: _extends({\n          width: autoContainerWidth ? 'auto' : totalColumnsWidth,\n          height: totalRowsHeight,\n          maxWidth: totalColumnsWidth,\n          maxHeight: totalRowsHeight,\n          overflow: 'hidden',\n          pointerEvents: isScrolling ? 'none' : '',\n          position: 'relative'\n        }, containerStyle)\n      }, childrenToDisplay), showNoContentRenderer && noContentRenderer());\n    }\n    /* ---------------------------- Helper methods ---------------------------- */\n\n  }, {\n    key: '_calculateChildrenToRender',\n    value: function _calculateChildrenToRender() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      var cellRenderer = props.cellRenderer,\n          cellRangeRenderer = props.cellRangeRenderer,\n          columnCount = props.columnCount,\n          deferredMeasurementCache = props.deferredMeasurementCache,\n          height = props.height,\n          overscanColumnCount = props.overscanColumnCount,\n          overscanIndicesGetter = props.overscanIndicesGetter,\n          overscanRowCount = props.overscanRowCount,\n          rowCount = props.rowCount,\n          width = props.width,\n          isScrollingOptOut = props.isScrollingOptOut;\n      var scrollDirectionHorizontal = state.scrollDirectionHorizontal,\n          scrollDirectionVertical = state.scrollDirectionVertical,\n          instanceProps = state.instanceProps;\n      var scrollTop = this._initialScrollTop > 0 ? this._initialScrollTop : state.scrollTop;\n      var scrollLeft = this._initialScrollLeft > 0 ? this._initialScrollLeft : state.scrollLeft;\n\n      var isScrolling = this._isScrolling(props, state);\n\n      this._childrenToDisplay = []; // Render only enough columns and rows to cover the visible area of the grid.\n\n      if (height > 0 && width > 0) {\n        var visibleColumnIndices = instanceProps.columnSizeAndPositionManager.getVisibleCellRange({\n          containerSize: width,\n          offset: scrollLeft\n        });\n        var visibleRowIndices = instanceProps.rowSizeAndPositionManager.getVisibleCellRange({\n          containerSize: height,\n          offset: scrollTop\n        });\n        var horizontalOffsetAdjustment = instanceProps.columnSizeAndPositionManager.getOffsetAdjustment({\n          containerSize: width,\n          offset: scrollLeft\n        });\n        var verticalOffsetAdjustment = instanceProps.rowSizeAndPositionManager.getOffsetAdjustment({\n          containerSize: height,\n          offset: scrollTop\n        }); // Store for _invokeOnGridRenderedHelper()\n\n        this._renderedColumnStartIndex = visibleColumnIndices.start;\n        this._renderedColumnStopIndex = visibleColumnIndices.stop;\n        this._renderedRowStartIndex = visibleRowIndices.start;\n        this._renderedRowStopIndex = visibleRowIndices.stop;\n        var overscanColumnIndices = overscanIndicesGetter({\n          direction: 'horizontal',\n          cellCount: columnCount,\n          overscanCellsCount: overscanColumnCount,\n          scrollDirection: scrollDirectionHorizontal,\n          startIndex: typeof visibleColumnIndices.start === 'number' ? visibleColumnIndices.start : 0,\n          stopIndex: typeof visibleColumnIndices.stop === 'number' ? visibleColumnIndices.stop : -1\n        });\n        var overscanRowIndices = overscanIndicesGetter({\n          direction: 'vertical',\n          cellCount: rowCount,\n          overscanCellsCount: overscanRowCount,\n          scrollDirection: scrollDirectionVertical,\n          startIndex: typeof visibleRowIndices.start === 'number' ? visibleRowIndices.start : 0,\n          stopIndex: typeof visibleRowIndices.stop === 'number' ? visibleRowIndices.stop : -1\n        }); // Store for _invokeOnGridRenderedHelper()\n\n        var columnStartIndex = overscanColumnIndices.overscanStartIndex;\n        var columnStopIndex = overscanColumnIndices.overscanStopIndex;\n        var rowStartIndex = overscanRowIndices.overscanStartIndex;\n        var rowStopIndex = overscanRowIndices.overscanStopIndex; // Advanced use-cases (eg CellMeasurer) require batched measurements to determine accurate sizes.\n\n        if (deferredMeasurementCache) {\n          // If rows have a dynamic height, scan the rows we are about to render.\n          // If any have not yet been measured, then we need to render all columns initially,\n          // Because the height of the row is equal to the tallest cell within that row,\n          // (And so we can't know the height without measuring all column-cells first).\n          if (!deferredMeasurementCache.hasFixedHeight()) {\n            for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\n              if (!deferredMeasurementCache.has(rowIndex, 0)) {\n                columnStartIndex = 0;\n                columnStopIndex = columnCount - 1;\n                break;\n              }\n            }\n          } // If columns have a dynamic width, scan the columns we are about to render.\n          // If any have not yet been measured, then we need to render all rows initially,\n          // Because the width of the column is equal to the widest cell within that column,\n          // (And so we can't know the width without measuring all row-cells first).\n\n\n          if (!deferredMeasurementCache.hasFixedWidth()) {\n            for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\n              if (!deferredMeasurementCache.has(0, columnIndex)) {\n                rowStartIndex = 0;\n                rowStopIndex = rowCount - 1;\n                break;\n              }\n            }\n          }\n        }\n\n        this._childrenToDisplay = cellRangeRenderer({\n          cellCache: this._cellCache,\n          cellRenderer: cellRenderer,\n          columnSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n          columnStartIndex: columnStartIndex,\n          columnStopIndex: columnStopIndex,\n          deferredMeasurementCache: deferredMeasurementCache,\n          horizontalOffsetAdjustment: horizontalOffsetAdjustment,\n          isScrolling: isScrolling,\n          isScrollingOptOut: isScrollingOptOut,\n          parent: this,\n          rowSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n          rowStartIndex: rowStartIndex,\n          rowStopIndex: rowStopIndex,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          styleCache: this._styleCache,\n          verticalOffsetAdjustment: verticalOffsetAdjustment,\n          visibleColumnIndices: visibleColumnIndices,\n          visibleRowIndices: visibleRowIndices\n        }); // update the indices\n\n        this._columnStartIndex = columnStartIndex;\n        this._columnStopIndex = columnStopIndex;\n        this._rowStartIndex = rowStartIndex;\n        this._rowStopIndex = rowStopIndex;\n      }\n    }\n    /**\n     * Sets an :isScrolling flag for a small window of time.\n     * This flag is used to disable pointer events on the scrollable portion of the Grid.\n     * This prevents jerky/stuttery mouse-wheel scrolling.\n     */\n\n  }, {\n    key: '_debounceScrollEnded',\n    value: function _debounceScrollEnded() {\n      var scrollingResetTimeInterval = this.props.scrollingResetTimeInterval;\n\n      if (this._disablePointerEventsTimeoutId) {\n        cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n      }\n\n      this._disablePointerEventsTimeoutId = requestAnimationTimeout(this._debounceScrollEndedCallback, scrollingResetTimeInterval);\n    }\n  }, {\n    key: '_handleInvalidatedGridSize',\n\n    /**\n     * Check for batched CellMeasurer size invalidations.\n     * This will occur the first time one or more previously unmeasured cells are rendered.\n     */\n    value: function _handleInvalidatedGridSize() {\n      if (typeof this._deferredInvalidateColumnIndex === 'number' && typeof this._deferredInvalidateRowIndex === 'number') {\n        var columnIndex = this._deferredInvalidateColumnIndex;\n        var rowIndex = this._deferredInvalidateRowIndex;\n        this._deferredInvalidateColumnIndex = null;\n        this._deferredInvalidateRowIndex = null;\n        this.recomputeGridSize({\n          columnIndex: columnIndex,\n          rowIndex: rowIndex\n        });\n      }\n    }\n  }, {\n    key: '_invokeOnScrollMemoizer',\n    value: function _invokeOnScrollMemoizer(_ref6) {\n      var _this3 = this;\n\n      var scrollLeft = _ref6.scrollLeft,\n          scrollTop = _ref6.scrollTop,\n          totalColumnsWidth = _ref6.totalColumnsWidth,\n          totalRowsHeight = _ref6.totalRowsHeight;\n\n      this._onScrollMemoizer({\n        callback: function callback(_ref7) {\n          var scrollLeft = _ref7.scrollLeft,\n              scrollTop = _ref7.scrollTop;\n          var _props7 = _this3.props,\n              height = _props7.height,\n              onScroll = _props7.onScroll,\n              width = _props7.width;\n          onScroll({\n            clientHeight: height,\n            clientWidth: width,\n            scrollHeight: totalRowsHeight,\n            scrollLeft: scrollLeft,\n            scrollTop: scrollTop,\n            scrollWidth: totalColumnsWidth\n          });\n        },\n        indices: {\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        }\n      });\n    }\n  }, {\n    key: '_isScrolling',\n    value: function _isScrolling() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state; // If isScrolling is defined in props, use it to override the value in state\n      // This is a performance optimization for WindowScroller + Grid\n\n      return Object.hasOwnProperty.call(props, 'isScrolling') ? Boolean(props.isScrolling) : Boolean(state.isScrolling);\n    }\n  }, {\n    key: '_maybeCallOnScrollbarPresenceChange',\n    value: function _maybeCallOnScrollbarPresenceChange() {\n      if (this._scrollbarPresenceChanged) {\n        var _onScrollbarPresenceChange = this.props.onScrollbarPresenceChange;\n        this._scrollbarPresenceChanged = false;\n\n        _onScrollbarPresenceChange({\n          horizontal: this._horizontalScrollBarSize > 0,\n          size: this.state.instanceProps.scrollbarSize,\n          vertical: this._verticalScrollBarSize > 0\n        });\n      }\n    }\n  }, {\n    key: 'scrollToPosition',\n\n    /**\n     * Scroll to the specified offset(s).\n     * Useful for animating position changes.\n     */\n    value: function scrollToPosition(_ref8) {\n      var scrollLeft = _ref8.scrollLeft,\n          scrollTop = _ref8.scrollTop;\n\n      var stateUpdate = Grid._getScrollToPositionStateUpdate({\n        prevState: this.state,\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop\n      });\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }, {\n    key: '_getCalculatedScrollLeft',\n    value: function _getCalculatedScrollLeft() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      return Grid._getCalculatedScrollLeft(props, state);\n    }\n  }, {\n    key: '_updateScrollLeftForScrollToColumn',\n    value: function _updateScrollLeftForScrollToColumn() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n\n      var stateUpdate = Grid._getScrollLeftForScrollToColumnStateUpdate(props, state);\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }, {\n    key: '_getCalculatedScrollTop',\n    value: function _getCalculatedScrollTop() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      return Grid._getCalculatedScrollTop(props, state);\n    }\n  }, {\n    key: '_resetStyleCache',\n    value: function _resetStyleCache() {\n      var styleCache = this._styleCache;\n      var cellCache = this._cellCache;\n      var isScrollingOptOut = this.props.isScrollingOptOut; // Reset cell and style caches once scrolling stops.\n      // This makes Grid simpler to use (since cells commonly change).\n      // And it keeps the caches from growing too large.\n      // Performance is most sensitive when a user is scrolling.\n      // Don't clear visible cells from cellCache if isScrollingOptOut is specified.\n      // This keeps the cellCache to a resonable size.\n\n      this._cellCache = {};\n      this._styleCache = {}; // Copy over the visible cell styles so avoid unnecessary re-render.\n\n      for (var rowIndex = this._rowStartIndex; rowIndex <= this._rowStopIndex; rowIndex++) {\n        for (var columnIndex = this._columnStartIndex; columnIndex <= this._columnStopIndex; columnIndex++) {\n          var key = rowIndex + '-' + columnIndex;\n          this._styleCache[key] = styleCache[key];\n\n          if (isScrollingOptOut) {\n            this._cellCache[key] = cellCache[key];\n          }\n        }\n      }\n    }\n  }, {\n    key: '_updateScrollTopForScrollToRow',\n    value: function _updateScrollTopForScrollToRow() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n\n      var stateUpdate = Grid._getScrollTopForScrollToRowStateUpdate(props, state);\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var newState = {};\n\n      if (nextProps.columnCount === 0 && prevState.scrollLeft !== 0 || nextProps.rowCount === 0 && prevState.scrollTop !== 0) {\n        newState.scrollLeft = 0;\n        newState.scrollTop = 0; // only use scroll{Left,Top} from props if scrollTo{Column,Row} isn't specified\n        // scrollTo{Column,Row} should override scroll{Left,Top}\n      } else if (nextProps.scrollLeft !== prevState.scrollLeft && nextProps.scrollToColumn < 0 || nextProps.scrollTop !== prevState.scrollTop && nextProps.scrollToRow < 0) {\n        _Object$assign(newState, Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: nextProps.scrollLeft,\n          scrollTop: nextProps.scrollTop\n        }));\n      }\n\n      var instanceProps = prevState.instanceProps; // Initially we should not clearStyleCache\n\n      newState.needToResetStyleCache = false;\n\n      if (nextProps.columnWidth !== instanceProps.prevColumnWidth || nextProps.rowHeight !== instanceProps.prevRowHeight) {\n        // Reset cache. set it to {} in render\n        newState.needToResetStyleCache = true;\n      }\n\n      instanceProps.columnSizeAndPositionManager.configure({\n        cellCount: nextProps.columnCount,\n        estimatedCellSize: Grid._getEstimatedColumnSize(nextProps),\n        cellSizeGetter: Grid._wrapSizeGetter(nextProps.columnWidth)\n      });\n      instanceProps.rowSizeAndPositionManager.configure({\n        cellCount: nextProps.rowCount,\n        estimatedCellSize: Grid._getEstimatedRowSize(nextProps),\n        cellSizeGetter: Grid._wrapSizeGetter(nextProps.rowHeight)\n      });\n\n      if (instanceProps.prevColumnCount === 0 || instanceProps.prevRowCount === 0) {\n        instanceProps.prevColumnCount = 0;\n        instanceProps.prevRowCount = 0;\n      } // If scrolling is controlled outside this component, clear cache when scrolling stops\n\n\n      if (nextProps.autoHeight && nextProps.isScrolling === false && instanceProps.prevIsScrolling === true) {\n        _Object$assign(newState, {\n          isScrolling: false\n        });\n      }\n\n      var maybeStateA = void 0;\n      var maybeStateB = void 0;\n      calculateSizeAndPositionDataAndUpdateScrollOffset({\n        cellCount: instanceProps.prevColumnCount,\n        cellSize: typeof instanceProps.prevColumnWidth === 'number' ? instanceProps.prevColumnWidth : null,\n        computeMetadataCallback: function computeMetadataCallback() {\n          return instanceProps.columnSizeAndPositionManager.resetCell(0);\n        },\n        computeMetadataCallbackProps: nextProps,\n        nextCellsCount: nextProps.columnCount,\n        nextCellSize: typeof nextProps.columnWidth === 'number' ? nextProps.columnWidth : null,\n        nextScrollToIndex: nextProps.scrollToColumn,\n        scrollToIndex: instanceProps.prevScrollToColumn,\n        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {\n          maybeStateA = Grid._getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState);\n        }\n      });\n      calculateSizeAndPositionDataAndUpdateScrollOffset({\n        cellCount: instanceProps.prevRowCount,\n        cellSize: typeof instanceProps.prevRowHeight === 'number' ? instanceProps.prevRowHeight : null,\n        computeMetadataCallback: function computeMetadataCallback() {\n          return instanceProps.rowSizeAndPositionManager.resetCell(0);\n        },\n        computeMetadataCallbackProps: nextProps,\n        nextCellsCount: nextProps.rowCount,\n        nextCellSize: typeof nextProps.rowHeight === 'number' ? nextProps.rowHeight : null,\n        nextScrollToIndex: nextProps.scrollToRow,\n        scrollToIndex: instanceProps.prevScrollToRow,\n        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {\n          maybeStateB = Grid._getScrollTopForScrollToRowStateUpdate(nextProps, prevState);\n        }\n      });\n      instanceProps.prevColumnCount = nextProps.columnCount;\n      instanceProps.prevColumnWidth = nextProps.columnWidth;\n      instanceProps.prevIsScrolling = nextProps.isScrolling === true;\n      instanceProps.prevRowCount = nextProps.rowCount;\n      instanceProps.prevRowHeight = nextProps.rowHeight;\n      instanceProps.prevScrollToColumn = nextProps.scrollToColumn;\n      instanceProps.prevScrollToRow = nextProps.scrollToRow; // getting scrollBarSize (moved from componentWillMount)\n\n      instanceProps.scrollbarSize = nextProps.getScrollbarSize();\n\n      if (instanceProps.scrollbarSize === undefined) {\n        instanceProps.scrollbarSizeMeasured = false;\n        instanceProps.scrollbarSize = 0;\n      } else {\n        instanceProps.scrollbarSizeMeasured = true;\n      }\n\n      newState.instanceProps = instanceProps;\n      return _extends({}, newState, maybeStateA, maybeStateB);\n    }\n  }, {\n    key: '_getEstimatedColumnSize',\n    value: function _getEstimatedColumnSize(props) {\n      return typeof props.columnWidth === 'number' ? props.columnWidth : props.estimatedColumnSize;\n    }\n  }, {\n    key: '_getEstimatedRowSize',\n    value: function _getEstimatedRowSize(props) {\n      return typeof props.rowHeight === 'number' ? props.rowHeight : props.estimatedRowSize;\n    }\n  }, {\n    key: '_getScrollToPositionStateUpdate',\n\n    /**\n     * Get the updated state after scrolling to\n     * scrollLeft and scrollTop\n     */\n    value: function _getScrollToPositionStateUpdate(_ref9) {\n      var prevState = _ref9.prevState,\n          scrollLeft = _ref9.scrollLeft,\n          scrollTop = _ref9.scrollTop;\n      var newState = {\n        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED\n      };\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0) {\n        newState.scrollDirectionHorizontal = scrollLeft > prevState.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n        newState.scrollLeft = scrollLeft;\n      }\n\n      if (typeof scrollTop === 'number' && scrollTop >= 0) {\n        newState.scrollDirectionVertical = scrollTop > prevState.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n        newState.scrollTop = scrollTop;\n      }\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft || typeof scrollTop === 'number' && scrollTop >= 0 && scrollTop !== prevState.scrollTop) {\n        return newState;\n      }\n\n      return null;\n    }\n  }, {\n    key: '_wrapSizeGetter',\n    value: function _wrapSizeGetter(value) {\n      return typeof value === 'function' ? value : function () {\n        return value;\n      };\n    }\n  }, {\n    key: '_getCalculatedScrollLeft',\n    value: function _getCalculatedScrollLeft(nextProps, prevState) {\n      var columnCount = nextProps.columnCount,\n          height = nextProps.height,\n          scrollToAlignment = nextProps.scrollToAlignment,\n          scrollToColumn = nextProps.scrollToColumn,\n          width = nextProps.width;\n      var scrollLeft = prevState.scrollLeft,\n          instanceProps = prevState.instanceProps;\n\n      if (columnCount > 0) {\n        var finalColumn = columnCount - 1;\n        var targetIndex = scrollToColumn < 0 ? finalColumn : Math.min(finalColumn, scrollToColumn);\n        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n        return instanceProps.columnSizeAndPositionManager.getUpdatedOffsetForIndex({\n          align: scrollToAlignment,\n          containerSize: width - scrollBarSize,\n          currentOffset: scrollLeft,\n          targetIndex: targetIndex\n        });\n      }\n\n      return 0;\n    }\n  }, {\n    key: '_getScrollLeftForScrollToColumnStateUpdate',\n    value: function _getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState) {\n      var scrollLeft = prevState.scrollLeft;\n\n      var calculatedScrollLeft = Grid._getCalculatedScrollLeft(nextProps, prevState);\n\n      if (typeof calculatedScrollLeft === 'number' && calculatedScrollLeft >= 0 && scrollLeft !== calculatedScrollLeft) {\n        return Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: -1\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: '_getCalculatedScrollTop',\n    value: function _getCalculatedScrollTop(nextProps, prevState) {\n      var height = nextProps.height,\n          rowCount = nextProps.rowCount,\n          scrollToAlignment = nextProps.scrollToAlignment,\n          scrollToRow = nextProps.scrollToRow,\n          width = nextProps.width;\n      var scrollTop = prevState.scrollTop,\n          instanceProps = prevState.instanceProps;\n\n      if (rowCount > 0) {\n        var finalRow = rowCount - 1;\n        var targetIndex = scrollToRow < 0 ? finalRow : Math.min(finalRow, scrollToRow);\n        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n        return instanceProps.rowSizeAndPositionManager.getUpdatedOffsetForIndex({\n          align: scrollToAlignment,\n          containerSize: height - scrollBarSize,\n          currentOffset: scrollTop,\n          targetIndex: targetIndex\n        });\n      }\n\n      return 0;\n    }\n  }, {\n    key: '_getScrollTopForScrollToRowStateUpdate',\n    value: function _getScrollTopForScrollToRowStateUpdate(nextProps, prevState) {\n      var scrollTop = prevState.scrollTop;\n\n      var calculatedScrollTop = Grid._getCalculatedScrollTop(nextProps, prevState);\n\n      if (typeof calculatedScrollTop === 'number' && calculatedScrollTop >= 0 && scrollTop !== calculatedScrollTop) {\n        return Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: -1,\n          scrollTop: calculatedScrollTop\n        });\n      }\n\n      return null;\n    }\n  }]);\n\n  return Grid;\n}(React.PureComponent);\n\nGrid.defaultProps = {\n  'aria-label': 'grid',\n  'aria-readonly': true,\n  autoContainerWidth: false,\n  autoHeight: false,\n  autoWidth: false,\n  cellRangeRenderer: defaultCellRangeRenderer,\n  containerRole: 'rowgroup',\n  containerStyle: {},\n  estimatedColumnSize: 100,\n  estimatedRowSize: 30,\n  getScrollbarSize: scrollbarSize,\n  noContentRenderer: renderNull,\n  onScroll: function onScroll() {},\n  onScrollbarPresenceChange: function onScrollbarPresenceChange() {},\n  onSectionRendered: function onSectionRendered() {},\n  overscanColumnCount: 0,\n  overscanIndicesGetter: defaultOverscanIndicesGetter,\n  overscanRowCount: 10,\n  role: 'grid',\n  scrollingResetTimeInterval: DEFAULT_SCROLLING_RESET_TIME_INTERVAL,\n  scrollToAlignment: 'auto',\n  scrollToColumn: -1,\n  scrollToRow: -1,\n  style: {},\n  tabIndex: 0,\n  isScrollingOptOut: false\n};\nGrid.propTypes = process.env.NODE_ENV === 'production' ? null : {\n  \"aria-label\": PropTypes.string.isRequired,\n  \"aria-readonly\": PropTypes.bool,\n\n  /**\n   * Set the width of the inner scrollable container to 'auto'.\n   * This is useful for single-column Grids to ensure that the column doesn't extend below a vertical scrollbar.\n   */\n  autoContainerWidth: PropTypes.bool.isRequired,\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  autoHeight: PropTypes.bool.isRequired,\n\n  /**\n   * Removes fixed width from the scrollingContainer so that the total width of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  autoWidth: PropTypes.bool.isRequired,\n\n  /** Responsible for rendering a cell given an row and column index.  */\n  cellRenderer: function cellRenderer() {\n    return (typeof bpfrpt_proptype_CellRenderer === 'function' ? bpfrpt_proptype_CellRenderer.isRequired ? bpfrpt_proptype_CellRenderer.isRequired : bpfrpt_proptype_CellRenderer : PropTypes.shape(bpfrpt_proptype_CellRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Responsible for rendering a group of cells given their index ranges.  */\n  cellRangeRenderer: function cellRangeRenderer() {\n    return (typeof bpfrpt_proptype_CellRangeRenderer === 'function' ? bpfrpt_proptype_CellRangeRenderer.isRequired ? bpfrpt_proptype_CellRangeRenderer.isRequired : bpfrpt_proptype_CellRangeRenderer : PropTypes.shape(bpfrpt_proptype_CellRangeRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Optional custom CSS class name to attach to root Grid element.  */\n  className: PropTypes.string,\n\n  /** Number of columns in grid.  */\n  columnCount: PropTypes.number.isRequired,\n\n  /** Either a fixed column width (number) or a function that returns the width of a column given its index.  */\n  columnWidth: function columnWidth() {\n    return (typeof bpfrpt_proptype_CellSize === 'function' ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : PropTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n  /** Unfiltered props for the Grid container. */\n  containerProps: PropTypes.object,\n\n  /** ARIA role for the cell-container.  */\n  containerRole: PropTypes.string.isRequired,\n\n  /** Optional inline style applied to inner cell-container */\n  containerStyle: PropTypes.object.isRequired,\n\n  /**\n   * If CellMeasurer is used to measure this Grid's children, this should be a pointer to its CellMeasurerCache.\n   * A shared CellMeasurerCache reference enables Grid and CellMeasurer to share measurement data.\n   */\n  deferredMeasurementCache: PropTypes.object,\n\n  /**\n   * Used to estimate the total width of a Grid before all of its columns have actually been measured.\n   * The estimated total width is adjusted as columns are rendered.\n   */\n  estimatedColumnSize: PropTypes.number.isRequired,\n\n  /**\n   * Used to estimate the total height of a Grid before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   */\n  estimatedRowSize: PropTypes.number.isRequired,\n\n  /** Exposed for testing purposes only.  */\n  getScrollbarSize: PropTypes.func.isRequired,\n\n  /** Height of Grid; this property determines the number of visible (vs virtualized) rows.  */\n  height: PropTypes.number.isRequired,\n\n  /** Optional custom id to attach to root Grid element.  */\n  id: PropTypes.string,\n\n  /**\n   * Override internal is-scrolling state tracking.\n   * This property is primarily intended for use with the WindowScroller component.\n   */\n  isScrolling: PropTypes.bool,\n\n  /**\n   * Opt-out of isScrolling param passed to cellRangeRenderer.\n   * To avoid the extra render when scroll stops.\n   */\n  isScrollingOptOut: PropTypes.bool.isRequired,\n\n  /** Optional renderer to be used in place of rows when either :rowCount or :columnCount is 0.  */\n  noContentRenderer: function noContentRenderer() {\n    return (typeof bpfrpt_proptype_NoContentRenderer === 'function' ? bpfrpt_proptype_NoContentRenderer.isRequired ? bpfrpt_proptype_NoContentRenderer.isRequired : bpfrpt_proptype_NoContentRenderer : PropTypes.shape(bpfrpt_proptype_NoContentRenderer).isRequired).apply(this, arguments);\n  },\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   */\n  onScroll: PropTypes.func.isRequired,\n\n  /**\n   * Called whenever a horizontal or vertical scrollbar is added or removed.\n   * This prop is not intended for end-user use;\n   * It is used by MultiGrid to support fixed-row/fixed-column scroll syncing.\n   */\n  onScrollbarPresenceChange: PropTypes.func.isRequired,\n\n  /** Callback invoked with information about the section of the Grid that was just rendered.  */\n  onSectionRendered: PropTypes.func.isRequired,\n\n  /**\n   * Number of columns to render before/after the visible section of the grid.\n   * These columns can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  overscanColumnCount: PropTypes.number.isRequired,\n\n  /**\n   * Calculates the number of cells to overscan before and after a specified range.\n   * This function ensures that overscanning doesn't exceed the available cells.\n   */\n  overscanIndicesGetter: function overscanIndicesGetter() {\n    return (typeof bpfrpt_proptype_OverscanIndicesGetter === 'function' ? bpfrpt_proptype_OverscanIndicesGetter.isRequired ? bpfrpt_proptype_OverscanIndicesGetter.isRequired : bpfrpt_proptype_OverscanIndicesGetter : PropTypes.shape(bpfrpt_proptype_OverscanIndicesGetter).isRequired).apply(this, arguments);\n  },\n\n  /**\n   * Number of rows to render above/below the visible section of the grid.\n   * These rows can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  overscanRowCount: PropTypes.number.isRequired,\n\n  /** ARIA role for the grid element.  */\n  role: PropTypes.string.isRequired,\n\n  /**\n   * Either a fixed row height (number) or a function that returns the height of a row given its index.\n   * Should implement the following interface: ({ index: number }): number\n   */\n  rowHeight: function rowHeight() {\n    return (typeof bpfrpt_proptype_CellSize === 'function' ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : PropTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n  /** Number of rows in grid.  */\n  rowCount: PropTypes.number.isRequired,\n\n  /** Wait this amount of time after the last scroll event before resetting Grid `pointer-events`. */\n  scrollingResetTimeInterval: PropTypes.number.isRequired,\n\n  /** Horizontal offset. */\n  scrollLeft: PropTypes.number,\n\n  /**\n   * Controls scroll-to-cell behavior of the Grid.\n   * The default (\"auto\") scrolls the least amount possible to ensure that the specified cell is fully visible.\n   * Use \"start\" to align cells to the top/left of the Grid and \"end\" to align bottom/right.\n   */\n  scrollToAlignment: function scrollToAlignment() {\n    return (typeof bpfrpt_proptype_Alignment === 'function' ? bpfrpt_proptype_Alignment.isRequired ? bpfrpt_proptype_Alignment.isRequired : bpfrpt_proptype_Alignment : PropTypes.shape(bpfrpt_proptype_Alignment).isRequired).apply(this, arguments);\n  },\n\n  /** Column index to ensure visible (by forcefully scrolling if necessary) */\n  scrollToColumn: PropTypes.number.isRequired,\n\n  /** Vertical offset. */\n  scrollTop: PropTypes.number,\n\n  /** Row index to ensure visible (by forcefully scrolling if necessary) */\n  scrollToRow: PropTypes.number.isRequired,\n\n  /** Optional inline style */\n  style: PropTypes.object.isRequired,\n\n  /** Tab index for focus */\n  tabIndex: PropTypes.number,\n\n  /** Width of Grid; this property determines the number of visible (vs virtualized) columns.  */\n  width: PropTypes.number.isRequired\n};\npolyfill(Grid);\nexport default Grid;\nimport { bpfrpt_proptype_CellRenderer } from './types';\nimport { bpfrpt_proptype_CellRangeRenderer } from './types';\nimport { bpfrpt_proptype_CellPosition } from './types';\nimport { bpfrpt_proptype_CellSize } from './types';\nimport { bpfrpt_proptype_CellSizeGetter } from './types';\nimport { bpfrpt_proptype_NoContentRenderer } from './types';\nimport { bpfrpt_proptype_Scroll } from './types';\nimport { bpfrpt_proptype_ScrollbarPresenceChange } from './types';\nimport { bpfrpt_proptype_RenderedSection } from './types';\nimport { bpfrpt_proptype_OverscanIndicesGetter } from './types';\nimport { bpfrpt_proptype_Alignment } from './types';\nimport { bpfrpt_proptype_CellCache } from './types';\nimport { bpfrpt_proptype_StyleCache } from './types';\nimport { bpfrpt_proptype_AnimationTimeoutId } from '../utils/requestAnimationTimeout';\nimport PropTypes from 'prop-types';","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/react-virtualized/dist/es/Grid/Grid.js"],"names":["_Object$assign","_extends","_Object$getPrototypeOf","_classCallCheck","_createClass","_possibleConstructorReturn","_inherits","React","clsx","calculateSizeAndPositionDataAndUpdateScrollOffset","ScalingCellSizeAndPositionManager","createCallbackMemoizer","defaultOverscanIndicesGetter","SCROLL_DIRECTION_BACKWARD","SCROLL_DIRECTION_FORWARD","updateScrollIndexHelper","defaultCellRangeRenderer","scrollbarSize","polyfill","requestAnimationTimeout","cancelAnimationTimeout","DEFAULT_SCROLLING_RESET_TIME_INTERVAL","SCROLL_POSITION_CHANGE_REASONS","OBSERVED","REQUESTED","renderNull","Grid","_React$PureComponent","props","_this","__proto__","call","_onGridRenderedMemoizer","_onScrollMemoizer","_deferredInvalidateColumnIndex","_deferredInvalidateRowIndex","_recomputeScrollLeftFlag","_recomputeScrollTopFlag","_horizontalScrollBarSize","_verticalScrollBarSize","_scrollbarPresenceChanged","_renderedColumnStartIndex","_renderedColumnStopIndex","_renderedRowStartIndex","_renderedRowStopIndex","_styleCache","_cellCache","_debounceScrollEndedCallback","_disablePointerEventsTimeoutId","setState","isScrolling","needToResetStyleCache","_invokeOnGridRenderedHelper","onSectionRendered","callback","indices","columnOverscanStartIndex","_columnStartIndex","columnOverscanStopIndex","_columnStopIndex","columnStartIndex","columnStopIndex","rowOverscanStartIndex","_rowStartIndex","rowOverscanStopIndex","_rowStopIndex","rowStartIndex","rowStopIndex","_setScrollingContainerRef","ref","_scrollingContainer","_onScroll","event","target","handleScrollEvent","columnSizeAndPositionManager","cellCount","columnCount","cellSizeGetter","params","_wrapSizeGetter","columnWidth","estimatedCellSize","_getEstimatedColumnSize","rowSizeAndPositionManager","rowCount","rowHeight","_getEstimatedRowSize","state","instanceProps","prevColumnWidth","prevRowHeight","prevColumnCount","prevRowCount","prevIsScrolling","prevScrollToColumn","scrollToColumn","prevScrollToRow","scrollToRow","scrollbarSizeMeasured","scrollDirectionHorizontal","scrollDirectionVertical","scrollLeft","scrollTop","scrollPositionChangeReason","_initialScrollTop","_getCalculatedScrollTop","_initialScrollLeft","_getCalculatedScrollLeft","key","value","getOffsetForCell","_ref","arguments","length","undefined","_ref$alignment","alignment","scrollToAlignment","_ref$columnIndex","columnIndex","_ref$rowIndex","rowIndex","offsetProps","getTotalRowsHeight","getTotalSize","getTotalColumnsWidth","_ref2","_ref2$scrollLeft","scrollLeftParam","_ref2$scrollTop","scrollTopParam","_debounceScrollEnded","_props","autoHeight","autoWidth","height","width","totalRowsHeight","totalColumnsWidth","Math","min","max","_scrollDirectionHorizontal","_scrollDirectionVertical","newState","_invokeOnScrollMemoizer","invalidateCellSizeAfterRender","_ref3","measureAllCells","_props2","getSizeAndPositionOfCell","recomputeGridSize","_ref4","_ref4$columnIndex","_ref4$rowIndex","_props3","resetCell","forceUpdate","scrollToCell","_ref5","_updateScrollLeftForScrollToColumn","_updateScrollTopForScrollToRow","componentDidMount","_props4","getScrollbarSize","_handleInvalidatedGridSize","prevState","stateUpdate","_getScrollToPositionStateUpdate","sizeIsBiggerThanZero","_maybeCallOnScrollbarPresenceChange","componentDidUpdate","prevProps","_this2","_props5","_state","columnOrRowCountJustIncreasedFromZero","sizeJustIncreasedFromZero","cellSizeAndPositionManager","previousCellsCount","previousCellSize","previousScrollToAlignment","previousScrollToIndex","previousSize","scrollOffset","scrollToIndex","size","updateScrollIndexCallback","componentWillUnmount","render","_props6","autoContainerWidth","className","containerProps","containerRole","containerStyle","id","noContentRenderer","role","style","tabIndex","_state2","_isScrolling","gridStyle","boxSizing","direction","position","WebkitOverflowScrolling","willChange","_resetStyleCache","_calculateChildrenToRender","verticalScrollBarSize","horizontalScrollBarSize","overflowX","overflowY","childrenToDisplay","_childrenToDisplay","showNoContentRenderer","createElement","onScroll","maxWidth","maxHeight","overflow","pointerEvents","cellRenderer","cellRangeRenderer","deferredMeasurementCache","overscanColumnCount","overscanIndicesGetter","overscanRowCount","isScrollingOptOut","visibleColumnIndices","getVisibleCellRange","containerSize","offset","visibleRowIndices","horizontalOffsetAdjustment","getOffsetAdjustment","verticalOffsetAdjustment","start","stop","overscanColumnIndices","overscanCellsCount","scrollDirection","startIndex","stopIndex","overscanRowIndices","overscanStartIndex","overscanStopIndex","hasFixedHeight","has","hasFixedWidth","cellCache","parent","styleCache","scrollingResetTimeInterval","_ref6","_this3","_ref7","_props7","clientHeight","clientWidth","scrollHeight","scrollWidth","Object","hasOwnProperty","Boolean","_onScrollbarPresenceChange","onScrollbarPresenceChange","horizontal","vertical","scrollToPosition","_ref8","_getScrollLeftForScrollToColumnStateUpdate","_getScrollTopForScrollToRowStateUpdate","getDerivedStateFromProps","nextProps","configure","maybeStateA","maybeStateB","cellSize","computeMetadataCallback","computeMetadataCallbackProps","nextCellsCount","nextCellSize","nextScrollToIndex","updateScrollOffsetForScrollToIndex","estimatedColumnSize","estimatedRowSize","_ref9","finalColumn","targetIndex","scrollBarSize","getUpdatedOffsetForIndex","align","currentOffset","calculatedScrollLeft","finalRow","calculatedScrollTop","PureComponent","defaultProps","propTypes","process","env","NODE_ENV","PropTypes","string","isRequired","bool","bpfrpt_proptype_CellRenderer","shape","apply","bpfrpt_proptype_CellRangeRenderer","number","bpfrpt_proptype_CellSize","object","func","bpfrpt_proptype_NoContentRenderer","bpfrpt_proptype_OverscanIndicesGetter","bpfrpt_proptype_Alignment","bpfrpt_proptype_CellPosition","bpfrpt_proptype_CellSizeGetter","bpfrpt_proptype_Scroll","bpfrpt_proptype_ScrollbarPresenceChange","bpfrpt_proptype_RenderedSection","bpfrpt_proptype_CellCache","bpfrpt_proptype_StyleCache","bpfrpt_proptype_AnimationTimeoutId"],"mappings":"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","sourcesContent":["import _Object$assign from 'babel-runtime/core-js/object/assign';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport calculateSizeAndPositionDataAndUpdateScrollOffset from './utils/calculateSizeAndPositionDataAndUpdateScrollOffset';\nimport ScalingCellSizeAndPositionManager from './utils/ScalingCellSizeAndPositionManager';\nimport createCallbackMemoizer from '../utils/createCallbackMemoizer';\nimport defaultOverscanIndicesGetter, { SCROLL_DIRECTION_BACKWARD, SCROLL_DIRECTION_FORWARD } from './defaultOverscanIndicesGetter';\nimport updateScrollIndexHelper from './utils/updateScrollIndexHelper';\nimport defaultCellRangeRenderer from './defaultCellRangeRenderer';\nimport scrollbarSize from 'dom-helpers/scrollbarSize';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { requestAnimationTimeout, cancelAnimationTimeout } from '../utils/requestAnimationTimeout';\n\n/**\n * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.\n * This improves performance and makes scrolling smoother.\n */\nexport var DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;\n\n/**\n * Controls whether the Grid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.\n * This prevents Grid from interrupting mouse-wheel animations (see issue #2).\n */\nvar SCROLL_POSITION_CHANGE_REASONS = {\n  OBSERVED: 'observed',\n  REQUESTED: 'requested'\n};\n\nvar renderNull = function renderNull() {\n  return null;\n};\n\n/**\n * Renders tabular data with virtualization along the vertical and horizontal axes.\n * Row heights and column widths must be known ahead of time and specified as properties.\n */\nvar Grid = function (_React$PureComponent) {\n  _inherits(Grid, _React$PureComponent);\n\n  // Invokes onSectionRendered callback only when start/stop row or column indices change\n  function Grid(props) {\n    _classCallCheck(this, Grid);\n\n    var _this = _possibleConstructorReturn(this, (Grid.__proto__ || _Object$getPrototypeOf(Grid)).call(this, props));\n\n    _this._onGridRenderedMemoizer = createCallbackMemoizer();\n    _this._onScrollMemoizer = createCallbackMemoizer(false);\n    _this._deferredInvalidateColumnIndex = null;\n    _this._deferredInvalidateRowIndex = null;\n    _this._recomputeScrollLeftFlag = false;\n    _this._recomputeScrollTopFlag = false;\n    _this._horizontalScrollBarSize = 0;\n    _this._verticalScrollBarSize = 0;\n    _this._scrollbarPresenceChanged = false;\n    _this._renderedColumnStartIndex = 0;\n    _this._renderedColumnStopIndex = 0;\n    _this._renderedRowStartIndex = 0;\n    _this._renderedRowStopIndex = 0;\n    _this._styleCache = {};\n    _this._cellCache = {};\n\n    _this._debounceScrollEndedCallback = function () {\n      _this._disablePointerEventsTimeoutId = null;\n      // isScrolling is used to determine if we reset styleCache\n      _this.setState({\n        isScrolling: false,\n        needToResetStyleCache: false\n      });\n    };\n\n    _this._invokeOnGridRenderedHelper = function () {\n      var onSectionRendered = _this.props.onSectionRendered;\n\n\n      _this._onGridRenderedMemoizer({\n        callback: onSectionRendered,\n        indices: {\n          columnOverscanStartIndex: _this._columnStartIndex,\n          columnOverscanStopIndex: _this._columnStopIndex,\n          columnStartIndex: _this._renderedColumnStartIndex,\n          columnStopIndex: _this._renderedColumnStopIndex,\n          rowOverscanStartIndex: _this._rowStartIndex,\n          rowOverscanStopIndex: _this._rowStopIndex,\n          rowStartIndex: _this._renderedRowStartIndex,\n          rowStopIndex: _this._renderedRowStopIndex\n        }\n      });\n    };\n\n    _this._setScrollingContainerRef = function (ref) {\n      _this._scrollingContainer = ref;\n    };\n\n    _this._onScroll = function (event) {\n      // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.\n      // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.\n      // See issue #404 for more information.\n      if (event.target === _this._scrollingContainer) {\n        _this.handleScrollEvent(event.target);\n      }\n    };\n\n    var columnSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.columnCount,\n      cellSizeGetter: function cellSizeGetter(params) {\n        return Grid._wrapSizeGetter(props.columnWidth)(params);\n      },\n      estimatedCellSize: Grid._getEstimatedColumnSize(props)\n    });\n    var rowSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.rowCount,\n      cellSizeGetter: function cellSizeGetter(params) {\n        return Grid._wrapSizeGetter(props.rowHeight)(params);\n      },\n      estimatedCellSize: Grid._getEstimatedRowSize(props)\n    });\n\n    _this.state = {\n      instanceProps: {\n        columnSizeAndPositionManager: columnSizeAndPositionManager,\n        rowSizeAndPositionManager: rowSizeAndPositionManager,\n\n        prevColumnWidth: props.columnWidth,\n        prevRowHeight: props.rowHeight,\n        prevColumnCount: props.columnCount,\n        prevRowCount: props.rowCount,\n        prevIsScrolling: props.isScrolling === true,\n        prevScrollToColumn: props.scrollToColumn,\n        prevScrollToRow: props.scrollToRow,\n\n        scrollbarSize: 0,\n        scrollbarSizeMeasured: false\n      },\n      isScrolling: false,\n      scrollDirectionHorizontal: SCROLL_DIRECTION_FORWARD,\n      scrollDirectionVertical: SCROLL_DIRECTION_FORWARD,\n      scrollLeft: 0,\n      scrollTop: 0,\n      scrollPositionChangeReason: null,\n\n      needToResetStyleCache: false\n    };\n\n    if (props.scrollToRow > 0) {\n      _this._initialScrollTop = _this._getCalculatedScrollTop(props, _this.state);\n    }\n    if (props.scrollToColumn > 0) {\n      _this._initialScrollLeft = _this._getCalculatedScrollLeft(props, _this.state);\n    }\n    return _this;\n  }\n\n  /**\n   * Gets offsets for a given cell and alignment.\n   */\n\n\n  _createClass(Grid, [{\n    key: 'getOffsetForCell',\n    value: function getOffsetForCell() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$alignment = _ref.alignment,\n          alignment = _ref$alignment === undefined ? this.props.scrollToAlignment : _ref$alignment,\n          _ref$columnIndex = _ref.columnIndex,\n          columnIndex = _ref$columnIndex === undefined ? this.props.scrollToColumn : _ref$columnIndex,\n          _ref$rowIndex = _ref.rowIndex,\n          rowIndex = _ref$rowIndex === undefined ? this.props.scrollToRow : _ref$rowIndex;\n\n      var offsetProps = _extends({}, this.props, {\n        scrollToAlignment: alignment,\n        scrollToColumn: columnIndex,\n        scrollToRow: rowIndex\n      });\n\n      return {\n        scrollLeft: this._getCalculatedScrollLeft(offsetProps),\n        scrollTop: this._getCalculatedScrollTop(offsetProps)\n      };\n    }\n\n    /**\n     * Gets estimated total rows' height.\n     */\n\n  }, {\n    key: 'getTotalRowsHeight',\n    value: function getTotalRowsHeight() {\n      return this.state.instanceProps.rowSizeAndPositionManager.getTotalSize();\n    }\n\n    /**\n     * Gets estimated total columns' width.\n     */\n\n  }, {\n    key: 'getTotalColumnsWidth',\n    value: function getTotalColumnsWidth() {\n      return this.state.instanceProps.columnSizeAndPositionManager.getTotalSize();\n    }\n\n    /**\n     * This method handles a scroll event originating from an external scroll control.\n     * It's an advanced method and should probably not be used unless you're implementing a custom scroll-bar solution.\n     */\n\n  }, {\n    key: 'handleScrollEvent',\n    value: function handleScrollEvent(_ref2) {\n      var _ref2$scrollLeft = _ref2.scrollLeft,\n          scrollLeftParam = _ref2$scrollLeft === undefined ? 0 : _ref2$scrollLeft,\n          _ref2$scrollTop = _ref2.scrollTop,\n          scrollTopParam = _ref2$scrollTop === undefined ? 0 : _ref2$scrollTop;\n\n      // On iOS, we can arrive at negative offsets by swiping past the start.\n      // To prevent flicker here, we make playing in the negative offset zone cause nothing to happen.\n      if (scrollTopParam < 0) {\n        return;\n      }\n\n      // Prevent pointer events from interrupting a smooth scroll\n      this._debounceScrollEnded();\n\n      var _props = this.props,\n          autoHeight = _props.autoHeight,\n          autoWidth = _props.autoWidth,\n          height = _props.height,\n          width = _props.width;\n      var instanceProps = this.state.instanceProps;\n\n      // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,\n      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.\n      // This causes a series of rapid renders that is slow for long lists.\n      // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.\n\n      var scrollbarSize = instanceProps.scrollbarSize;\n      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      var scrollLeft = Math.min(Math.max(0, totalColumnsWidth - width + scrollbarSize), scrollLeftParam);\n      var scrollTop = Math.min(Math.max(0, totalRowsHeight - height + scrollbarSize), scrollTopParam);\n\n      // Certain devices (like Apple touchpad) rapid-fire duplicate events.\n      // Don't force a re-render if this is the case.\n      // The mouse may move faster then the animation frame does.\n      // Use requestAnimationFrame to avoid over-updating.\n      if (this.state.scrollLeft !== scrollLeft || this.state.scrollTop !== scrollTop) {\n        // Track scrolling direction so we can more efficiently overscan rows to reduce empty space around the edges while scrolling.\n        // Don't change direction for an axis unless scroll offset has changed.\n        var _scrollDirectionHorizontal = scrollLeft !== this.state.scrollLeft ? scrollLeft > this.state.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionHorizontal;\n        var _scrollDirectionVertical = scrollTop !== this.state.scrollTop ? scrollTop > this.state.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionVertical;\n\n        var newState = {\n          isScrolling: true,\n          scrollDirectionHorizontal: _scrollDirectionHorizontal,\n          scrollDirectionVertical: _scrollDirectionVertical,\n          scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.OBSERVED\n        };\n\n        if (!autoHeight) {\n          newState.scrollTop = scrollTop;\n        }\n\n        if (!autoWidth) {\n          newState.scrollLeft = scrollLeft;\n        }\n\n        newState.needToResetStyleCache = false;\n        this.setState(newState);\n      }\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop,\n        totalColumnsWidth: totalColumnsWidth,\n        totalRowsHeight: totalRowsHeight\n      });\n    }\n\n    /**\n     * Invalidate Grid size and recompute visible cells.\n     * This is a deferred wrapper for recomputeGridSize().\n     * It sets a flag to be evaluated on cDM/cDU to avoid unnecessary renders.\n     * This method is intended for advanced use-cases like CellMeasurer.\n     */\n    // @TODO (bvaughn) Add automated test coverage for this.\n\n  }, {\n    key: 'invalidateCellSizeAfterRender',\n    value: function invalidateCellSizeAfterRender(_ref3) {\n      var columnIndex = _ref3.columnIndex,\n          rowIndex = _ref3.rowIndex;\n\n      this._deferredInvalidateColumnIndex = typeof this._deferredInvalidateColumnIndex === 'number' ? Math.min(this._deferredInvalidateColumnIndex, columnIndex) : columnIndex;\n      this._deferredInvalidateRowIndex = typeof this._deferredInvalidateRowIndex === 'number' ? Math.min(this._deferredInvalidateRowIndex, rowIndex) : rowIndex;\n    }\n\n    /**\n     * Pre-measure all columns and rows in a Grid.\n     * Typically cells are only measured as needed and estimated sizes are used for cells that have not yet been measured.\n     * This method ensures that the next call to getTotalSize() returns an exact size (as opposed to just an estimated one).\n     */\n\n  }, {\n    key: 'measureAllCells',\n    value: function measureAllCells() {\n      var _props2 = this.props,\n          columnCount = _props2.columnCount,\n          rowCount = _props2.rowCount;\n      var instanceProps = this.state.instanceProps;\n\n      instanceProps.columnSizeAndPositionManager.getSizeAndPositionOfCell(columnCount - 1);\n      instanceProps.rowSizeAndPositionManager.getSizeAndPositionOfCell(rowCount - 1);\n    }\n\n    /**\n     * Forced recompute of row heights and column widths.\n     * This function should be called if dynamic column or row sizes have changed but nothing else has.\n     * Since Grid only receives :columnCount and :rowCount it has no way of detecting when the underlying data changes.\n     */\n\n  }, {\n    key: 'recomputeGridSize',\n    value: function recomputeGridSize() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref4$columnIndex = _ref4.columnIndex,\n          columnIndex = _ref4$columnIndex === undefined ? 0 : _ref4$columnIndex,\n          _ref4$rowIndex = _ref4.rowIndex,\n          rowIndex = _ref4$rowIndex === undefined ? 0 : _ref4$rowIndex;\n\n      var _props3 = this.props,\n          scrollToColumn = _props3.scrollToColumn,\n          scrollToRow = _props3.scrollToRow;\n      var instanceProps = this.state.instanceProps;\n\n\n      instanceProps.columnSizeAndPositionManager.resetCell(columnIndex);\n      instanceProps.rowSizeAndPositionManager.resetCell(rowIndex);\n\n      // Cell sizes may be determined by a function property.\n      // In this case the cDU handler can't know if they changed.\n      // Store this flag to let the next cDU pass know it needs to recompute the scroll offset.\n      this._recomputeScrollLeftFlag = scrollToColumn >= 0 && (this.state.scrollDirectionHorizontal === SCROLL_DIRECTION_FORWARD ? columnIndex <= scrollToColumn : columnIndex >= scrollToColumn);\n      this._recomputeScrollTopFlag = scrollToRow >= 0 && (this.state.scrollDirectionVertical === SCROLL_DIRECTION_FORWARD ? rowIndex <= scrollToRow : rowIndex >= scrollToRow);\n\n      // Clear cell cache in case we are scrolling;\n      // Invalid row heights likely mean invalid cached content as well.\n      this._styleCache = {};\n      this._cellCache = {};\n\n      this.forceUpdate();\n    }\n\n    /**\n     * Ensure column and row are visible.\n     */\n\n  }, {\n    key: 'scrollToCell',\n    value: function scrollToCell(_ref5) {\n      var columnIndex = _ref5.columnIndex,\n          rowIndex = _ref5.rowIndex;\n      var columnCount = this.props.columnCount;\n\n\n      var props = this.props;\n\n      // Don't adjust scroll offset for single-column grids (eg List, Table).\n      // This can cause a funky scroll offset because of the vertical scrollbar width.\n      if (columnCount > 1 && columnIndex !== undefined) {\n        this._updateScrollLeftForScrollToColumn(_extends({}, props, {\n          scrollToColumn: columnIndex\n        }));\n      }\n\n      if (rowIndex !== undefined) {\n        this._updateScrollTopForScrollToRow(_extends({}, props, {\n          scrollToRow: rowIndex\n        }));\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props4 = this.props,\n          getScrollbarSize = _props4.getScrollbarSize,\n          height = _props4.height,\n          scrollLeft = _props4.scrollLeft,\n          scrollToColumn = _props4.scrollToColumn,\n          scrollTop = _props4.scrollTop,\n          scrollToRow = _props4.scrollToRow,\n          width = _props4.width;\n      var instanceProps = this.state.instanceProps;\n\n      // Reset initial offsets to be ignored in browser\n\n      this._initialScrollTop = 0;\n      this._initialScrollLeft = 0;\n\n      // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n      // We must do this at the start of the method as we may calculate and update scroll position below.\n      this._handleInvalidatedGridSize();\n\n      // If this component was first rendered server-side, scrollbar size will be undefined.\n      // In that event we need to remeasure.\n      if (!instanceProps.scrollbarSizeMeasured) {\n        this.setState(function (prevState) {\n          var stateUpdate = _extends({}, prevState, { needToResetStyleCache: false });\n          stateUpdate.instanceProps.scrollbarSize = getScrollbarSize();\n          stateUpdate.instanceProps.scrollbarSizeMeasured = true;\n          return stateUpdate;\n        });\n      }\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0 || typeof scrollTop === 'number' && scrollTop >= 0) {\n        var stateUpdate = Grid._getScrollToPositionStateUpdate({\n          prevState: this.state,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        });\n        if (stateUpdate) {\n          stateUpdate.needToResetStyleCache = false;\n          this.setState(stateUpdate);\n        }\n      }\n\n      // refs don't work in `react-test-renderer`\n      if (this._scrollingContainer) {\n        // setting the ref's scrollLeft and scrollTop.\n        // Somehow in MultiGrid the main grid doesn't trigger a update on mount.\n        if (this._scrollingContainer.scrollLeft !== this.state.scrollLeft) {\n          this._scrollingContainer.scrollLeft = this.state.scrollLeft;\n        }\n        if (this._scrollingContainer.scrollTop !== this.state.scrollTop) {\n          this._scrollingContainer.scrollTop = this.state.scrollTop;\n        }\n      }\n\n      // Don't update scroll offset if the size is 0; we don't render any cells in this case.\n      // Setting a state may cause us to later thing we've updated the offce when we haven't.\n      var sizeIsBiggerThanZero = height > 0 && width > 0;\n      if (scrollToColumn >= 0 && sizeIsBiggerThanZero) {\n        this._updateScrollLeftForScrollToColumn();\n      }\n      if (scrollToRow >= 0 && sizeIsBiggerThanZero) {\n        this._updateScrollTopForScrollToRow();\n      }\n\n      // Update onRowsRendered callback\n      this._invokeOnGridRenderedHelper();\n\n      // Initialize onScroll callback\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft || 0,\n        scrollTop: scrollTop || 0,\n        totalColumnsWidth: instanceProps.columnSizeAndPositionManager.getTotalSize(),\n        totalRowsHeight: instanceProps.rowSizeAndPositionManager.getTotalSize()\n      });\n\n      this._maybeCallOnScrollbarPresenceChange();\n    }\n\n    /**\n     * @private\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) New scroll-to-cell props have been set\n     */\n\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      var _props5 = this.props,\n          autoHeight = _props5.autoHeight,\n          autoWidth = _props5.autoWidth,\n          columnCount = _props5.columnCount,\n          height = _props5.height,\n          rowCount = _props5.rowCount,\n          scrollToAlignment = _props5.scrollToAlignment,\n          scrollToColumn = _props5.scrollToColumn,\n          scrollToRow = _props5.scrollToRow,\n          width = _props5.width;\n      var _state = this.state,\n          scrollLeft = _state.scrollLeft,\n          scrollPositionChangeReason = _state.scrollPositionChangeReason,\n          scrollTop = _state.scrollTop,\n          instanceProps = _state.instanceProps;\n      // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n      // We must do this at the start of the method as we may calculate and update scroll position below.\n\n      this._handleInvalidatedGridSize();\n\n      // Handle edge case where column or row count has only just increased over 0.\n      // In this case we may have to restore a previously-specified scroll offset.\n      // For more info see bvaughn/react-virtualized/issues/218\n      var columnOrRowCountJustIncreasedFromZero = columnCount > 0 && prevProps.columnCount === 0 || rowCount > 0 && prevProps.rowCount === 0;\n\n      // Make sure requested changes to :scrollLeft or :scrollTop get applied.\n      // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,\n      // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).\n      // So we only set these when we require an adjustment of the scroll position.\n      // See issue #2 for more information.\n      if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {\n        // @TRICKY :autoHeight and :autoWidth properties instructs Grid to leave :scrollTop and :scrollLeft management to an external HOC (eg WindowScroller).\n        // In this case we should avoid checking scrollingContainer.scrollTop and scrollingContainer.scrollLeft since it forces layout/flow.\n        if (!autoWidth && scrollLeft >= 0 && (scrollLeft !== this._scrollingContainer.scrollLeft || columnOrRowCountJustIncreasedFromZero)) {\n          this._scrollingContainer.scrollLeft = scrollLeft;\n        }\n        if (!autoHeight && scrollTop >= 0 && (scrollTop !== this._scrollingContainer.scrollTop || columnOrRowCountJustIncreasedFromZero)) {\n          this._scrollingContainer.scrollTop = scrollTop;\n        }\n      }\n\n      // Special case where the previous size was 0:\n      // In this case we don't show any windowed cells at all.\n      // So we should always recalculate offset afterwards.\n      var sizeJustIncreasedFromZero = (prevProps.width === 0 || prevProps.height === 0) && height > 0 && width > 0;\n\n      // Update scroll offsets if the current :scrollToColumn or :scrollToRow values requires it\n      // @TODO Do we also need this check or can the one in componentWillUpdate() suffice?\n      if (this._recomputeScrollLeftFlag) {\n        this._recomputeScrollLeftFlag = false;\n        this._updateScrollLeftForScrollToColumn(this.props);\n      } else {\n        updateScrollIndexHelper({\n          cellSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n          previousCellsCount: prevProps.columnCount,\n          previousCellSize: prevProps.columnWidth,\n          previousScrollToAlignment: prevProps.scrollToAlignment,\n          previousScrollToIndex: prevProps.scrollToColumn,\n          previousSize: prevProps.width,\n          scrollOffset: scrollLeft,\n          scrollToAlignment: scrollToAlignment,\n          scrollToIndex: scrollToColumn,\n          size: width,\n          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,\n          updateScrollIndexCallback: function updateScrollIndexCallback() {\n            return _this2._updateScrollLeftForScrollToColumn(_this2.props);\n          }\n        });\n      }\n\n      if (this._recomputeScrollTopFlag) {\n        this._recomputeScrollTopFlag = false;\n        this._updateScrollTopForScrollToRow(this.props);\n      } else {\n        updateScrollIndexHelper({\n          cellSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n          previousCellsCount: prevProps.rowCount,\n          previousCellSize: prevProps.rowHeight,\n          previousScrollToAlignment: prevProps.scrollToAlignment,\n          previousScrollToIndex: prevProps.scrollToRow,\n          previousSize: prevProps.height,\n          scrollOffset: scrollTop,\n          scrollToAlignment: scrollToAlignment,\n          scrollToIndex: scrollToRow,\n          size: height,\n          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,\n          updateScrollIndexCallback: function updateScrollIndexCallback() {\n            return _this2._updateScrollTopForScrollToRow(_this2.props);\n          }\n        });\n      }\n\n      // Update onRowsRendered callback if start/stop indices have changed\n      this._invokeOnGridRenderedHelper();\n\n      // Changes to :scrollLeft or :scrollTop should also notify :onScroll listeners\n      if (scrollLeft !== prevState.scrollLeft || scrollTop !== prevState.scrollTop) {\n        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n\n        this._invokeOnScrollMemoizer({\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          totalColumnsWidth: totalColumnsWidth,\n          totalRowsHeight: totalRowsHeight\n        });\n      }\n\n      this._maybeCallOnScrollbarPresenceChange();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this._disablePointerEventsTimeoutId) {\n        cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n      }\n    }\n\n    /**\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) Empty content (0 rows or columns)\n     * 2) New scroll props overriding the current state\n     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid\n     */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props6 = this.props,\n          autoContainerWidth = _props6.autoContainerWidth,\n          autoHeight = _props6.autoHeight,\n          autoWidth = _props6.autoWidth,\n          className = _props6.className,\n          containerProps = _props6.containerProps,\n          containerRole = _props6.containerRole,\n          containerStyle = _props6.containerStyle,\n          height = _props6.height,\n          id = _props6.id,\n          noContentRenderer = _props6.noContentRenderer,\n          role = _props6.role,\n          style = _props6.style,\n          tabIndex = _props6.tabIndex,\n          width = _props6.width;\n      var _state2 = this.state,\n          instanceProps = _state2.instanceProps,\n          needToResetStyleCache = _state2.needToResetStyleCache;\n\n\n      var isScrolling = this._isScrolling();\n\n      var gridStyle = {\n        boxSizing: 'border-box',\n        direction: 'ltr',\n        height: autoHeight ? 'auto' : height,\n        position: 'relative',\n        width: autoWidth ? 'auto' : width,\n        WebkitOverflowScrolling: 'touch',\n        willChange: 'transform'\n      };\n\n      if (needToResetStyleCache) {\n        this._styleCache = {};\n      }\n\n      // calculate _styleCache here\n      // if state.isScrolling (not from _isScrolling) then reset\n      if (!this.state.isScrolling) {\n        this._resetStyleCache();\n      }\n\n      // calculate children to render here\n      this._calculateChildrenToRender(this.props, this.state);\n\n      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n\n      // Force browser to hide scrollbars when we know they aren't necessary.\n      // Otherwise once scrollbars appear they may not disappear again.\n      // For more info see issue #116\n      var verticalScrollBarSize = totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n      var horizontalScrollBarSize = totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n\n      if (horizontalScrollBarSize !== this._horizontalScrollBarSize || verticalScrollBarSize !== this._verticalScrollBarSize) {\n        this._horizontalScrollBarSize = horizontalScrollBarSize;\n        this._verticalScrollBarSize = verticalScrollBarSize;\n        this._scrollbarPresenceChanged = true;\n      }\n\n      // Also explicitly init styles to 'auto' if scrollbars are required.\n      // This works around an obscure edge case where external CSS styles have not yet been loaded,\n      // But an initial scroll index of offset is set as an external prop.\n      // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.\n      // This was originally reported via clauderic/react-infinite-calendar/issues/23\n      gridStyle.overflowX = totalColumnsWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';\n      gridStyle.overflowY = totalRowsHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';\n\n      var childrenToDisplay = this._childrenToDisplay;\n\n      var showNoContentRenderer = childrenToDisplay.length === 0 && height > 0 && width > 0;\n\n      return React.createElement(\n        'div',\n        _extends({\n          ref: this._setScrollingContainerRef\n        }, containerProps, {\n          'aria-label': this.props['aria-label'],\n          'aria-readonly': this.props['aria-readonly'],\n          className: clsx('ReactVirtualized__Grid', className),\n          id: id,\n          onScroll: this._onScroll,\n          role: role,\n          style: _extends({}, gridStyle, style),\n          tabIndex: tabIndex }),\n        childrenToDisplay.length > 0 && React.createElement(\n          'div',\n          {\n            className: 'ReactVirtualized__Grid__innerScrollContainer',\n            role: containerRole,\n            style: _extends({\n              width: autoContainerWidth ? 'auto' : totalColumnsWidth,\n              height: totalRowsHeight,\n              maxWidth: totalColumnsWidth,\n              maxHeight: totalRowsHeight,\n              overflow: 'hidden',\n              pointerEvents: isScrolling ? 'none' : '',\n              position: 'relative'\n            }, containerStyle) },\n          childrenToDisplay\n        ),\n        showNoContentRenderer && noContentRenderer()\n      );\n    }\n\n    /* ---------------------------- Helper methods ---------------------------- */\n\n  }, {\n    key: '_calculateChildrenToRender',\n    value: function _calculateChildrenToRender() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      var cellRenderer = props.cellRenderer,\n          cellRangeRenderer = props.cellRangeRenderer,\n          columnCount = props.columnCount,\n          deferredMeasurementCache = props.deferredMeasurementCache,\n          height = props.height,\n          overscanColumnCount = props.overscanColumnCount,\n          overscanIndicesGetter = props.overscanIndicesGetter,\n          overscanRowCount = props.overscanRowCount,\n          rowCount = props.rowCount,\n          width = props.width,\n          isScrollingOptOut = props.isScrollingOptOut;\n      var scrollDirectionHorizontal = state.scrollDirectionHorizontal,\n          scrollDirectionVertical = state.scrollDirectionVertical,\n          instanceProps = state.instanceProps;\n\n\n      var scrollTop = this._initialScrollTop > 0 ? this._initialScrollTop : state.scrollTop;\n      var scrollLeft = this._initialScrollLeft > 0 ? this._initialScrollLeft : state.scrollLeft;\n\n      var isScrolling = this._isScrolling(props, state);\n\n      this._childrenToDisplay = [];\n\n      // Render only enough columns and rows to cover the visible area of the grid.\n      if (height > 0 && width > 0) {\n        var visibleColumnIndices = instanceProps.columnSizeAndPositionManager.getVisibleCellRange({\n          containerSize: width,\n          offset: scrollLeft\n        });\n        var visibleRowIndices = instanceProps.rowSizeAndPositionManager.getVisibleCellRange({\n          containerSize: height,\n          offset: scrollTop\n        });\n\n        var horizontalOffsetAdjustment = instanceProps.columnSizeAndPositionManager.getOffsetAdjustment({\n          containerSize: width,\n          offset: scrollLeft\n        });\n        var verticalOffsetAdjustment = instanceProps.rowSizeAndPositionManager.getOffsetAdjustment({\n          containerSize: height,\n          offset: scrollTop\n        });\n\n        // Store for _invokeOnGridRenderedHelper()\n        this._renderedColumnStartIndex = visibleColumnIndices.start;\n        this._renderedColumnStopIndex = visibleColumnIndices.stop;\n        this._renderedRowStartIndex = visibleRowIndices.start;\n        this._renderedRowStopIndex = visibleRowIndices.stop;\n\n        var overscanColumnIndices = overscanIndicesGetter({\n          direction: 'horizontal',\n          cellCount: columnCount,\n          overscanCellsCount: overscanColumnCount,\n          scrollDirection: scrollDirectionHorizontal,\n          startIndex: typeof visibleColumnIndices.start === 'number' ? visibleColumnIndices.start : 0,\n          stopIndex: typeof visibleColumnIndices.stop === 'number' ? visibleColumnIndices.stop : -1\n        });\n\n        var overscanRowIndices = overscanIndicesGetter({\n          direction: 'vertical',\n          cellCount: rowCount,\n          overscanCellsCount: overscanRowCount,\n          scrollDirection: scrollDirectionVertical,\n          startIndex: typeof visibleRowIndices.start === 'number' ? visibleRowIndices.start : 0,\n          stopIndex: typeof visibleRowIndices.stop === 'number' ? visibleRowIndices.stop : -1\n        });\n\n        // Store for _invokeOnGridRenderedHelper()\n        var columnStartIndex = overscanColumnIndices.overscanStartIndex;\n        var columnStopIndex = overscanColumnIndices.overscanStopIndex;\n        var rowStartIndex = overscanRowIndices.overscanStartIndex;\n        var rowStopIndex = overscanRowIndices.overscanStopIndex;\n\n        // Advanced use-cases (eg CellMeasurer) require batched measurements to determine accurate sizes.\n        if (deferredMeasurementCache) {\n          // If rows have a dynamic height, scan the rows we are about to render.\n          // If any have not yet been measured, then we need to render all columns initially,\n          // Because the height of the row is equal to the tallest cell within that row,\n          // (And so we can't know the height without measuring all column-cells first).\n          if (!deferredMeasurementCache.hasFixedHeight()) {\n            for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\n              if (!deferredMeasurementCache.has(rowIndex, 0)) {\n                columnStartIndex = 0;\n                columnStopIndex = columnCount - 1;\n                break;\n              }\n            }\n          }\n\n          // If columns have a dynamic width, scan the columns we are about to render.\n          // If any have not yet been measured, then we need to render all rows initially,\n          // Because the width of the column is equal to the widest cell within that column,\n          // (And so we can't know the width without measuring all row-cells first).\n          if (!deferredMeasurementCache.hasFixedWidth()) {\n            for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\n              if (!deferredMeasurementCache.has(0, columnIndex)) {\n                rowStartIndex = 0;\n                rowStopIndex = rowCount - 1;\n                break;\n              }\n            }\n          }\n        }\n\n        this._childrenToDisplay = cellRangeRenderer({\n          cellCache: this._cellCache,\n          cellRenderer: cellRenderer,\n          columnSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n          columnStartIndex: columnStartIndex,\n          columnStopIndex: columnStopIndex,\n          deferredMeasurementCache: deferredMeasurementCache,\n          horizontalOffsetAdjustment: horizontalOffsetAdjustment,\n          isScrolling: isScrolling,\n          isScrollingOptOut: isScrollingOptOut,\n          parent: this,\n          rowSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n          rowStartIndex: rowStartIndex,\n          rowStopIndex: rowStopIndex,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          styleCache: this._styleCache,\n          verticalOffsetAdjustment: verticalOffsetAdjustment,\n          visibleColumnIndices: visibleColumnIndices,\n          visibleRowIndices: visibleRowIndices\n        });\n\n        // update the indices\n        this._columnStartIndex = columnStartIndex;\n        this._columnStopIndex = columnStopIndex;\n        this._rowStartIndex = rowStartIndex;\n        this._rowStopIndex = rowStopIndex;\n      }\n    }\n\n    /**\n     * Sets an :isScrolling flag for a small window of time.\n     * This flag is used to disable pointer events on the scrollable portion of the Grid.\n     * This prevents jerky/stuttery mouse-wheel scrolling.\n     */\n\n  }, {\n    key: '_debounceScrollEnded',\n    value: function _debounceScrollEnded() {\n      var scrollingResetTimeInterval = this.props.scrollingResetTimeInterval;\n\n\n      if (this._disablePointerEventsTimeoutId) {\n        cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n      }\n\n      this._disablePointerEventsTimeoutId = requestAnimationTimeout(this._debounceScrollEndedCallback, scrollingResetTimeInterval);\n    }\n  }, {\n    key: '_handleInvalidatedGridSize',\n\n\n    /**\n     * Check for batched CellMeasurer size invalidations.\n     * This will occur the first time one or more previously unmeasured cells are rendered.\n     */\n    value: function _handleInvalidatedGridSize() {\n      if (typeof this._deferredInvalidateColumnIndex === 'number' && typeof this._deferredInvalidateRowIndex === 'number') {\n        var columnIndex = this._deferredInvalidateColumnIndex;\n        var rowIndex = this._deferredInvalidateRowIndex;\n\n        this._deferredInvalidateColumnIndex = null;\n        this._deferredInvalidateRowIndex = null;\n\n        this.recomputeGridSize({ columnIndex: columnIndex, rowIndex: rowIndex });\n      }\n    }\n  }, {\n    key: '_invokeOnScrollMemoizer',\n    value: function _invokeOnScrollMemoizer(_ref6) {\n      var _this3 = this;\n\n      var scrollLeft = _ref6.scrollLeft,\n          scrollTop = _ref6.scrollTop,\n          totalColumnsWidth = _ref6.totalColumnsWidth,\n          totalRowsHeight = _ref6.totalRowsHeight;\n\n      this._onScrollMemoizer({\n        callback: function callback(_ref7) {\n          var scrollLeft = _ref7.scrollLeft,\n              scrollTop = _ref7.scrollTop;\n          var _props7 = _this3.props,\n              height = _props7.height,\n              onScroll = _props7.onScroll,\n              width = _props7.width;\n\n\n          onScroll({\n            clientHeight: height,\n            clientWidth: width,\n            scrollHeight: totalRowsHeight,\n            scrollLeft: scrollLeft,\n            scrollTop: scrollTop,\n            scrollWidth: totalColumnsWidth\n          });\n        },\n        indices: {\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        }\n      });\n    }\n  }, {\n    key: '_isScrolling',\n    value: function _isScrolling() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n\n      // If isScrolling is defined in props, use it to override the value in state\n      // This is a performance optimization for WindowScroller + Grid\n      return Object.hasOwnProperty.call(props, 'isScrolling') ? Boolean(props.isScrolling) : Boolean(state.isScrolling);\n    }\n  }, {\n    key: '_maybeCallOnScrollbarPresenceChange',\n    value: function _maybeCallOnScrollbarPresenceChange() {\n      if (this._scrollbarPresenceChanged) {\n        var _onScrollbarPresenceChange = this.props.onScrollbarPresenceChange;\n\n\n        this._scrollbarPresenceChanged = false;\n\n        _onScrollbarPresenceChange({\n          horizontal: this._horizontalScrollBarSize > 0,\n          size: this.state.instanceProps.scrollbarSize,\n          vertical: this._verticalScrollBarSize > 0\n        });\n      }\n    }\n  }, {\n    key: 'scrollToPosition',\n\n\n    /**\n     * Scroll to the specified offset(s).\n     * Useful for animating position changes.\n     */\n    value: function scrollToPosition(_ref8) {\n      var scrollLeft = _ref8.scrollLeft,\n          scrollTop = _ref8.scrollTop;\n\n      var stateUpdate = Grid._getScrollToPositionStateUpdate({\n        prevState: this.state,\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop\n      });\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }, {\n    key: '_getCalculatedScrollLeft',\n    value: function _getCalculatedScrollLeft() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n\n      return Grid._getCalculatedScrollLeft(props, state);\n    }\n  }, {\n    key: '_updateScrollLeftForScrollToColumn',\n    value: function _updateScrollLeftForScrollToColumn() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n\n      var stateUpdate = Grid._getScrollLeftForScrollToColumnStateUpdate(props, state);\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }, {\n    key: '_getCalculatedScrollTop',\n    value: function _getCalculatedScrollTop() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n\n      return Grid._getCalculatedScrollTop(props, state);\n    }\n  }, {\n    key: '_resetStyleCache',\n    value: function _resetStyleCache() {\n      var styleCache = this._styleCache;\n      var cellCache = this._cellCache;\n      var isScrollingOptOut = this.props.isScrollingOptOut;\n\n      // Reset cell and style caches once scrolling stops.\n      // This makes Grid simpler to use (since cells commonly change).\n      // And it keeps the caches from growing too large.\n      // Performance is most sensitive when a user is scrolling.\n      // Don't clear visible cells from cellCache if isScrollingOptOut is specified.\n      // This keeps the cellCache to a resonable size.\n\n      this._cellCache = {};\n      this._styleCache = {};\n\n      // Copy over the visible cell styles so avoid unnecessary re-render.\n      for (var rowIndex = this._rowStartIndex; rowIndex <= this._rowStopIndex; rowIndex++) {\n        for (var columnIndex = this._columnStartIndex; columnIndex <= this._columnStopIndex; columnIndex++) {\n          var key = rowIndex + '-' + columnIndex;\n          this._styleCache[key] = styleCache[key];\n\n          if (isScrollingOptOut) {\n            this._cellCache[key] = cellCache[key];\n          }\n        }\n      }\n    }\n  }, {\n    key: '_updateScrollTopForScrollToRow',\n    value: function _updateScrollTopForScrollToRow() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n\n      var stateUpdate = Grid._getScrollTopForScrollToRowStateUpdate(props, state);\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var newState = {};\n\n      if (nextProps.columnCount === 0 && prevState.scrollLeft !== 0 || nextProps.rowCount === 0 && prevState.scrollTop !== 0) {\n        newState.scrollLeft = 0;\n        newState.scrollTop = 0;\n\n        // only use scroll{Left,Top} from props if scrollTo{Column,Row} isn't specified\n        // scrollTo{Column,Row} should override scroll{Left,Top}\n      } else if (nextProps.scrollLeft !== prevState.scrollLeft && nextProps.scrollToColumn < 0 || nextProps.scrollTop !== prevState.scrollTop && nextProps.scrollToRow < 0) {\n        _Object$assign(newState, Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: nextProps.scrollLeft,\n          scrollTop: nextProps.scrollTop\n        }));\n      }\n\n      var instanceProps = prevState.instanceProps;\n\n      // Initially we should not clearStyleCache\n\n      newState.needToResetStyleCache = false;\n      if (nextProps.columnWidth !== instanceProps.prevColumnWidth || nextProps.rowHeight !== instanceProps.prevRowHeight) {\n        // Reset cache. set it to {} in render\n        newState.needToResetStyleCache = true;\n      }\n\n      instanceProps.columnSizeAndPositionManager.configure({\n        cellCount: nextProps.columnCount,\n        estimatedCellSize: Grid._getEstimatedColumnSize(nextProps),\n        cellSizeGetter: Grid._wrapSizeGetter(nextProps.columnWidth)\n      });\n\n      instanceProps.rowSizeAndPositionManager.configure({\n        cellCount: nextProps.rowCount,\n        estimatedCellSize: Grid._getEstimatedRowSize(nextProps),\n        cellSizeGetter: Grid._wrapSizeGetter(nextProps.rowHeight)\n      });\n\n      if (instanceProps.prevColumnCount === 0 || instanceProps.prevRowCount === 0) {\n        instanceProps.prevColumnCount = 0;\n        instanceProps.prevRowCount = 0;\n      }\n\n      // If scrolling is controlled outside this component, clear cache when scrolling stops\n      if (nextProps.autoHeight && nextProps.isScrolling === false && instanceProps.prevIsScrolling === true) {\n        _Object$assign(newState, {\n          isScrolling: false\n        });\n      }\n\n      var maybeStateA = void 0;\n      var maybeStateB = void 0;\n\n      calculateSizeAndPositionDataAndUpdateScrollOffset({\n        cellCount: instanceProps.prevColumnCount,\n        cellSize: typeof instanceProps.prevColumnWidth === 'number' ? instanceProps.prevColumnWidth : null,\n        computeMetadataCallback: function computeMetadataCallback() {\n          return instanceProps.columnSizeAndPositionManager.resetCell(0);\n        },\n        computeMetadataCallbackProps: nextProps,\n        nextCellsCount: nextProps.columnCount,\n        nextCellSize: typeof nextProps.columnWidth === 'number' ? nextProps.columnWidth : null,\n        nextScrollToIndex: nextProps.scrollToColumn,\n        scrollToIndex: instanceProps.prevScrollToColumn,\n        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {\n          maybeStateA = Grid._getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState);\n        }\n      });\n      calculateSizeAndPositionDataAndUpdateScrollOffset({\n        cellCount: instanceProps.prevRowCount,\n        cellSize: typeof instanceProps.prevRowHeight === 'number' ? instanceProps.prevRowHeight : null,\n        computeMetadataCallback: function computeMetadataCallback() {\n          return instanceProps.rowSizeAndPositionManager.resetCell(0);\n        },\n        computeMetadataCallbackProps: nextProps,\n        nextCellsCount: nextProps.rowCount,\n        nextCellSize: typeof nextProps.rowHeight === 'number' ? nextProps.rowHeight : null,\n        nextScrollToIndex: nextProps.scrollToRow,\n        scrollToIndex: instanceProps.prevScrollToRow,\n        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {\n          maybeStateB = Grid._getScrollTopForScrollToRowStateUpdate(nextProps, prevState);\n        }\n      });\n\n      instanceProps.prevColumnCount = nextProps.columnCount;\n      instanceProps.prevColumnWidth = nextProps.columnWidth;\n      instanceProps.prevIsScrolling = nextProps.isScrolling === true;\n      instanceProps.prevRowCount = nextProps.rowCount;\n      instanceProps.prevRowHeight = nextProps.rowHeight;\n      instanceProps.prevScrollToColumn = nextProps.scrollToColumn;\n      instanceProps.prevScrollToRow = nextProps.scrollToRow;\n\n      // getting scrollBarSize (moved from componentWillMount)\n      instanceProps.scrollbarSize = nextProps.getScrollbarSize();\n      if (instanceProps.scrollbarSize === undefined) {\n        instanceProps.scrollbarSizeMeasured = false;\n        instanceProps.scrollbarSize = 0;\n      } else {\n        instanceProps.scrollbarSizeMeasured = true;\n      }\n\n      newState.instanceProps = instanceProps;\n\n      return _extends({}, newState, maybeStateA, maybeStateB);\n    }\n  }, {\n    key: '_getEstimatedColumnSize',\n    value: function _getEstimatedColumnSize(props) {\n      return typeof props.columnWidth === 'number' ? props.columnWidth : props.estimatedColumnSize;\n    }\n  }, {\n    key: '_getEstimatedRowSize',\n    value: function _getEstimatedRowSize(props) {\n      return typeof props.rowHeight === 'number' ? props.rowHeight : props.estimatedRowSize;\n    }\n  }, {\n    key: '_getScrollToPositionStateUpdate',\n\n\n    /**\n     * Get the updated state after scrolling to\n     * scrollLeft and scrollTop\n     */\n    value: function _getScrollToPositionStateUpdate(_ref9) {\n      var prevState = _ref9.prevState,\n          scrollLeft = _ref9.scrollLeft,\n          scrollTop = _ref9.scrollTop;\n\n      var newState = {\n        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED\n      };\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0) {\n        newState.scrollDirectionHorizontal = scrollLeft > prevState.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n        newState.scrollLeft = scrollLeft;\n      }\n\n      if (typeof scrollTop === 'number' && scrollTop >= 0) {\n        newState.scrollDirectionVertical = scrollTop > prevState.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n        newState.scrollTop = scrollTop;\n      }\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft || typeof scrollTop === 'number' && scrollTop >= 0 && scrollTop !== prevState.scrollTop) {\n        return newState;\n      }\n      return null;\n    }\n  }, {\n    key: '_wrapSizeGetter',\n    value: function _wrapSizeGetter(value) {\n      return typeof value === 'function' ? value : function () {\n        return value;\n      };\n    }\n  }, {\n    key: '_getCalculatedScrollLeft',\n    value: function _getCalculatedScrollLeft(nextProps, prevState) {\n      var columnCount = nextProps.columnCount,\n          height = nextProps.height,\n          scrollToAlignment = nextProps.scrollToAlignment,\n          scrollToColumn = nextProps.scrollToColumn,\n          width = nextProps.width;\n      var scrollLeft = prevState.scrollLeft,\n          instanceProps = prevState.instanceProps;\n\n\n      if (columnCount > 0) {\n        var finalColumn = columnCount - 1;\n        var targetIndex = scrollToColumn < 0 ? finalColumn : Math.min(finalColumn, scrollToColumn);\n        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n\n        return instanceProps.columnSizeAndPositionManager.getUpdatedOffsetForIndex({\n          align: scrollToAlignment,\n          containerSize: width - scrollBarSize,\n          currentOffset: scrollLeft,\n          targetIndex: targetIndex\n        });\n      }\n      return 0;\n    }\n  }, {\n    key: '_getScrollLeftForScrollToColumnStateUpdate',\n    value: function _getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState) {\n      var scrollLeft = prevState.scrollLeft;\n\n      var calculatedScrollLeft = Grid._getCalculatedScrollLeft(nextProps, prevState);\n\n      if (typeof calculatedScrollLeft === 'number' && calculatedScrollLeft >= 0 && scrollLeft !== calculatedScrollLeft) {\n        return Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: -1\n        });\n      }\n      return null;\n    }\n  }, {\n    key: '_getCalculatedScrollTop',\n    value: function _getCalculatedScrollTop(nextProps, prevState) {\n      var height = nextProps.height,\n          rowCount = nextProps.rowCount,\n          scrollToAlignment = nextProps.scrollToAlignment,\n          scrollToRow = nextProps.scrollToRow,\n          width = nextProps.width;\n      var scrollTop = prevState.scrollTop,\n          instanceProps = prevState.instanceProps;\n\n\n      if (rowCount > 0) {\n        var finalRow = rowCount - 1;\n        var targetIndex = scrollToRow < 0 ? finalRow : Math.min(finalRow, scrollToRow);\n        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n\n        return instanceProps.rowSizeAndPositionManager.getUpdatedOffsetForIndex({\n          align: scrollToAlignment,\n          containerSize: height - scrollBarSize,\n          currentOffset: scrollTop,\n          targetIndex: targetIndex\n        });\n      }\n      return 0;\n    }\n  }, {\n    key: '_getScrollTopForScrollToRowStateUpdate',\n    value: function _getScrollTopForScrollToRowStateUpdate(nextProps, prevState) {\n      var scrollTop = prevState.scrollTop;\n\n      var calculatedScrollTop = Grid._getCalculatedScrollTop(nextProps, prevState);\n\n      if (typeof calculatedScrollTop === 'number' && calculatedScrollTop >= 0 && scrollTop !== calculatedScrollTop) {\n        return Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: -1,\n          scrollTop: calculatedScrollTop\n        });\n      }\n      return null;\n    }\n  }]);\n\n  return Grid;\n}(React.PureComponent);\n\nGrid.defaultProps = {\n  'aria-label': 'grid',\n  'aria-readonly': true,\n  autoContainerWidth: false,\n  autoHeight: false,\n  autoWidth: false,\n  cellRangeRenderer: defaultCellRangeRenderer,\n  containerRole: 'rowgroup',\n  containerStyle: {},\n  estimatedColumnSize: 100,\n  estimatedRowSize: 30,\n  getScrollbarSize: scrollbarSize,\n  noContentRenderer: renderNull,\n  onScroll: function onScroll() {},\n  onScrollbarPresenceChange: function onScrollbarPresenceChange() {},\n  onSectionRendered: function onSectionRendered() {},\n  overscanColumnCount: 0,\n  overscanIndicesGetter: defaultOverscanIndicesGetter,\n  overscanRowCount: 10,\n  role: 'grid',\n  scrollingResetTimeInterval: DEFAULT_SCROLLING_RESET_TIME_INTERVAL,\n  scrollToAlignment: 'auto',\n  scrollToColumn: -1,\n  scrollToRow: -1,\n  style: {},\n  tabIndex: 0,\n  isScrollingOptOut: false\n};\nGrid.propTypes = process.env.NODE_ENV === 'production' ? null : {\n  \"aria-label\": PropTypes.string.isRequired,\n  \"aria-readonly\": PropTypes.bool,\n\n\n  /**\n   * Set the width of the inner scrollable container to 'auto'.\n   * This is useful for single-column Grids to ensure that the column doesn't extend below a vertical scrollbar.\n   */\n  autoContainerWidth: PropTypes.bool.isRequired,\n\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  autoHeight: PropTypes.bool.isRequired,\n\n\n  /**\n   * Removes fixed width from the scrollingContainer so that the total width of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  autoWidth: PropTypes.bool.isRequired,\n\n\n  /** Responsible for rendering a cell given an row and column index.  */\n  cellRenderer: function cellRenderer() {\n    return (typeof bpfrpt_proptype_CellRenderer === 'function' ? bpfrpt_proptype_CellRenderer.isRequired ? bpfrpt_proptype_CellRenderer.isRequired : bpfrpt_proptype_CellRenderer : PropTypes.shape(bpfrpt_proptype_CellRenderer).isRequired).apply(this, arguments);\n  },\n\n\n  /** Responsible for rendering a group of cells given their index ranges.  */\n  cellRangeRenderer: function cellRangeRenderer() {\n    return (typeof bpfrpt_proptype_CellRangeRenderer === 'function' ? bpfrpt_proptype_CellRangeRenderer.isRequired ? bpfrpt_proptype_CellRangeRenderer.isRequired : bpfrpt_proptype_CellRangeRenderer : PropTypes.shape(bpfrpt_proptype_CellRangeRenderer).isRequired).apply(this, arguments);\n  },\n\n\n  /** Optional custom CSS class name to attach to root Grid element.  */\n  className: PropTypes.string,\n\n\n  /** Number of columns in grid.  */\n  columnCount: PropTypes.number.isRequired,\n\n\n  /** Either a fixed column width (number) or a function that returns the width of a column given its index.  */\n  columnWidth: function columnWidth() {\n    return (typeof bpfrpt_proptype_CellSize === 'function' ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : PropTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n\n  /** Unfiltered props for the Grid container. */\n  containerProps: PropTypes.object,\n\n\n  /** ARIA role for the cell-container.  */\n  containerRole: PropTypes.string.isRequired,\n\n\n  /** Optional inline style applied to inner cell-container */\n  containerStyle: PropTypes.object.isRequired,\n\n\n  /**\n   * If CellMeasurer is used to measure this Grid's children, this should be a pointer to its CellMeasurerCache.\n   * A shared CellMeasurerCache reference enables Grid and CellMeasurer to share measurement data.\n   */\n  deferredMeasurementCache: PropTypes.object,\n\n\n  /**\n   * Used to estimate the total width of a Grid before all of its columns have actually been measured.\n   * The estimated total width is adjusted as columns are rendered.\n   */\n  estimatedColumnSize: PropTypes.number.isRequired,\n\n\n  /**\n   * Used to estimate the total height of a Grid before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   */\n  estimatedRowSize: PropTypes.number.isRequired,\n\n\n  /** Exposed for testing purposes only.  */\n  getScrollbarSize: PropTypes.func.isRequired,\n\n\n  /** Height of Grid; this property determines the number of visible (vs virtualized) rows.  */\n  height: PropTypes.number.isRequired,\n\n\n  /** Optional custom id to attach to root Grid element.  */\n  id: PropTypes.string,\n\n\n  /**\n   * Override internal is-scrolling state tracking.\n   * This property is primarily intended for use with the WindowScroller component.\n   */\n  isScrolling: PropTypes.bool,\n\n\n  /**\n   * Opt-out of isScrolling param passed to cellRangeRenderer.\n   * To avoid the extra render when scroll stops.\n   */\n  isScrollingOptOut: PropTypes.bool.isRequired,\n\n\n  /** Optional renderer to be used in place of rows when either :rowCount or :columnCount is 0.  */\n  noContentRenderer: function noContentRenderer() {\n    return (typeof bpfrpt_proptype_NoContentRenderer === 'function' ? bpfrpt_proptype_NoContentRenderer.isRequired ? bpfrpt_proptype_NoContentRenderer.isRequired : bpfrpt_proptype_NoContentRenderer : PropTypes.shape(bpfrpt_proptype_NoContentRenderer).isRequired).apply(this, arguments);\n  },\n\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   */\n  onScroll: PropTypes.func.isRequired,\n\n\n  /**\n   * Called whenever a horizontal or vertical scrollbar is added or removed.\n   * This prop is not intended for end-user use;\n   * It is used by MultiGrid to support fixed-row/fixed-column scroll syncing.\n   */\n  onScrollbarPresenceChange: PropTypes.func.isRequired,\n\n\n  /** Callback invoked with information about the section of the Grid that was just rendered.  */\n  onSectionRendered: PropTypes.func.isRequired,\n\n\n  /**\n   * Number of columns to render before/after the visible section of the grid.\n   * These columns can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  overscanColumnCount: PropTypes.number.isRequired,\n\n\n  /**\n   * Calculates the number of cells to overscan before and after a specified range.\n   * This function ensures that overscanning doesn't exceed the available cells.\n   */\n  overscanIndicesGetter: function overscanIndicesGetter() {\n    return (typeof bpfrpt_proptype_OverscanIndicesGetter === 'function' ? bpfrpt_proptype_OverscanIndicesGetter.isRequired ? bpfrpt_proptype_OverscanIndicesGetter.isRequired : bpfrpt_proptype_OverscanIndicesGetter : PropTypes.shape(bpfrpt_proptype_OverscanIndicesGetter).isRequired).apply(this, arguments);\n  },\n\n\n  /**\n   * Number of rows to render above/below the visible section of the grid.\n   * These rows can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  overscanRowCount: PropTypes.number.isRequired,\n\n\n  /** ARIA role for the grid element.  */\n  role: PropTypes.string.isRequired,\n\n\n  /**\n   * Either a fixed row height (number) or a function that returns the height of a row given its index.\n   * Should implement the following interface: ({ index: number }): number\n   */\n  rowHeight: function rowHeight() {\n    return (typeof bpfrpt_proptype_CellSize === 'function' ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : PropTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n\n  /** Number of rows in grid.  */\n  rowCount: PropTypes.number.isRequired,\n\n\n  /** Wait this amount of time after the last scroll event before resetting Grid `pointer-events`. */\n  scrollingResetTimeInterval: PropTypes.number.isRequired,\n\n\n  /** Horizontal offset. */\n  scrollLeft: PropTypes.number,\n\n\n  /**\n   * Controls scroll-to-cell behavior of the Grid.\n   * The default (\"auto\") scrolls the least amount possible to ensure that the specified cell is fully visible.\n   * Use \"start\" to align cells to the top/left of the Grid and \"end\" to align bottom/right.\n   */\n  scrollToAlignment: function scrollToAlignment() {\n    return (typeof bpfrpt_proptype_Alignment === 'function' ? bpfrpt_proptype_Alignment.isRequired ? bpfrpt_proptype_Alignment.isRequired : bpfrpt_proptype_Alignment : PropTypes.shape(bpfrpt_proptype_Alignment).isRequired).apply(this, arguments);\n  },\n\n\n  /** Column index to ensure visible (by forcefully scrolling if necessary) */\n  scrollToColumn: PropTypes.number.isRequired,\n\n\n  /** Vertical offset. */\n  scrollTop: PropTypes.number,\n\n\n  /** Row index to ensure visible (by forcefully scrolling if necessary) */\n  scrollToRow: PropTypes.number.isRequired,\n\n\n  /** Optional inline style */\n  style: PropTypes.object.isRequired,\n\n\n  /** Tab index for focus */\n  tabIndex: PropTypes.number,\n\n\n  /** Width of Grid; this property determines the number of visible (vs virtualized) columns.  */\n  width: PropTypes.number.isRequired\n};\n\n\npolyfill(Grid);\nexport default Grid;\nimport { bpfrpt_proptype_CellRenderer } from './types';\nimport { bpfrpt_proptype_CellRangeRenderer } from './types';\nimport { bpfrpt_proptype_CellPosition } from './types';\nimport { bpfrpt_proptype_CellSize } from './types';\nimport { bpfrpt_proptype_CellSizeGetter } from './types';\nimport { bpfrpt_proptype_NoContentRenderer } from './types';\nimport { bpfrpt_proptype_Scroll } from './types';\nimport { bpfrpt_proptype_ScrollbarPresenceChange } from './types';\nimport { bpfrpt_proptype_RenderedSection } from './types';\nimport { bpfrpt_proptype_OverscanIndicesGetter } from './types';\nimport { bpfrpt_proptype_Alignment } from './types';\nimport { bpfrpt_proptype_CellCache } from './types';\nimport { bpfrpt_proptype_StyleCache } from './types';\nimport { bpfrpt_proptype_AnimationTimeoutId } from '../utils/requestAnimationTimeout';\nimport PropTypes from 'prop-types';"]},"metadata":{},"sourceType":"module"}