{"ast":null,"code":"/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * This function calculates the initials/acronym for a given name.\n * It defaults to only 2 characters and will take the first character (of each word).\n * If only one word is supplied for the name, it will only pass back the first letter of the word,\n * unless forced to 2 letters by setting `initialsLength` to `2`.\n * It will pass back the characters with the same casing as the original string\n * unless otherwise specified.\n *\n * @param {string} name The full name of the item to turn into initials\n * @param {number} initialsLength (Optional) How many characters to show (max 2 allowed)\n * @param {string} initials (Optional) Custom initials (max 2 characters)\n * @returns {string} True if the color is dark, false otherwise.\n */\nexport var MAX_INITIALS = 2;\nexport function toInitials(name, initialsLength, initials) {\n  // Calculate the number of initials to show, maxing out at MAX_INITIALS\n  var calculatedInitialsLength = initials ? initials.split(' ').length : name.split(' ').length;\n  calculatedInitialsLength = calculatedInitialsLength > MAX_INITIALS ? MAX_INITIALS : calculatedInitialsLength; // Check if initialsLength was passed and set to calculated, unless greater than MAX_INITIALS\n\n  if (initialsLength) {\n    calculatedInitialsLength = initialsLength <= MAX_INITIALS ? initialsLength : MAX_INITIALS;\n  }\n\n  var calculatedInitials; // A. Set to initials prop if exists (but trancate to 2 characters max unless length is supplied)\n\n  if (initials) {\n    calculatedInitials = initials.substring(0, calculatedInitialsLength);\n  } else {\n    if (name.trim() && name.split(' ').length > 1) {\n      // B. If there are any spaces in the name, set to first letter of each word\n      calculatedInitials = name.match(/\\b(\\w)/g);\n      calculatedInitials = calculatedInitials && calculatedInitials.join('').substring(0, calculatedInitialsLength);\n    } else {\n      // C. Set to the name's initials truncated based on calculated length\n      calculatedInitials = name.substring(0, calculatedInitialsLength);\n    }\n  }\n\n  return calculatedInitials;\n}","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/@elastic/eui/es/services/string/to_initials.js"],"names":["MAX_INITIALS","toInitials","name","initialsLength","initials","calculatedInitialsLength","split","length","calculatedInitials","substring","trim","match","join"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;AAaA,OAAO,IAAIA,YAAY,GAAG,CAAnB;AACP,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,cAA1B,EAA0CC,QAA1C,EAAoD;AACzD;AACA,MAAIC,wBAAwB,GAAGD,QAAQ,GAAGA,QAAQ,CAACE,KAAT,CAAe,GAAf,EAAoBC,MAAvB,GAAgCL,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBC,MAAvF;AACAF,EAAAA,wBAAwB,GAAGA,wBAAwB,GAAGL,YAA3B,GAA0CA,YAA1C,GAAyDK,wBAApF,CAHyD,CAGqD;;AAE9G,MAAIF,cAAJ,EAAoB;AAClBE,IAAAA,wBAAwB,GAAGF,cAAc,IAAIH,YAAlB,GAAiCG,cAAjC,GAAkDH,YAA7E;AACD;;AAED,MAAIQ,kBAAJ,CATyD,CASjC;;AAExB,MAAIJ,QAAJ,EAAc;AACZI,IAAAA,kBAAkB,GAAGJ,QAAQ,CAACK,SAAT,CAAmB,CAAnB,EAAsBJ,wBAAtB,CAArB;AACD,GAFD,MAEO;AACL,QAAIH,IAAI,CAACQ,IAAL,MAAeR,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBC,MAAhB,GAAyB,CAA5C,EAA+C;AAC7C;AACAC,MAAAA,kBAAkB,GAAGN,IAAI,CAACS,KAAL,CAAW,SAAX,CAArB;AACAH,MAAAA,kBAAkB,GAAGA,kBAAkB,IAAIA,kBAAkB,CAACI,IAAnB,CAAwB,EAAxB,EAA4BH,SAA5B,CAAsC,CAAtC,EAAyCJ,wBAAzC,CAA3C;AACD,KAJD,MAIO;AACL;AACAG,MAAAA,kBAAkB,GAAGN,IAAI,CAACO,SAAL,CAAe,CAAf,EAAkBJ,wBAAlB,CAArB;AACD;AACF;;AAED,SAAOG,kBAAP;AACD","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * This function calculates the initials/acronym for a given name.\n * It defaults to only 2 characters and will take the first character (of each word).\n * If only one word is supplied for the name, it will only pass back the first letter of the word,\n * unless forced to 2 letters by setting `initialsLength` to `2`.\n * It will pass back the characters with the same casing as the original string\n * unless otherwise specified.\n *\n * @param {string} name The full name of the item to turn into initials\n * @param {number} initialsLength (Optional) How many characters to show (max 2 allowed)\n * @param {string} initials (Optional) Custom initials (max 2 characters)\n * @returns {string} True if the color is dark, false otherwise.\n */\nexport var MAX_INITIALS = 2;\nexport function toInitials(name, initialsLength, initials) {\n  // Calculate the number of initials to show, maxing out at MAX_INITIALS\n  var calculatedInitialsLength = initials ? initials.split(' ').length : name.split(' ').length;\n  calculatedInitialsLength = calculatedInitialsLength > MAX_INITIALS ? MAX_INITIALS : calculatedInitialsLength; // Check if initialsLength was passed and set to calculated, unless greater than MAX_INITIALS\n\n  if (initialsLength) {\n    calculatedInitialsLength = initialsLength <= MAX_INITIALS ? initialsLength : MAX_INITIALS;\n  }\n\n  var calculatedInitials; // A. Set to initials prop if exists (but trancate to 2 characters max unless length is supplied)\n\n  if (initials) {\n    calculatedInitials = initials.substring(0, calculatedInitialsLength);\n  } else {\n    if (name.trim() && name.split(' ').length > 1) {\n      // B. If there are any spaces in the name, set to first letter of each word\n      calculatedInitials = name.match(/\\b(\\w)/g);\n      calculatedInitials = calculatedInitials && calculatedInitials.join('').substring(0, calculatedInitialsLength);\n    } else {\n      // C. Set to the name's initials truncated based on calculated length\n      calculatedInitials = name.substring(0, calculatedInitialsLength);\n    }\n  }\n\n  return calculatedInitials;\n}"]},"metadata":{},"sourceType":"module"}