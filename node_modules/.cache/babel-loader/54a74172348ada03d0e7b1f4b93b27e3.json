{"ast":null,"code":"import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport { findDOMNode } from 'react-dom';\n/**\n * Wraps a cell and measures its rendered content.\n * Measurements are stored in a per-cell cache.\n * Cached-content is not be re-measured.\n */\n\nvar CellMeasurer = function (_React$PureComponent) {\n  _inherits(CellMeasurer, _React$PureComponent);\n\n  function CellMeasurer() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, CellMeasurer);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CellMeasurer.__proto__ || _Object$getPrototypeOf(CellMeasurer)).call.apply(_ref, [this].concat(args))), _this), _this._measure = function () {\n      var _this$props = _this.props,\n          cache = _this$props.cache,\n          _this$props$columnInd = _this$props.columnIndex,\n          columnIndex = _this$props$columnInd === undefined ? 0 : _this$props$columnInd,\n          parent = _this$props.parent,\n          _this$props$rowIndex = _this$props.rowIndex,\n          rowIndex = _this$props$rowIndex === undefined ? _this.props.index || 0 : _this$props$rowIndex;\n\n      var _this$_getCellMeasure = _this._getCellMeasurements(),\n          height = _this$_getCellMeasure.height,\n          width = _this$_getCellMeasure.width;\n\n      if (height !== cache.getHeight(rowIndex, columnIndex) || width !== cache.getWidth(rowIndex, columnIndex)) {\n        cache.set(rowIndex, columnIndex, width, height);\n\n        if (parent && typeof parent.recomputeGridSize === 'function') {\n          parent.recomputeGridSize({\n            columnIndex: columnIndex,\n            rowIndex: rowIndex\n          });\n        }\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(CellMeasurer, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this._maybeMeasureCell();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this._maybeMeasureCell();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var children = this.props.children;\n      return typeof children === 'function' ? children({\n        measure: this._measure\n      }) : children;\n    }\n  }, {\n    key: '_getCellMeasurements',\n    value: function _getCellMeasurements() {\n      var cache = this.props.cache;\n      var node = findDOMNode(this); // TODO Check for a bad combination of fixedWidth and missing numeric width or vice versa with height\n\n      if (node && node.ownerDocument && node.ownerDocument.defaultView && node instanceof node.ownerDocument.defaultView.HTMLElement) {\n        var styleWidth = node.style.width;\n        var styleHeight = node.style.height; // If we are re-measuring a cell that has already been measured,\n        // It will have a hard-coded width/height from the previous measurement.\n        // The fact that we are measuring indicates this measurement is probably stale,\n        // So explicitly clear it out (eg set to \"auto\") so we can recalculate.\n        // See issue #593 for more info.\n        // Even if we are measuring initially- if we're inside of a MultiGrid component,\n        // Explicitly clear width/height before measuring to avoid being tainted by another Grid.\n        // eg top/left Grid renders before bottom/right Grid\n        // Since the CellMeasurerCache is shared between them this taints derived cell size values.\n\n        if (!cache.hasFixedWidth()) {\n          node.style.width = 'auto';\n        }\n\n        if (!cache.hasFixedHeight()) {\n          node.style.height = 'auto';\n        }\n\n        var height = Math.ceil(node.offsetHeight);\n        var width = Math.ceil(node.offsetWidth); // Reset after measuring to avoid breaking styles; see #660\n\n        if (styleWidth) {\n          node.style.width = styleWidth;\n        }\n\n        if (styleHeight) {\n          node.style.height = styleHeight;\n        }\n\n        return {\n          height: height,\n          width: width\n        };\n      } else {\n        return {\n          height: 0,\n          width: 0\n        };\n      }\n    }\n  }, {\n    key: '_maybeMeasureCell',\n    value: function _maybeMeasureCell() {\n      var _props = this.props,\n          cache = _props.cache,\n          _props$columnIndex = _props.columnIndex,\n          columnIndex = _props$columnIndex === undefined ? 0 : _props$columnIndex,\n          parent = _props.parent,\n          _props$rowIndex = _props.rowIndex,\n          rowIndex = _props$rowIndex === undefined ? this.props.index || 0 : _props$rowIndex;\n\n      if (!cache.has(rowIndex, columnIndex)) {\n        var _getCellMeasurements2 = this._getCellMeasurements(),\n            height = _getCellMeasurements2.height,\n            width = _getCellMeasurements2.width;\n\n        cache.set(rowIndex, columnIndex, width, height); // If size has changed, let Grid know to re-render.\n\n        if (parent && typeof parent.invalidateCellSizeAfterRender === 'function') {\n          parent.invalidateCellSizeAfterRender({\n            columnIndex: columnIndex,\n            rowIndex: rowIndex\n          });\n        }\n      }\n    }\n  }]);\n\n  return CellMeasurer;\n}(React.PureComponent); // Used for DEV mode warning check\n\n\nCellMeasurer.__internalCellMeasurerFlag = false;\nCellMeasurer.propTypes = process.env.NODE_ENV === 'production' ? null : {\n  cache: function cache() {\n    return (typeof bpfrpt_proptype_CellMeasureCache === 'function' ? bpfrpt_proptype_CellMeasureCache.isRequired ? bpfrpt_proptype_CellMeasureCache.isRequired : bpfrpt_proptype_CellMeasureCache : PropTypes.shape(bpfrpt_proptype_CellMeasureCache).isRequired).apply(this, arguments);\n  },\n  children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n  columnIndex: PropTypes.number,\n  index: PropTypes.number,\n  parent: PropTypes.shape({\n    invalidateCellSizeAfterRender: PropTypes.func,\n    recomputeGridSize: PropTypes.func\n  }).isRequired,\n  rowIndex: PropTypes.number\n};\nexport default CellMeasurer;\n\nif (process.env.NODE_ENV !== 'production') {\n  CellMeasurer.__internalCellMeasurerFlag = true;\n}\n\nimport { bpfrpt_proptype_CellMeasureCache } from './types';\nimport PropTypes from 'prop-types';","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/react-virtualized/dist/es/CellMeasurer/CellMeasurer.js"],"names":["_Object$getPrototypeOf","_classCallCheck","_createClass","_possibleConstructorReturn","_inherits","React","findDOMNode","CellMeasurer","_React$PureComponent","_ref","_temp","_this","_ret","_len","arguments","length","args","Array","_key","__proto__","call","apply","concat","_measure","_this$props","props","cache","_this$props$columnInd","columnIndex","undefined","parent","_this$props$rowIndex","rowIndex","index","_this$_getCellMeasure","_getCellMeasurements","height","width","getHeight","getWidth","set","recomputeGridSize","key","value","componentDidMount","_maybeMeasureCell","componentDidUpdate","render","children","measure","node","ownerDocument","defaultView","HTMLElement","styleWidth","style","styleHeight","hasFixedWidth","hasFixedHeight","Math","ceil","offsetHeight","offsetWidth","_props","_props$columnIndex","_props$rowIndex","has","_getCellMeasurements2","invalidateCellSizeAfterRender","PureComponent","__internalCellMeasurerFlag","propTypes","process","env","NODE_ENV","bpfrpt_proptype_CellMeasureCache","isRequired","PropTypes","shape","oneOfType","func","number"],"mappings":"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","sourcesContent":["import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport { findDOMNode } from 'react-dom';\n\n/**\n * Wraps a cell and measures its rendered content.\n * Measurements are stored in a per-cell cache.\n * Cached-content is not be re-measured.\n */\nvar CellMeasurer = function (_React$PureComponent) {\n  _inherits(CellMeasurer, _React$PureComponent);\n\n  function CellMeasurer() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, CellMeasurer);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CellMeasurer.__proto__ || _Object$getPrototypeOf(CellMeasurer)).call.apply(_ref, [this].concat(args))), _this), _this._measure = function () {\n      var _this$props = _this.props,\n          cache = _this$props.cache,\n          _this$props$columnInd = _this$props.columnIndex,\n          columnIndex = _this$props$columnInd === undefined ? 0 : _this$props$columnInd,\n          parent = _this$props.parent,\n          _this$props$rowIndex = _this$props.rowIndex,\n          rowIndex = _this$props$rowIndex === undefined ? _this.props.index || 0 : _this$props$rowIndex;\n\n      var _this$_getCellMeasure = _this._getCellMeasurements(),\n          height = _this$_getCellMeasure.height,\n          width = _this$_getCellMeasure.width;\n\n      if (height !== cache.getHeight(rowIndex, columnIndex) || width !== cache.getWidth(rowIndex, columnIndex)) {\n        cache.set(rowIndex, columnIndex, width, height);\n\n        if (parent && typeof parent.recomputeGridSize === 'function') {\n          parent.recomputeGridSize({\n            columnIndex: columnIndex,\n            rowIndex: rowIndex\n          });\n        }\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(CellMeasurer, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this._maybeMeasureCell();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this._maybeMeasureCell();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var children = this.props.children;\n\n\n      return typeof children === 'function' ? children({ measure: this._measure }) : children;\n    }\n  }, {\n    key: '_getCellMeasurements',\n    value: function _getCellMeasurements() {\n      var cache = this.props.cache;\n\n\n      var node = findDOMNode(this);\n\n      // TODO Check for a bad combination of fixedWidth and missing numeric width or vice versa with height\n\n      if (node && node.ownerDocument && node.ownerDocument.defaultView && node instanceof node.ownerDocument.defaultView.HTMLElement) {\n        var styleWidth = node.style.width;\n        var styleHeight = node.style.height;\n\n        // If we are re-measuring a cell that has already been measured,\n        // It will have a hard-coded width/height from the previous measurement.\n        // The fact that we are measuring indicates this measurement is probably stale,\n        // So explicitly clear it out (eg set to \"auto\") so we can recalculate.\n        // See issue #593 for more info.\n        // Even if we are measuring initially- if we're inside of a MultiGrid component,\n        // Explicitly clear width/height before measuring to avoid being tainted by another Grid.\n        // eg top/left Grid renders before bottom/right Grid\n        // Since the CellMeasurerCache is shared between them this taints derived cell size values.\n        if (!cache.hasFixedWidth()) {\n          node.style.width = 'auto';\n        }\n        if (!cache.hasFixedHeight()) {\n          node.style.height = 'auto';\n        }\n\n        var height = Math.ceil(node.offsetHeight);\n        var width = Math.ceil(node.offsetWidth);\n\n        // Reset after measuring to avoid breaking styles; see #660\n        if (styleWidth) {\n          node.style.width = styleWidth;\n        }\n        if (styleHeight) {\n          node.style.height = styleHeight;\n        }\n\n        return { height: height, width: width };\n      } else {\n        return { height: 0, width: 0 };\n      }\n    }\n  }, {\n    key: '_maybeMeasureCell',\n    value: function _maybeMeasureCell() {\n      var _props = this.props,\n          cache = _props.cache,\n          _props$columnIndex = _props.columnIndex,\n          columnIndex = _props$columnIndex === undefined ? 0 : _props$columnIndex,\n          parent = _props.parent,\n          _props$rowIndex = _props.rowIndex,\n          rowIndex = _props$rowIndex === undefined ? this.props.index || 0 : _props$rowIndex;\n\n\n      if (!cache.has(rowIndex, columnIndex)) {\n        var _getCellMeasurements2 = this._getCellMeasurements(),\n            height = _getCellMeasurements2.height,\n            width = _getCellMeasurements2.width;\n\n        cache.set(rowIndex, columnIndex, width, height);\n\n        // If size has changed, let Grid know to re-render.\n        if (parent && typeof parent.invalidateCellSizeAfterRender === 'function') {\n          parent.invalidateCellSizeAfterRender({\n            columnIndex: columnIndex,\n            rowIndex: rowIndex\n          });\n        }\n      }\n    }\n  }]);\n\n  return CellMeasurer;\n}(React.PureComponent);\n\n// Used for DEV mode warning check\n\n\nCellMeasurer.__internalCellMeasurerFlag = false;\nCellMeasurer.propTypes = process.env.NODE_ENV === 'production' ? null : {\n  cache: function cache() {\n    return (typeof bpfrpt_proptype_CellMeasureCache === 'function' ? bpfrpt_proptype_CellMeasureCache.isRequired ? bpfrpt_proptype_CellMeasureCache.isRequired : bpfrpt_proptype_CellMeasureCache : PropTypes.shape(bpfrpt_proptype_CellMeasureCache).isRequired).apply(this, arguments);\n  },\n  children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n  columnIndex: PropTypes.number,\n  index: PropTypes.number,\n  parent: PropTypes.shape({\n    invalidateCellSizeAfterRender: PropTypes.func,\n    recomputeGridSize: PropTypes.func\n  }).isRequired,\n  rowIndex: PropTypes.number\n};\nexport default CellMeasurer;\nif (process.env.NODE_ENV !== 'production') {\n  CellMeasurer.__internalCellMeasurerFlag = true;\n}\nimport { bpfrpt_proptype_CellMeasureCache } from './types';\nimport PropTypes from 'prop-types';"]},"metadata":{},"sourceType":"module"}