{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport clsx from 'clsx';\nimport * as React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport PositionCache from './PositionCache';\nimport { requestAnimationTimeout, cancelAnimationTimeout } from '../utils/requestAnimationTimeout';\nvar emptyObject = {};\n/**\n * Specifies the number of miliseconds during which to disable pointer events while a scroll is in progress.\n * This improves performance and makes scrolling smoother.\n */\n\nexport var DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;\n/**\n * This component efficiently displays arbitrarily positioned cells using windowing techniques.\n * Cell position is determined by an injected `cellPositioner` property.\n * Windowing is vertical; this component does not support horizontal scrolling.\n *\n * Rendering occurs in two phases:\n * 1) First pass uses estimated cell sizes (provided by the cache) to determine how many cells to measure in a batch.\n *    Batch size is chosen using a fast, naive layout algorithm that stacks images in order until the viewport has been filled.\n *    After measurement is complete (componentDidMount or componentDidUpdate) this component evaluates positioned cells\n *    in order to determine if another measurement pass is required (eg if actual cell sizes were less than estimated sizes).\n *    All measurements are permanently cached (keyed by `keyMapper`) for performance purposes.\n * 2) Second pass uses the external `cellPositioner` to layout cells.\n *    At this time the positioner has access to cached size measurements for all cells.\n *    The positions it returns are cached by Masonry for fast access later.\n *    Phase one is repeated if the user scrolls beyond the current layout's bounds.\n *    If the layout is invalidated due to eg a resize, cached positions can be cleared using `recomputeCellPositions()`.\n *\n * Animation constraints:\n *   Simple animations are supported (eg translate/slide into place on initial reveal).\n *   More complex animations are not (eg flying from one position to another on resize).\n *\n * Layout constraints:\n *   This component supports multi-column layout.\n *   The height of each item may vary.\n *   The width of each item must not exceed the width of the column it is \"in\".\n *   The left position of all items within a column must align.\n *   (Items may not span multiple columns.)\n */\n\nvar Masonry = function (_React$PureComponent) {\n  _inherits(Masonry, _React$PureComponent);\n\n  function Masonry() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Masonry);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Masonry.__proto__ || _Object$getPrototypeOf(Masonry)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      isScrolling: false,\n      scrollTop: 0\n    }, _this._invalidateOnUpdateStartIndex = null, _this._invalidateOnUpdateStopIndex = null, _this._positionCache = new PositionCache(), _this._startIndex = null, _this._startIndexMemoized = null, _this._stopIndex = null, _this._stopIndexMemoized = null, _this._debounceResetIsScrollingCallback = function () {\n      _this.setState({\n        isScrolling: false\n      });\n    }, _this._setScrollingContainerRef = function (ref) {\n      _this._scrollingContainer = ref;\n    }, _this._onScroll = function (event) {\n      var height = _this.props.height;\n      var eventScrollTop = event.currentTarget.scrollTop; // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,\n      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.\n      // This causes a series of rapid renders that is slow for long lists.\n      // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.\n\n      var scrollTop = Math.min(Math.max(0, _this._getEstimatedTotalHeight() - height), eventScrollTop); // On iOS, we can arrive at negative offsets by swiping past the start or end.\n      // Avoid re-rendering in this case as it can cause problems; see #532 for more.\n\n      if (eventScrollTop !== scrollTop) {\n        return;\n      } // Prevent pointer events from interrupting a smooth scroll\n\n\n      _this._debounceResetIsScrolling(); // Certain devices (like Apple touchpad) rapid-fire duplicate events.\n      // Don't force a re-render if this is the case.\n      // The mouse may move faster then the animation frame does.\n      // Use requestAnimationFrame to avoid over-updating.\n\n\n      if (_this.state.scrollTop !== scrollTop) {\n        _this.setState({\n          isScrolling: true,\n          scrollTop: scrollTop\n        });\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Masonry, [{\n    key: 'clearCellPositions',\n    value: function clearCellPositions() {\n      this._positionCache = new PositionCache();\n      this.forceUpdate();\n    } // HACK This method signature was intended for Grid\n\n  }, {\n    key: 'invalidateCellSizeAfterRender',\n    value: function invalidateCellSizeAfterRender(_ref2) {\n      var index = _ref2.rowIndex;\n\n      if (this._invalidateOnUpdateStartIndex === null) {\n        this._invalidateOnUpdateStartIndex = index;\n        this._invalidateOnUpdateStopIndex = index;\n      } else {\n        this._invalidateOnUpdateStartIndex = Math.min(this._invalidateOnUpdateStartIndex, index);\n        this._invalidateOnUpdateStopIndex = Math.max(this._invalidateOnUpdateStopIndex, index);\n      }\n    }\n  }, {\n    key: 'recomputeCellPositions',\n    value: function recomputeCellPositions() {\n      var stopIndex = this._positionCache.count - 1;\n      this._positionCache = new PositionCache();\n\n      this._populatePositionCache(0, stopIndex);\n\n      this.forceUpdate();\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this._checkInvalidateOnUpdate();\n\n      this._invokeOnScrollCallback();\n\n      this._invokeOnCellsRenderedCallback();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      this._checkInvalidateOnUpdate();\n\n      this._invokeOnScrollCallback();\n\n      this._invokeOnCellsRenderedCallback();\n\n      if (this.props.scrollTop !== prevProps.scrollTop) {\n        this._debounceResetIsScrolling();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this._debounceResetIsScrollingId) {\n        cancelAnimationTimeout(this._debounceResetIsScrollingId);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          autoHeight = _props.autoHeight,\n          cellCount = _props.cellCount,\n          cellMeasurerCache = _props.cellMeasurerCache,\n          cellRenderer = _props.cellRenderer,\n          className = _props.className,\n          height = _props.height,\n          id = _props.id,\n          keyMapper = _props.keyMapper,\n          overscanByPixels = _props.overscanByPixels,\n          role = _props.role,\n          style = _props.style,\n          tabIndex = _props.tabIndex,\n          width = _props.width,\n          rowDirection = _props.rowDirection;\n      var _state = this.state,\n          isScrolling = _state.isScrolling,\n          scrollTop = _state.scrollTop;\n      var children = [];\n\n      var estimateTotalHeight = this._getEstimatedTotalHeight();\n\n      var shortestColumnSize = this._positionCache.shortestColumnSize;\n      var measuredCellCount = this._positionCache.count;\n      var startIndex = 0;\n      var stopIndex = void 0;\n\n      this._positionCache.range(Math.max(0, scrollTop - overscanByPixels), height + overscanByPixels * 2, function (index, left, top) {\n        var _style;\n\n        if (typeof stopIndex === 'undefined') {\n          startIndex = index;\n          stopIndex = index;\n        } else {\n          startIndex = Math.min(startIndex, index);\n          stopIndex = Math.max(stopIndex, index);\n        }\n\n        children.push(cellRenderer({\n          index: index,\n          isScrolling: isScrolling,\n          key: keyMapper(index),\n          parent: _this2,\n          style: (_style = {\n            height: cellMeasurerCache.getHeight(index)\n          }, _defineProperty(_style, rowDirection === 'ltr' ? 'left' : 'right', left), _defineProperty(_style, 'position', 'absolute'), _defineProperty(_style, 'top', top), _defineProperty(_style, 'width', cellMeasurerCache.getWidth(index)), _style)\n        }));\n      }); // We need to measure additional cells for this layout\n\n\n      if (shortestColumnSize < scrollTop + height + overscanByPixels && measuredCellCount < cellCount) {\n        var batchSize = Math.min(cellCount - measuredCellCount, Math.ceil((scrollTop + height + overscanByPixels - shortestColumnSize) / cellMeasurerCache.defaultHeight * width / cellMeasurerCache.defaultWidth));\n\n        for (var _index = measuredCellCount; _index < measuredCellCount + batchSize; _index++) {\n          stopIndex = _index;\n          children.push(cellRenderer({\n            index: _index,\n            isScrolling: isScrolling,\n            key: keyMapper(_index),\n            parent: this,\n            style: {\n              width: cellMeasurerCache.getWidth(_index)\n            }\n          }));\n        }\n      }\n\n      this._startIndex = startIndex;\n      this._stopIndex = stopIndex;\n      return React.createElement('div', {\n        ref: this._setScrollingContainerRef,\n        'aria-label': this.props['aria-label'],\n        className: clsx('ReactVirtualized__Masonry', className),\n        id: id,\n        onScroll: this._onScroll,\n        role: role,\n        style: _extends({\n          boxSizing: 'border-box',\n          direction: 'ltr',\n          height: autoHeight ? 'auto' : height,\n          overflowX: 'hidden',\n          overflowY: estimateTotalHeight < height ? 'hidden' : 'auto',\n          position: 'relative',\n          width: width,\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform'\n        }, style),\n        tabIndex: tabIndex\n      }, React.createElement('div', {\n        className: 'ReactVirtualized__Masonry__innerScrollContainer',\n        style: {\n          width: '100%',\n          height: estimateTotalHeight,\n          maxWidth: '100%',\n          maxHeight: estimateTotalHeight,\n          overflow: 'hidden',\n          pointerEvents: isScrolling ? 'none' : '',\n          position: 'relative'\n        }\n      }, children));\n    }\n  }, {\n    key: '_checkInvalidateOnUpdate',\n    value: function _checkInvalidateOnUpdate() {\n      if (typeof this._invalidateOnUpdateStartIndex === 'number') {\n        var _startIndex = this._invalidateOnUpdateStartIndex;\n        var _stopIndex = this._invalidateOnUpdateStopIndex;\n        this._invalidateOnUpdateStartIndex = null;\n        this._invalidateOnUpdateStopIndex = null; // Query external layout logic for position of newly-measured cells\n\n        this._populatePositionCache(_startIndex, _stopIndex);\n\n        this.forceUpdate();\n      }\n    }\n  }, {\n    key: '_debounceResetIsScrolling',\n    value: function _debounceResetIsScrolling() {\n      var scrollingResetTimeInterval = this.props.scrollingResetTimeInterval;\n\n      if (this._debounceResetIsScrollingId) {\n        cancelAnimationTimeout(this._debounceResetIsScrollingId);\n      }\n\n      this._debounceResetIsScrollingId = requestAnimationTimeout(this._debounceResetIsScrollingCallback, scrollingResetTimeInterval);\n    }\n  }, {\n    key: '_getEstimatedTotalHeight',\n    value: function _getEstimatedTotalHeight() {\n      var _props2 = this.props,\n          cellCount = _props2.cellCount,\n          cellMeasurerCache = _props2.cellMeasurerCache,\n          width = _props2.width;\n      var estimatedColumnCount = Math.max(1, Math.floor(width / cellMeasurerCache.defaultWidth));\n      return this._positionCache.estimateTotalHeight(cellCount, estimatedColumnCount, cellMeasurerCache.defaultHeight);\n    }\n  }, {\n    key: '_invokeOnScrollCallback',\n    value: function _invokeOnScrollCallback() {\n      var _props3 = this.props,\n          height = _props3.height,\n          onScroll = _props3.onScroll;\n      var scrollTop = this.state.scrollTop;\n\n      if (this._onScrollMemoized !== scrollTop) {\n        onScroll({\n          clientHeight: height,\n          scrollHeight: this._getEstimatedTotalHeight(),\n          scrollTop: scrollTop\n        });\n        this._onScrollMemoized = scrollTop;\n      }\n    }\n  }, {\n    key: '_invokeOnCellsRenderedCallback',\n    value: function _invokeOnCellsRenderedCallback() {\n      if (this._startIndexMemoized !== this._startIndex || this._stopIndexMemoized !== this._stopIndex) {\n        var _onCellsRendered = this.props.onCellsRendered;\n\n        _onCellsRendered({\n          startIndex: this._startIndex,\n          stopIndex: this._stopIndex\n        });\n\n        this._startIndexMemoized = this._startIndex;\n        this._stopIndexMemoized = this._stopIndex;\n      }\n    }\n  }, {\n    key: '_populatePositionCache',\n    value: function _populatePositionCache(startIndex, stopIndex) {\n      var _props4 = this.props,\n          cellMeasurerCache = _props4.cellMeasurerCache,\n          cellPositioner = _props4.cellPositioner;\n\n      for (var _index2 = startIndex; _index2 <= stopIndex; _index2++) {\n        var _cellPositioner = cellPositioner(_index2),\n            _left = _cellPositioner.left,\n            _top = _cellPositioner.top;\n\n        this._positionCache.setPosition(_index2, _left, _top, cellMeasurerCache.getHeight(_index2));\n      }\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.scrollTop !== undefined && prevState.scrollTop !== nextProps.scrollTop) {\n        return {\n          isScrolling: true,\n          scrollTop: nextProps.scrollTop\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Masonry;\n}(React.PureComponent);\n\nMasonry.defaultProps = {\n  autoHeight: false,\n  keyMapper: identity,\n  onCellsRendered: noop,\n  onScroll: noop,\n  overscanByPixels: 20,\n  role: 'grid',\n  scrollingResetTimeInterval: DEFAULT_SCROLLING_RESET_TIME_INTERVAL,\n  style: emptyObject,\n  tabIndex: 0,\n  rowDirection: 'ltr'\n};\nMasonry.propTypes = process.env.NODE_ENV === 'production' ? null : {\n  autoHeight: PropTypes.bool.isRequired,\n  cellCount: PropTypes.number.isRequired,\n  cellMeasurerCache: function cellMeasurerCache() {\n    return (typeof CellMeasurerCache === 'function' ? PropTypes.instanceOf(CellMeasurerCache).isRequired : PropTypes.any.isRequired).apply(this, arguments);\n  },\n  cellPositioner: function cellPositioner() {\n    return (typeof Positioner === 'function' ? PropTypes.instanceOf(Positioner).isRequired : PropTypes.any.isRequired).apply(this, arguments);\n  },\n  cellRenderer: function cellRenderer() {\n    return (typeof CellRenderer === 'function' ? PropTypes.instanceOf(CellRenderer).isRequired : PropTypes.any.isRequired).apply(this, arguments);\n  },\n  className: PropTypes.string,\n  height: PropTypes.number.isRequired,\n  id: PropTypes.string,\n  keyMapper: function keyMapper() {\n    return (typeof KeyMapper === 'function' ? PropTypes.instanceOf(KeyMapper).isRequired : PropTypes.any.isRequired).apply(this, arguments);\n  },\n  onCellsRendered: function onCellsRendered() {\n    return (typeof OnCellsRenderedCallback === 'function' ? PropTypes.instanceOf(OnCellsRenderedCallback) : PropTypes.any).apply(this, arguments);\n  },\n  onScroll: function onScroll() {\n    return (typeof OnScrollCallback === 'function' ? PropTypes.instanceOf(OnScrollCallback) : PropTypes.any).apply(this, arguments);\n  },\n  overscanByPixels: PropTypes.number.isRequired,\n  role: PropTypes.string.isRequired,\n  scrollingResetTimeInterval: PropTypes.number.isRequired,\n  style: function style(props, propName, componentName) {\n    if (!Object.prototype.hasOwnProperty.call(props, propName)) {\n      throw new Error('Prop `' + propName + '` has type \\'any\\' or \\'mixed\\', but was not provided to `' + componentName + '`. Pass undefined or any other value.');\n    }\n  },\n  tabIndex: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  rowDirection: PropTypes.string.isRequired\n};\n\nfunction identity(value) {\n  return value;\n}\n\nfunction noop() {}\n\nvar bpfrpt_proptype_CellMeasurerCache = process.env.NODE_ENV === 'production' ? null : {\n  defaultHeight: PropTypes.number.isRequired,\n  defaultWidth: PropTypes.number.isRequired,\n  getHeight: PropTypes.func.isRequired,\n  getWidth: PropTypes.func.isRequired\n};\npolyfill(Masonry);\nexport default Masonry;\nvar bpfrpt_proptype_Positioner = process.env.NODE_ENV === 'production' ? null : PropTypes.func;\nimport { bpfrpt_proptype_AnimationTimeoutId } from '../utils/requestAnimationTimeout';\nimport PropTypes from 'prop-types';\nexport { bpfrpt_proptype_CellMeasurerCache };\nexport { bpfrpt_proptype_Positioner };","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/react-virtualized/dist/es/Masonry/Masonry.js"],"names":["_extends","_defineProperty","_Object$getPrototypeOf","_classCallCheck","_createClass","_possibleConstructorReturn","_inherits","clsx","React","polyfill","PositionCache","requestAnimationTimeout","cancelAnimationTimeout","emptyObject","DEFAULT_SCROLLING_RESET_TIME_INTERVAL","Masonry","_React$PureComponent","_ref","_temp","_this","_ret","_len","arguments","length","args","Array","_key","__proto__","call","apply","concat","state","isScrolling","scrollTop","_invalidateOnUpdateStartIndex","_invalidateOnUpdateStopIndex","_positionCache","_startIndex","_startIndexMemoized","_stopIndex","_stopIndexMemoized","_debounceResetIsScrollingCallback","setState","_setScrollingContainerRef","ref","_scrollingContainer","_onScroll","event","height","props","eventScrollTop","currentTarget","Math","min","max","_getEstimatedTotalHeight","_debounceResetIsScrolling","key","value","clearCellPositions","forceUpdate","invalidateCellSizeAfterRender","_ref2","index","rowIndex","recomputeCellPositions","stopIndex","count","_populatePositionCache","componentDidMount","_checkInvalidateOnUpdate","_invokeOnScrollCallback","_invokeOnCellsRenderedCallback","componentDidUpdate","prevProps","prevState","componentWillUnmount","_debounceResetIsScrollingId","render","_this2","_props","autoHeight","cellCount","cellMeasurerCache","cellRenderer","className","id","keyMapper","overscanByPixels","role","style","tabIndex","width","rowDirection","_state","children","estimateTotalHeight","shortestColumnSize","measuredCellCount","startIndex","range","left","top","_style","push","parent","getHeight","getWidth","batchSize","ceil","defaultHeight","defaultWidth","_index","createElement","onScroll","boxSizing","direction","overflowX","overflowY","position","WebkitOverflowScrolling","willChange","maxWidth","maxHeight","overflow","pointerEvents","scrollingResetTimeInterval","_props2","estimatedColumnCount","floor","_props3","_onScrollMemoized","clientHeight","scrollHeight","_onCellsRendered","onCellsRendered","_props4","cellPositioner","_index2","_cellPositioner","_left","_top","setPosition","getDerivedStateFromProps","nextProps","undefined","PureComponent","defaultProps","identity","noop","propTypes","process","env","NODE_ENV","PropTypes","bool","isRequired","number","CellMeasurerCache","instanceOf","any","Positioner","CellRenderer","string","KeyMapper","OnCellsRenderedCallback","OnScrollCallback","propName","componentName","Object","prototype","hasOwnProperty","Error","bpfrpt_proptype_CellMeasurerCache","func","bpfrpt_proptype_Positioner","bpfrpt_proptype_AnimationTimeoutId"],"mappings":"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","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport clsx from 'clsx';\nimport * as React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport PositionCache from './PositionCache';\nimport { requestAnimationTimeout, cancelAnimationTimeout } from '../utils/requestAnimationTimeout';\n\nvar emptyObject = {};\n\n/**\n * Specifies the number of miliseconds during which to disable pointer events while a scroll is in progress.\n * This improves performance and makes scrolling smoother.\n */\nexport var DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;\n\n/**\n * This component efficiently displays arbitrarily positioned cells using windowing techniques.\n * Cell position is determined by an injected `cellPositioner` property.\n * Windowing is vertical; this component does not support horizontal scrolling.\n *\n * Rendering occurs in two phases:\n * 1) First pass uses estimated cell sizes (provided by the cache) to determine how many cells to measure in a batch.\n *    Batch size is chosen using a fast, naive layout algorithm that stacks images in order until the viewport has been filled.\n *    After measurement is complete (componentDidMount or componentDidUpdate) this component evaluates positioned cells\n *    in order to determine if another measurement pass is required (eg if actual cell sizes were less than estimated sizes).\n *    All measurements are permanently cached (keyed by `keyMapper`) for performance purposes.\n * 2) Second pass uses the external `cellPositioner` to layout cells.\n *    At this time the positioner has access to cached size measurements for all cells.\n *    The positions it returns are cached by Masonry for fast access later.\n *    Phase one is repeated if the user scrolls beyond the current layout's bounds.\n *    If the layout is invalidated due to eg a resize, cached positions can be cleared using `recomputeCellPositions()`.\n *\n * Animation constraints:\n *   Simple animations are supported (eg translate/slide into place on initial reveal).\n *   More complex animations are not (eg flying from one position to another on resize).\n *\n * Layout constraints:\n *   This component supports multi-column layout.\n *   The height of each item may vary.\n *   The width of each item must not exceed the width of the column it is \"in\".\n *   The left position of all items within a column must align.\n *   (Items may not span multiple columns.)\n */\n\nvar Masonry = function (_React$PureComponent) {\n  _inherits(Masonry, _React$PureComponent);\n\n  function Masonry() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Masonry);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Masonry.__proto__ || _Object$getPrototypeOf(Masonry)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      isScrolling: false,\n      scrollTop: 0\n    }, _this._invalidateOnUpdateStartIndex = null, _this._invalidateOnUpdateStopIndex = null, _this._positionCache = new PositionCache(), _this._startIndex = null, _this._startIndexMemoized = null, _this._stopIndex = null, _this._stopIndexMemoized = null, _this._debounceResetIsScrollingCallback = function () {\n      _this.setState({\n        isScrolling: false\n      });\n    }, _this._setScrollingContainerRef = function (ref) {\n      _this._scrollingContainer = ref;\n    }, _this._onScroll = function (event) {\n      var height = _this.props.height;\n\n\n      var eventScrollTop = event.currentTarget.scrollTop;\n\n      // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,\n      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.\n      // This causes a series of rapid renders that is slow for long lists.\n      // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.\n      var scrollTop = Math.min(Math.max(0, _this._getEstimatedTotalHeight() - height), eventScrollTop);\n\n      // On iOS, we can arrive at negative offsets by swiping past the start or end.\n      // Avoid re-rendering in this case as it can cause problems; see #532 for more.\n      if (eventScrollTop !== scrollTop) {\n        return;\n      }\n\n      // Prevent pointer events from interrupting a smooth scroll\n      _this._debounceResetIsScrolling();\n\n      // Certain devices (like Apple touchpad) rapid-fire duplicate events.\n      // Don't force a re-render if this is the case.\n      // The mouse may move faster then the animation frame does.\n      // Use requestAnimationFrame to avoid over-updating.\n      if (_this.state.scrollTop !== scrollTop) {\n        _this.setState({\n          isScrolling: true,\n          scrollTop: scrollTop\n        });\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Masonry, [{\n    key: 'clearCellPositions',\n    value: function clearCellPositions() {\n      this._positionCache = new PositionCache();\n      this.forceUpdate();\n    }\n\n    // HACK This method signature was intended for Grid\n\n  }, {\n    key: 'invalidateCellSizeAfterRender',\n    value: function invalidateCellSizeAfterRender(_ref2) {\n      var index = _ref2.rowIndex;\n\n      if (this._invalidateOnUpdateStartIndex === null) {\n        this._invalidateOnUpdateStartIndex = index;\n        this._invalidateOnUpdateStopIndex = index;\n      } else {\n        this._invalidateOnUpdateStartIndex = Math.min(this._invalidateOnUpdateStartIndex, index);\n        this._invalidateOnUpdateStopIndex = Math.max(this._invalidateOnUpdateStopIndex, index);\n      }\n    }\n  }, {\n    key: 'recomputeCellPositions',\n    value: function recomputeCellPositions() {\n      var stopIndex = this._positionCache.count - 1;\n\n      this._positionCache = new PositionCache();\n      this._populatePositionCache(0, stopIndex);\n\n      this.forceUpdate();\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this._checkInvalidateOnUpdate();\n      this._invokeOnScrollCallback();\n      this._invokeOnCellsRenderedCallback();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      this._checkInvalidateOnUpdate();\n      this._invokeOnScrollCallback();\n      this._invokeOnCellsRenderedCallback();\n\n      if (this.props.scrollTop !== prevProps.scrollTop) {\n        this._debounceResetIsScrolling();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this._debounceResetIsScrollingId) {\n        cancelAnimationTimeout(this._debounceResetIsScrollingId);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          autoHeight = _props.autoHeight,\n          cellCount = _props.cellCount,\n          cellMeasurerCache = _props.cellMeasurerCache,\n          cellRenderer = _props.cellRenderer,\n          className = _props.className,\n          height = _props.height,\n          id = _props.id,\n          keyMapper = _props.keyMapper,\n          overscanByPixels = _props.overscanByPixels,\n          role = _props.role,\n          style = _props.style,\n          tabIndex = _props.tabIndex,\n          width = _props.width,\n          rowDirection = _props.rowDirection;\n      var _state = this.state,\n          isScrolling = _state.isScrolling,\n          scrollTop = _state.scrollTop;\n\n\n      var children = [];\n\n      var estimateTotalHeight = this._getEstimatedTotalHeight();\n\n      var shortestColumnSize = this._positionCache.shortestColumnSize;\n      var measuredCellCount = this._positionCache.count;\n\n      var startIndex = 0;\n      var stopIndex = void 0;\n\n      this._positionCache.range(Math.max(0, scrollTop - overscanByPixels), height + overscanByPixels * 2, function (index, left, top) {\n        var _style;\n\n        if (typeof stopIndex === 'undefined') {\n          startIndex = index;\n          stopIndex = index;\n        } else {\n          startIndex = Math.min(startIndex, index);\n          stopIndex = Math.max(stopIndex, index);\n        }\n\n        children.push(cellRenderer({\n          index: index,\n          isScrolling: isScrolling,\n          key: keyMapper(index),\n          parent: _this2,\n          style: (_style = {\n            height: cellMeasurerCache.getHeight(index)\n          }, _defineProperty(_style, rowDirection === 'ltr' ? 'left' : 'right', left), _defineProperty(_style, 'position', 'absolute'), _defineProperty(_style, 'top', top), _defineProperty(_style, 'width', cellMeasurerCache.getWidth(index)), _style)\n        }));\n      });\n\n      // We need to measure additional cells for this layout\n      if (shortestColumnSize < scrollTop + height + overscanByPixels && measuredCellCount < cellCount) {\n        var batchSize = Math.min(cellCount - measuredCellCount, Math.ceil((scrollTop + height + overscanByPixels - shortestColumnSize) / cellMeasurerCache.defaultHeight * width / cellMeasurerCache.defaultWidth));\n\n        for (var _index = measuredCellCount; _index < measuredCellCount + batchSize; _index++) {\n          stopIndex = _index;\n\n          children.push(cellRenderer({\n            index: _index,\n            isScrolling: isScrolling,\n            key: keyMapper(_index),\n            parent: this,\n            style: {\n              width: cellMeasurerCache.getWidth(_index)\n            }\n          }));\n        }\n      }\n\n      this._startIndex = startIndex;\n      this._stopIndex = stopIndex;\n\n      return React.createElement(\n        'div',\n        {\n          ref: this._setScrollingContainerRef,\n          'aria-label': this.props['aria-label'],\n          className: clsx('ReactVirtualized__Masonry', className),\n          id: id,\n          onScroll: this._onScroll,\n          role: role,\n          style: _extends({\n            boxSizing: 'border-box',\n            direction: 'ltr',\n            height: autoHeight ? 'auto' : height,\n            overflowX: 'hidden',\n            overflowY: estimateTotalHeight < height ? 'hidden' : 'auto',\n            position: 'relative',\n            width: width,\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform'\n          }, style),\n          tabIndex: tabIndex },\n        React.createElement(\n          'div',\n          {\n            className: 'ReactVirtualized__Masonry__innerScrollContainer',\n            style: {\n              width: '100%',\n              height: estimateTotalHeight,\n              maxWidth: '100%',\n              maxHeight: estimateTotalHeight,\n              overflow: 'hidden',\n              pointerEvents: isScrolling ? 'none' : '',\n              position: 'relative'\n            } },\n          children\n        )\n      );\n    }\n  }, {\n    key: '_checkInvalidateOnUpdate',\n    value: function _checkInvalidateOnUpdate() {\n      if (typeof this._invalidateOnUpdateStartIndex === 'number') {\n        var _startIndex = this._invalidateOnUpdateStartIndex;\n        var _stopIndex = this._invalidateOnUpdateStopIndex;\n\n        this._invalidateOnUpdateStartIndex = null;\n        this._invalidateOnUpdateStopIndex = null;\n\n        // Query external layout logic for position of newly-measured cells\n        this._populatePositionCache(_startIndex, _stopIndex);\n\n        this.forceUpdate();\n      }\n    }\n  }, {\n    key: '_debounceResetIsScrolling',\n    value: function _debounceResetIsScrolling() {\n      var scrollingResetTimeInterval = this.props.scrollingResetTimeInterval;\n\n\n      if (this._debounceResetIsScrollingId) {\n        cancelAnimationTimeout(this._debounceResetIsScrollingId);\n      }\n\n      this._debounceResetIsScrollingId = requestAnimationTimeout(this._debounceResetIsScrollingCallback, scrollingResetTimeInterval);\n    }\n  }, {\n    key: '_getEstimatedTotalHeight',\n    value: function _getEstimatedTotalHeight() {\n      var _props2 = this.props,\n          cellCount = _props2.cellCount,\n          cellMeasurerCache = _props2.cellMeasurerCache,\n          width = _props2.width;\n\n\n      var estimatedColumnCount = Math.max(1, Math.floor(width / cellMeasurerCache.defaultWidth));\n\n      return this._positionCache.estimateTotalHeight(cellCount, estimatedColumnCount, cellMeasurerCache.defaultHeight);\n    }\n  }, {\n    key: '_invokeOnScrollCallback',\n    value: function _invokeOnScrollCallback() {\n      var _props3 = this.props,\n          height = _props3.height,\n          onScroll = _props3.onScroll;\n      var scrollTop = this.state.scrollTop;\n\n\n      if (this._onScrollMemoized !== scrollTop) {\n        onScroll({\n          clientHeight: height,\n          scrollHeight: this._getEstimatedTotalHeight(),\n          scrollTop: scrollTop\n        });\n\n        this._onScrollMemoized = scrollTop;\n      }\n    }\n  }, {\n    key: '_invokeOnCellsRenderedCallback',\n    value: function _invokeOnCellsRenderedCallback() {\n      if (this._startIndexMemoized !== this._startIndex || this._stopIndexMemoized !== this._stopIndex) {\n        var _onCellsRendered = this.props.onCellsRendered;\n\n\n        _onCellsRendered({\n          startIndex: this._startIndex,\n          stopIndex: this._stopIndex\n        });\n\n        this._startIndexMemoized = this._startIndex;\n        this._stopIndexMemoized = this._stopIndex;\n      }\n    }\n  }, {\n    key: '_populatePositionCache',\n    value: function _populatePositionCache(startIndex, stopIndex) {\n      var _props4 = this.props,\n          cellMeasurerCache = _props4.cellMeasurerCache,\n          cellPositioner = _props4.cellPositioner;\n\n\n      for (var _index2 = startIndex; _index2 <= stopIndex; _index2++) {\n        var _cellPositioner = cellPositioner(_index2),\n            _left = _cellPositioner.left,\n            _top = _cellPositioner.top;\n\n        this._positionCache.setPosition(_index2, _left, _top, cellMeasurerCache.getHeight(_index2));\n      }\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.scrollTop !== undefined && prevState.scrollTop !== nextProps.scrollTop) {\n        return {\n          isScrolling: true,\n          scrollTop: nextProps.scrollTop\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Masonry;\n}(React.PureComponent);\n\nMasonry.defaultProps = {\n  autoHeight: false,\n  keyMapper: identity,\n  onCellsRendered: noop,\n  onScroll: noop,\n  overscanByPixels: 20,\n  role: 'grid',\n  scrollingResetTimeInterval: DEFAULT_SCROLLING_RESET_TIME_INTERVAL,\n  style: emptyObject,\n  tabIndex: 0,\n  rowDirection: 'ltr'\n};\nMasonry.propTypes = process.env.NODE_ENV === 'production' ? null : {\n  autoHeight: PropTypes.bool.isRequired,\n  cellCount: PropTypes.number.isRequired,\n  cellMeasurerCache: function cellMeasurerCache() {\n    return (typeof CellMeasurerCache === 'function' ? PropTypes.instanceOf(CellMeasurerCache).isRequired : PropTypes.any.isRequired).apply(this, arguments);\n  },\n  cellPositioner: function cellPositioner() {\n    return (typeof Positioner === 'function' ? PropTypes.instanceOf(Positioner).isRequired : PropTypes.any.isRequired).apply(this, arguments);\n  },\n  cellRenderer: function cellRenderer() {\n    return (typeof CellRenderer === 'function' ? PropTypes.instanceOf(CellRenderer).isRequired : PropTypes.any.isRequired).apply(this, arguments);\n  },\n  className: PropTypes.string,\n  height: PropTypes.number.isRequired,\n  id: PropTypes.string,\n  keyMapper: function keyMapper() {\n    return (typeof KeyMapper === 'function' ? PropTypes.instanceOf(KeyMapper).isRequired : PropTypes.any.isRequired).apply(this, arguments);\n  },\n  onCellsRendered: function onCellsRendered() {\n    return (typeof OnCellsRenderedCallback === 'function' ? PropTypes.instanceOf(OnCellsRenderedCallback) : PropTypes.any).apply(this, arguments);\n  },\n  onScroll: function onScroll() {\n    return (typeof OnScrollCallback === 'function' ? PropTypes.instanceOf(OnScrollCallback) : PropTypes.any).apply(this, arguments);\n  },\n  overscanByPixels: PropTypes.number.isRequired,\n  role: PropTypes.string.isRequired,\n  scrollingResetTimeInterval: PropTypes.number.isRequired,\n  style: function style(props, propName, componentName) {\n    if (!Object.prototype.hasOwnProperty.call(props, propName)) {\n      throw new Error('Prop `' + propName + '` has type \\'any\\' or \\'mixed\\', but was not provided to `' + componentName + '`. Pass undefined or any other value.');\n    }\n  },\n  tabIndex: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  rowDirection: PropTypes.string.isRequired\n};\n\n\nfunction identity(value) {\n  return value;\n}\n\nfunction noop() {}\n\nvar bpfrpt_proptype_CellMeasurerCache = process.env.NODE_ENV === 'production' ? null : {\n  defaultHeight: PropTypes.number.isRequired,\n  defaultWidth: PropTypes.number.isRequired,\n  getHeight: PropTypes.func.isRequired,\n  getWidth: PropTypes.func.isRequired\n};\n\n\npolyfill(Masonry);\n\nexport default Masonry;\n\nvar bpfrpt_proptype_Positioner = process.env.NODE_ENV === 'production' ? null : PropTypes.func;\nimport { bpfrpt_proptype_AnimationTimeoutId } from '../utils/requestAnimationTimeout';\nimport PropTypes from 'prop-types';\nexport { bpfrpt_proptype_CellMeasurerCache };\nexport { bpfrpt_proptype_Positioner };"]},"metadata":{},"sourceType":"module"}