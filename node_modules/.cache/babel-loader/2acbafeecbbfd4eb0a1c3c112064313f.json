{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * This function calculates if the specified color is \"dark\", which usually means\n * you need light text if you use it as a background color to fulfill WCAG contrast\n * requirement.\n * The color must be specified via its red, green and blue value in the range of\n * 0 to 255.\n * The formula is based on this Stackoverflow answer: https://stackoverflow.com/a/3943023\n * which itself is based upon the WCAG recommendation for color contrast.\n *\n * @param {number} red The red component in the range 0 to 255\n * @param {number} green The green component in the range 0 to 255\n * @param {number} blue The blue component in the range 0 to 255\n * @returns {boolean} True if the color is dark, false otherwise.\n */\n\n\nexport function isColorDark(red, green, blue) {\n  var _map$map = [red, green, blue].map(function (c) {\n    return c / 255.0;\n  }).map(function (c) {\n    return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n  }),\n      _map$map2 = _slicedToArray(_map$map, 3),\n      r = _map$map2[0],\n      g = _map$map2[1],\n      b = _map$map2[2];\n\n  var luminance = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  return luminance <= 0.179;\n}","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/@elastic/eui/es/services/color/is_color_dark.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","length","err","Array","isArray","isColorDark","red","green","blue","_map$map","map","c","Math","pow","_map$map2","r","g","b","luminance"],"mappings":"AAAA,SAASA,cAAT,CAAwBC,GAAxB,EAA6BC,CAA7B,EAAgC;AAAE,SAAOC,eAAe,CAACF,GAAD,CAAf,IAAwBG,qBAAqB,CAACH,GAAD,EAAMC,CAAN,CAA7C,IAAyDG,gBAAgB,EAAhF;AAAqF;;AAEvH,SAASA,gBAAT,GAA4B;AAAE,QAAM,IAAIC,SAAJ,CAAc,sDAAd,CAAN;AAA8E;;AAE5G,SAASF,qBAAT,CAA+BH,GAA/B,EAAoCC,CAApC,EAAuC;AAAE,MAAI,EAAEK,MAAM,CAACC,QAAP,IAAmBC,MAAM,CAACR,GAAD,CAAzB,IAAkCQ,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BX,GAA/B,MAAwC,oBAA5E,CAAJ,EAAuG;AAAE;AAAS;;AAAC,MAAIY,IAAI,GAAG,EAAX;AAAe,MAAIC,EAAE,GAAG,IAAT;AAAe,MAAIC,EAAE,GAAG,KAAT;AAAgB,MAAIC,EAAE,GAAGC,SAAT;;AAAoB,MAAI;AAAE,SAAK,IAAIC,EAAE,GAAGjB,GAAG,CAACM,MAAM,CAACC,QAAR,CAAH,EAAT,EAAiCW,EAAtC,EAA0C,EAAEL,EAAE,GAAG,CAACK,EAAE,GAAGD,EAAE,CAACE,IAAH,EAAN,EAAiBC,IAAxB,CAA1C,EAAyEP,EAAE,GAAG,IAA9E,EAAoF;AAAED,MAAAA,IAAI,CAACS,IAAL,CAAUH,EAAE,CAACI,KAAb;;AAAqB,UAAIrB,CAAC,IAAIW,IAAI,CAACW,MAAL,KAAgBtB,CAAzB,EAA4B;AAAQ;AAAE,GAAvJ,CAAwJ,OAAOuB,GAAP,EAAY;AAAEV,IAAAA,EAAE,GAAG,IAAL;AAAWC,IAAAA,EAAE,GAAGS,GAAL;AAAW,GAA5L,SAAqM;AAAE,QAAI;AAAE,UAAI,CAACX,EAAD,IAAOI,EAAE,CAAC,QAAD,CAAF,IAAgB,IAA3B,EAAiCA,EAAE,CAAC,QAAD,CAAF;AAAiB,KAAxD,SAAiE;AAAE,UAAIH,EAAJ,EAAQ,MAAMC,EAAN;AAAW;AAAE;;AAAC,SAAOH,IAAP;AAAc;;AAE5gB,SAASV,eAAT,CAAyBF,GAAzB,EAA8B;AAAE,MAAIyB,KAAK,CAACC,OAAN,CAAc1B,GAAd,CAAJ,EAAwB,OAAOA,GAAP;AAAa;AAErE;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;AAcA,OAAO,SAAS2B,WAAT,CAAqBC,GAArB,EAA0BC,KAA1B,EAAiCC,IAAjC,EAAuC;AAC5C,MAAIC,QAAQ,GAAG,CAACH,GAAD,EAAMC,KAAN,EAAaC,IAAb,EAAmBE,GAAnB,CAAuB,UAAUC,CAAV,EAAa;AACjD,WAAOA,CAAC,GAAG,KAAX;AACD,GAFc,EAEZD,GAFY,CAER,UAAUC,CAAV,EAAa;AAClB,WAAOA,CAAC,IAAI,OAAL,GAAeA,CAAC,GAAG,KAAnB,GAA2BC,IAAI,CAACC,GAAL,CAAS,CAACF,CAAC,GAAG,KAAL,IAAc,KAAvB,EAA8B,GAA9B,CAAlC;AACD,GAJc,CAAf;AAAA,MAKIG,SAAS,GAAGrC,cAAc,CAACgC,QAAD,EAAW,CAAX,CAL9B;AAAA,MAMIM,CAAC,GAAGD,SAAS,CAAC,CAAD,CANjB;AAAA,MAOIE,CAAC,GAAGF,SAAS,CAAC,CAAD,CAPjB;AAAA,MAQIG,CAAC,GAAGH,SAAS,CAAC,CAAD,CARjB;;AAUA,MAAII,SAAS,GAAG,SAASH,CAAT,GAAa,SAASC,CAAtB,GAA0B,SAASC,CAAnD;AACA,SAAOC,SAAS,IAAI,KAApB;AACD","sourcesContent":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * This function calculates if the specified color is \"dark\", which usually means\n * you need light text if you use it as a background color to fulfill WCAG contrast\n * requirement.\n * The color must be specified via its red, green and blue value in the range of\n * 0 to 255.\n * The formula is based on this Stackoverflow answer: https://stackoverflow.com/a/3943023\n * which itself is based upon the WCAG recommendation for color contrast.\n *\n * @param {number} red The red component in the range 0 to 255\n * @param {number} green The green component in the range 0 to 255\n * @param {number} blue The blue component in the range 0 to 255\n * @returns {boolean} True if the color is dark, false otherwise.\n */\nexport function isColorDark(red, green, blue) {\n  var _map$map = [red, green, blue].map(function (c) {\n    return c / 255.0;\n  }).map(function (c) {\n    return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n  }),\n      _map$map2 = _slicedToArray(_map$map, 3),\n      r = _map$map2[0],\n      g = _map$map2[1],\n      b = _map$map2[2];\n\n  var luminance = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  return luminance <= 0.179;\n}"]},"metadata":{},"sourceType":"module"}