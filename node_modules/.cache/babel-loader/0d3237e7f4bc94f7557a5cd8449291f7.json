{"ast":null,"code":"/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar getSelectedOptionForSearchValue = function getSelectedOptionForSearchValue(searchValue, selectedOptions) {\n  var normalizedSearchValue = searchValue.toLowerCase();\n  return selectedOptions.find(function (option) {\n    return option.label.toLowerCase() === normalizedSearchValue;\n  });\n};\n\nvar collectMatchingOption = function collectMatchingOption(accumulator, option, normalizedSearchValue, isPreFiltered, selectedOptions) {\n  // Don't show options that have already been requested if\n  // the selectedOptions list exists\n  if (selectedOptions) {\n    var selectedOption = getSelectedOptionForSearchValue(option.label, selectedOptions);\n\n    if (selectedOption) {\n      return false;\n    }\n  } // If the options have already been prefiltered then we can skip filtering against the search value.\n  // TODO: I still don't quite understand how this works when hooked up to async\n\n\n  if (isPreFiltered) {\n    accumulator.push(option);\n    return;\n  }\n\n  if (!normalizedSearchValue) {\n    accumulator.push(option);\n    return;\n  }\n\n  var normalizedOption = option.label.trim().toLowerCase();\n\n  if (normalizedOption.includes(normalizedSearchValue)) {\n    accumulator.push(option);\n  }\n};\n\nexport var getMatchingOptions = function getMatchingOptions(options, searchValue, isPreFiltered, selectedOptions) {\n  var normalizedSearchValue = searchValue.trim().toLowerCase();\n  var matchingOptions = [];\n  options.forEach(function (option) {\n    collectMatchingOption(matchingOptions, option, normalizedSearchValue, isPreFiltered, selectedOptions);\n  });\n  return matchingOptions;\n};","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/@elastic/eui/es/components/selectable/matching_options.js"],"names":["getSelectedOptionForSearchValue","searchValue","selectedOptions","normalizedSearchValue","toLowerCase","find","option","label","collectMatchingOption","accumulator","isPreFiltered","selectedOption","push","normalizedOption","trim","includes","getMatchingOptions","options","matchingOptions","forEach"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,IAAIA,+BAA+B,GAAG,SAASA,+BAAT,CAAyCC,WAAzC,EAAsDC,eAAtD,EAAuE;AAC3G,MAAIC,qBAAqB,GAAGF,WAAW,CAACG,WAAZ,EAA5B;AACA,SAAOF,eAAe,CAACG,IAAhB,CAAqB,UAAUC,MAAV,EAAkB;AAC5C,WAAOA,MAAM,CAACC,KAAP,CAAaH,WAAb,OAA+BD,qBAAtC;AACD,GAFM,CAAP;AAGD,CALD;;AAOA,IAAIK,qBAAqB,GAAG,SAASA,qBAAT,CAA+BC,WAA/B,EAA4CH,MAA5C,EAAoDH,qBAApD,EAA2EO,aAA3E,EAA0FR,eAA1F,EAA2G;AACrI;AACA;AACA,MAAIA,eAAJ,EAAqB;AACnB,QAAIS,cAAc,GAAGX,+BAA+B,CAACM,MAAM,CAACC,KAAR,EAAeL,eAAf,CAApD;;AAEA,QAAIS,cAAJ,EAAoB;AAClB,aAAO,KAAP;AACD;AACF,GAToI,CASnI;AACF;;;AAGA,MAAID,aAAJ,EAAmB;AACjBD,IAAAA,WAAW,CAACG,IAAZ,CAAiBN,MAAjB;AACA;AACD;;AAED,MAAI,CAACH,qBAAL,EAA4B;AAC1BM,IAAAA,WAAW,CAACG,IAAZ,CAAiBN,MAAjB;AACA;AACD;;AAED,MAAIO,gBAAgB,GAAGP,MAAM,CAACC,KAAP,CAAaO,IAAb,GAAoBV,WAApB,EAAvB;;AAEA,MAAIS,gBAAgB,CAACE,QAAjB,CAA0BZ,qBAA1B,CAAJ,EAAsD;AACpDM,IAAAA,WAAW,CAACG,IAAZ,CAAiBN,MAAjB;AACD;AACF,CA5BD;;AA8BA,OAAO,IAAIU,kBAAkB,GAAG,SAASA,kBAAT,CAA4BC,OAA5B,EAAqChB,WAArC,EAAkDS,aAAlD,EAAiER,eAAjE,EAAkF;AAChH,MAAIC,qBAAqB,GAAGF,WAAW,CAACa,IAAZ,GAAmBV,WAAnB,EAA5B;AACA,MAAIc,eAAe,GAAG,EAAtB;AACAD,EAAAA,OAAO,CAACE,OAAR,CAAgB,UAAUb,MAAV,EAAkB;AAChCE,IAAAA,qBAAqB,CAACU,eAAD,EAAkBZ,MAAlB,EAA0BH,qBAA1B,EAAiDO,aAAjD,EAAgER,eAAhE,CAArB;AACD,GAFD;AAGA,SAAOgB,eAAP;AACD,CAPM","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar getSelectedOptionForSearchValue = function getSelectedOptionForSearchValue(searchValue, selectedOptions) {\n  var normalizedSearchValue = searchValue.toLowerCase();\n  return selectedOptions.find(function (option) {\n    return option.label.toLowerCase() === normalizedSearchValue;\n  });\n};\n\nvar collectMatchingOption = function collectMatchingOption(accumulator, option, normalizedSearchValue, isPreFiltered, selectedOptions) {\n  // Don't show options that have already been requested if\n  // the selectedOptions list exists\n  if (selectedOptions) {\n    var selectedOption = getSelectedOptionForSearchValue(option.label, selectedOptions);\n\n    if (selectedOption) {\n      return false;\n    }\n  } // If the options have already been prefiltered then we can skip filtering against the search value.\n  // TODO: I still don't quite understand how this works when hooked up to async\n\n\n  if (isPreFiltered) {\n    accumulator.push(option);\n    return;\n  }\n\n  if (!normalizedSearchValue) {\n    accumulator.push(option);\n    return;\n  }\n\n  var normalizedOption = option.label.trim().toLowerCase();\n\n  if (normalizedOption.includes(normalizedSearchValue)) {\n    accumulator.push(option);\n  }\n};\n\nexport var getMatchingOptions = function getMatchingOptions(options, searchValue, isPreFiltered, selectedOptions) {\n  var normalizedSearchValue = searchValue.trim().toLowerCase();\n  var matchingOptions = [];\n  options.forEach(function (option) {\n    collectMatchingOption(matchingOptions, option, normalizedSearchValue, isPreFiltered, selectedOptions);\n  });\n  return matchingOptions;\n};"]},"metadata":{},"sourceType":"module"}