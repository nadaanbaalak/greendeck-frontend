{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\nimport React from 'react';\nimport { IsFilter } from './is_filter';\nimport { FieldValueSelectionFilter } from './field_value_selection_filter';\nimport { FieldValueToggleFilter } from './field_value_toggle_filter';\nimport { FieldValueToggleGroupFilter } from './field_value_toggle_group_filter';\nexport var createFilter = function createFilter(index, config, query, onChange) {\n  var props = {\n    index: index,\n    query: query,\n    onChange: onChange\n  }; // We don't put `config` into `props` above because until we check\n  // `config.type`, TS only knows that it's a `FilterConfig`, and that type\n  // is used to define `props` as well. Once we've checked `config.type`\n  // below, its type is narrowed correctly, hence we pass down `config`\n  // separately.\n\n  switch (config.type) {\n    case 'is':\n      return React.createElement(IsFilter, _extends({}, props, {\n        config: config\n      }));\n\n    case 'field_value_selection':\n      return React.createElement(FieldValueSelectionFilter, _extends({}, props, {\n        config: config\n      }));\n\n    case 'field_value_toggle':\n      return React.createElement(FieldValueToggleFilter, _extends({}, props, {\n        config: config\n      }));\n\n    case 'field_value_toggle_group':\n      return React.createElement(FieldValueToggleGroupFilter, _extends({}, props, {\n        config: config\n      }));\n\n    default:\n      // @ts-ignore TS knows that we've checked `config.type` exhaustively\n      throw new Error(\"Unknown search filter type [\".concat(config.type, \"]\"));\n  }\n};\ncreateFilter.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"createFilter\"\n};","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/@elastic/eui/es/components/search_bar/filters/filters.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","React","IsFilter","FieldValueSelectionFilter","FieldValueToggleFilter","FieldValueToggleGroupFilter","createFilter","index","config","query","onChange","props","type","createElement","Error","concat","__docgenInfo"],"mappings":"AAAA,SAASA,QAAT,GAAoB;AAAEA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,UAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,WAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,YAAIN,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,UAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,WAAOL,MAAP;AAAgB,GAA5P;;AAA8P,SAAOH,QAAQ,CAACY,KAAT,CAAe,IAAf,EAAqBP,SAArB,CAAP;AAAyC;AAE7T;;;;;;;;;;;;;;;;;;;;AAkBA,OAAOQ,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,yBAAT,QAA0C,gCAA1C;AACA,SAASC,sBAAT,QAAuC,6BAAvC;AACA,SAASC,2BAAT,QAA4C,mCAA5C;AACA,OAAO,IAAIC,YAAY,GAAG,SAASA,YAAT,CAAsBC,KAAtB,EAA6BC,MAA7B,EAAqCC,KAArC,EAA4CC,QAA5C,EAAsD;AAC9E,MAAIC,KAAK,GAAG;AACVJ,IAAAA,KAAK,EAAEA,KADG;AAEVE,IAAAA,KAAK,EAAEA,KAFG;AAGVC,IAAAA,QAAQ,EAAEA;AAHA,GAAZ,CAD8E,CAK3E;AACH;AACA;AACA;AACA;;AAEA,UAAQF,MAAM,CAACI,IAAf;AACE,SAAK,IAAL;AACE,aAAOX,KAAK,CAACY,aAAN,CAAoBX,QAApB,EAA8Bd,QAAQ,CAAC,EAAD,EAAKuB,KAAL,EAAY;AACvDH,QAAAA,MAAM,EAAEA;AAD+C,OAAZ,CAAtC,CAAP;;AAIF,SAAK,uBAAL;AACE,aAAOP,KAAK,CAACY,aAAN,CAAoBV,yBAApB,EAA+Cf,QAAQ,CAAC,EAAD,EAAKuB,KAAL,EAAY;AACxEH,QAAAA,MAAM,EAAEA;AADgE,OAAZ,CAAvD,CAAP;;AAIF,SAAK,oBAAL;AACE,aAAOP,KAAK,CAACY,aAAN,CAAoBT,sBAApB,EAA4ChB,QAAQ,CAAC,EAAD,EAAKuB,KAAL,EAAY;AACrEH,QAAAA,MAAM,EAAEA;AAD6D,OAAZ,CAApD,CAAP;;AAIF,SAAK,0BAAL;AACE,aAAOP,KAAK,CAACY,aAAN,CAAoBR,2BAApB,EAAiDjB,QAAQ,CAAC,EAAD,EAAKuB,KAAL,EAAY;AAC1EH,QAAAA,MAAM,EAAEA;AADkE,OAAZ,CAAzD,CAAP;;AAIF;AACE;AACA,YAAM,IAAIM,KAAJ,CAAU,+BAA+BC,MAA/B,CAAsCP,MAAM,CAACI,IAA7C,EAAmD,GAAnD,CAAV,CAAN;AAvBJ;AAyBD,CApCM;AAqCPN,YAAY,CAACU,YAAb,GAA4B;AAC1B,iBAAe,EADW;AAE1B,aAAW,EAFe;AAG1B,iBAAe;AAHW,CAA5B","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { IsFilter } from './is_filter';\nimport { FieldValueSelectionFilter } from './field_value_selection_filter';\nimport { FieldValueToggleFilter } from './field_value_toggle_filter';\nimport { FieldValueToggleGroupFilter } from './field_value_toggle_group_filter';\nexport var createFilter = function createFilter(index, config, query, onChange) {\n  var props = {\n    index: index,\n    query: query,\n    onChange: onChange\n  }; // We don't put `config` into `props` above because until we check\n  // `config.type`, TS only knows that it's a `FilterConfig`, and that type\n  // is used to define `props` as well. Once we've checked `config.type`\n  // below, its type is narrowed correctly, hence we pass down `config`\n  // separately.\n\n  switch (config.type) {\n    case 'is':\n      return React.createElement(IsFilter, _extends({}, props, {\n        config: config\n      }));\n\n    case 'field_value_selection':\n      return React.createElement(FieldValueSelectionFilter, _extends({}, props, {\n        config: config\n      }));\n\n    case 'field_value_toggle':\n      return React.createElement(FieldValueToggleFilter, _extends({}, props, {\n        config: config\n      }));\n\n    case 'field_value_toggle_group':\n      return React.createElement(FieldValueToggleGroupFilter, _extends({}, props, {\n        config: config\n      }));\n\n    default:\n      // @ts-ignore TS knows that we've checked `config.type` exhaustively\n      throw new Error(\"Unknown search filter type [\".concat(config.type, \"]\"));\n  }\n};\ncreateFilter.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"createFilter\"\n};"]},"metadata":{},"sourceType":"module"}