{"ast":null,"code":"/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { printIso8601 } from './date_format';\nimport { isDateValue } from './date_value';\nimport { AST, Operator } from './ast';\nimport { isArray, isDateLike, isString, isBoolean, isNumber } from '../../../services/predicate';\n\nvar emitMatch = function emitMatch(match) {\n  if (!match) {\n    return '';\n  }\n\n  return AST.Match.isMust(match) ? '+' : '-';\n};\n\nvar emitFieldDateLikeClause = function emitFieldDateLikeClause(field, value, operator, match) {\n  var matchOp = emitMatch(match);\n\n  switch (operator) {\n    case Operator.EQ:\n      return \"\".concat(matchOp).concat(field, \":\").concat(printIso8601(value));\n\n    case Operator.GT:\n      return \"\".concat(matchOp).concat(field, \":>\").concat(printIso8601(value));\n\n    case Operator.GTE:\n      return \"\".concat(matchOp).concat(field, \":>=\").concat(printIso8601(value));\n\n    case Operator.LT:\n      return \"\".concat(matchOp).concat(field, \":<\").concat(printIso8601(value));\n\n    case Operator.LTE:\n      return \"\".concat(matchOp).concat(field, \":<=\").concat(printIso8601(value));\n\n    default:\n      throw new Error(\"unknown operator [\".concat(operator, \"]\"));\n  }\n};\n\nvar emitFieldDateValueClause = function emitFieldDateValueClause(field, value, operator, match) {\n  var matchOp = emitMatch(match);\n  var granularity = value.granularity,\n      resolve = value.resolve;\n  var date = resolve();\n\n  if (granularity) {\n    switch (operator) {\n      case Operator.EQ:\n        var gte = granularity.iso8601(granularity.start(date));\n        var lt = granularity.iso8601(granularity.startOfNext(date));\n        return \"\".concat(matchOp).concat(field, \":(>=\").concat(gte, \" AND <\").concat(lt, \")\");\n\n      case Operator.GT:\n        return \"\".concat(matchOp).concat(field, \":>=\").concat(granularity.iso8601(granularity.startOfNext(date)));\n\n      case Operator.GTE:\n        return \"\".concat(matchOp).concat(field, \":>=\").concat(granularity.iso8601(granularity.start(date)));\n\n      case Operator.LT:\n        return \"\".concat(matchOp).concat(field, \":<\").concat(granularity.iso8601(granularity.start(date)));\n\n      case Operator.LTE:\n        return \"\".concat(matchOp).concat(field, \":<\").concat(granularity.iso8601(granularity.startOfNext(date)));\n\n      default:\n        throw new Error(\"unknown operator [\".concat(operator, \"]\"));\n    }\n  }\n\n  return emitFieldDateLikeClause(field, date, operator, match);\n};\n\nvar emitFieldNumericClause = function emitFieldNumericClause(field, value, operator, match) {\n  var matchOp = emitMatch(match);\n\n  switch (operator) {\n    case Operator.EQ:\n      return \"\".concat(matchOp).concat(field, \":\").concat(value);\n\n    case Operator.GT:\n      return \"\".concat(matchOp).concat(field, \":>\").concat(value);\n\n    case Operator.GTE:\n      return \"\".concat(matchOp).concat(field, \":>=\").concat(value);\n\n    case Operator.LT:\n      return \"\".concat(matchOp).concat(field, \":<\").concat(value);\n\n    case Operator.LTE:\n      return \"\".concat(matchOp).concat(field, \":<=\").concat(value);\n\n    default:\n      throw new Error(\"unknown operator [\".concat(operator, \"]\"));\n  }\n};\n\nvar emitFieldStringClause = function emitFieldStringClause(field, value, match) {\n  var matchOp = emitMatch(match);\n\n  if (value.match(/\\s/)) {\n    return \"\".concat(matchOp).concat(field, \":\\\"\").concat(value, \"\\\"\");\n  }\n\n  return \"\".concat(matchOp).concat(field, \":\").concat(value);\n};\n\nvar emitFieldBooleanClause = function emitFieldBooleanClause(field, value, match) {\n  var matchOp = emitMatch(match);\n  return \"\".concat(matchOp).concat(field, \":\").concat(value);\n};\n\nvar emitFieldSingleValueClause = function emitFieldSingleValueClause(field, value, operator, match) {\n  if (isDateValue(value)) {\n    return emitFieldDateValueClause(field, value, operator, match);\n  }\n\n  if (isDateLike(value)) {\n    return emitFieldDateLikeClause(field, value, operator, match);\n  }\n\n  if (isString(value)) {\n    return emitFieldStringClause(field, value, match);\n  }\n\n  if (isNumber(value)) {\n    return emitFieldNumericClause(field, value, operator, match);\n  }\n\n  if (isBoolean(value)) {\n    return emitFieldBooleanClause(field, value, match);\n  }\n\n  throw new Error(\"unknown type of field value [\".concat(value, \"]\"));\n};\n\nvar emitFieldClause = function emitFieldClause(clause, isGroupMember) {\n  var field = clause.field,\n      value = clause.value,\n      operator = clause.operator;\n  var match = clause.match;\n\n  if (isGroupMember && AST.Match.isMust(match)) {\n    match = undefined;\n  }\n\n  if (!isArray(value)) {\n    return emitFieldSingleValueClause(field, value, operator, match);\n  }\n\n  var matchOp = emitMatch(match);\n  var clauses = value.map(function (v) {\n    return emitFieldSingleValueClause(field, v, operator);\n  }).join(' OR ');\n  return \"\".concat(matchOp, \"(\").concat(clauses, \")\");\n};\n\nvar emitTermClause = function emitTermClause(clause, isGroupMember) {\n  var value = clause.value;\n  var match = clause.match;\n\n  if (isGroupMember && AST.Match.isMust(match)) {\n    match = undefined;\n  }\n\n  var matchOp = emitMatch(match);\n  return \"\".concat(matchOp).concat(value);\n};\n\nvar emitIsClause = function emitIsClause(clause, isGroupMember) {\n  var flag = clause.flag,\n      match = clause.match;\n  var matchOp = isGroupMember ? '' : '+';\n  var flagValue = AST.Match.isMust(match);\n  return \"\".concat(matchOp).concat(flag, \":\").concat(flagValue);\n};\n\nvar emitGroupClause = function emitGroupClause(clause) {\n  var value = clause.value;\n  var formattedValues = value.map(function (clause) {\n    return emitClause(clause, true);\n  });\n  return \"+(\".concat(formattedValues.join(' '), \")\");\n};\n\nfunction emitClause(clause) {\n  var isGroupMember = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (AST.Field.isInstance(clause)) {\n    return emitFieldClause(clause, isGroupMember);\n  }\n\n  if (AST.Term.isInstance(clause)) {\n    return emitTermClause(clause, isGroupMember);\n  }\n\n  if (AST.Is.isInstance(clause)) {\n    return emitIsClause(clause, isGroupMember);\n  }\n\n  if (AST.Group.isInstance(clause)) {\n    return emitGroupClause(clause);\n  }\n\n  throw new Error(\"unknown clause type [\".concat(JSON.stringify(clause), \"]\"));\n}\n\nexport var astToEsQueryString = function astToEsQueryString(ast) {\n  if (ast.clauses.length === 0) {\n    return '*';\n  }\n\n  return ast.clauses.map(function (clause) {\n    return emitClause(clause);\n  }).join(' ');\n};","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/@elastic/eui/es/components/search_bar/query/ast_to_es_query_string.js"],"names":["printIso8601","isDateValue","AST","Operator","isArray","isDateLike","isString","isBoolean","isNumber","emitMatch","match","Match","isMust","emitFieldDateLikeClause","field","value","operator","matchOp","EQ","concat","GT","GTE","LT","LTE","Error","emitFieldDateValueClause","granularity","resolve","date","gte","iso8601","start","lt","startOfNext","emitFieldNumericClause","emitFieldStringClause","emitFieldBooleanClause","emitFieldSingleValueClause","emitFieldClause","clause","isGroupMember","undefined","clauses","map","v","join","emitTermClause","emitIsClause","flag","flagValue","emitGroupClause","formattedValues","emitClause","arguments","length","Field","isInstance","Term","Is","Group","JSON","stringify","astToEsQueryString","ast"],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { printIso8601 } from './date_format';\nimport { isDateValue } from './date_value';\nimport { AST, Operator } from './ast';\nimport { isArray, isDateLike, isString, isBoolean, isNumber } from '../../../services/predicate';\n\nvar emitMatch = function emitMatch(match) {\n  if (!match) {\n    return '';\n  }\n\n  return AST.Match.isMust(match) ? '+' : '-';\n};\n\nvar emitFieldDateLikeClause = function emitFieldDateLikeClause(field, value, operator, match) {\n  var matchOp = emitMatch(match);\n\n  switch (operator) {\n    case Operator.EQ:\n      return \"\".concat(matchOp).concat(field, \":\").concat(printIso8601(value));\n\n    case Operator.GT:\n      return \"\".concat(matchOp).concat(field, \":>\").concat(printIso8601(value));\n\n    case Operator.GTE:\n      return \"\".concat(matchOp).concat(field, \":>=\").concat(printIso8601(value));\n\n    case Operator.LT:\n      return \"\".concat(matchOp).concat(field, \":<\").concat(printIso8601(value));\n\n    case Operator.LTE:\n      return \"\".concat(matchOp).concat(field, \":<=\").concat(printIso8601(value));\n\n    default:\n      throw new Error(\"unknown operator [\".concat(operator, \"]\"));\n  }\n};\n\nvar emitFieldDateValueClause = function emitFieldDateValueClause(field, value, operator, match) {\n  var matchOp = emitMatch(match);\n  var granularity = value.granularity,\n      resolve = value.resolve;\n  var date = resolve();\n\n  if (granularity) {\n    switch (operator) {\n      case Operator.EQ:\n        var gte = granularity.iso8601(granularity.start(date));\n        var lt = granularity.iso8601(granularity.startOfNext(date));\n        return \"\".concat(matchOp).concat(field, \":(>=\").concat(gte, \" AND <\").concat(lt, \")\");\n\n      case Operator.GT:\n        return \"\".concat(matchOp).concat(field, \":>=\").concat(granularity.iso8601(granularity.startOfNext(date)));\n\n      case Operator.GTE:\n        return \"\".concat(matchOp).concat(field, \":>=\").concat(granularity.iso8601(granularity.start(date)));\n\n      case Operator.LT:\n        return \"\".concat(matchOp).concat(field, \":<\").concat(granularity.iso8601(granularity.start(date)));\n\n      case Operator.LTE:\n        return \"\".concat(matchOp).concat(field, \":<\").concat(granularity.iso8601(granularity.startOfNext(date)));\n\n      default:\n        throw new Error(\"unknown operator [\".concat(operator, \"]\"));\n    }\n  }\n\n  return emitFieldDateLikeClause(field, date, operator, match);\n};\n\nvar emitFieldNumericClause = function emitFieldNumericClause(field, value, operator, match) {\n  var matchOp = emitMatch(match);\n\n  switch (operator) {\n    case Operator.EQ:\n      return \"\".concat(matchOp).concat(field, \":\").concat(value);\n\n    case Operator.GT:\n      return \"\".concat(matchOp).concat(field, \":>\").concat(value);\n\n    case Operator.GTE:\n      return \"\".concat(matchOp).concat(field, \":>=\").concat(value);\n\n    case Operator.LT:\n      return \"\".concat(matchOp).concat(field, \":<\").concat(value);\n\n    case Operator.LTE:\n      return \"\".concat(matchOp).concat(field, \":<=\").concat(value);\n\n    default:\n      throw new Error(\"unknown operator [\".concat(operator, \"]\"));\n  }\n};\n\nvar emitFieldStringClause = function emitFieldStringClause(field, value, match) {\n  var matchOp = emitMatch(match);\n\n  if (value.match(/\\s/)) {\n    return \"\".concat(matchOp).concat(field, \":\\\"\").concat(value, \"\\\"\");\n  }\n\n  return \"\".concat(matchOp).concat(field, \":\").concat(value);\n};\n\nvar emitFieldBooleanClause = function emitFieldBooleanClause(field, value, match) {\n  var matchOp = emitMatch(match);\n  return \"\".concat(matchOp).concat(field, \":\").concat(value);\n};\n\nvar emitFieldSingleValueClause = function emitFieldSingleValueClause(field, value, operator, match) {\n  if (isDateValue(value)) {\n    return emitFieldDateValueClause(field, value, operator, match);\n  }\n\n  if (isDateLike(value)) {\n    return emitFieldDateLikeClause(field, value, operator, match);\n  }\n\n  if (isString(value)) {\n    return emitFieldStringClause(field, value, match);\n  }\n\n  if (isNumber(value)) {\n    return emitFieldNumericClause(field, value, operator, match);\n  }\n\n  if (isBoolean(value)) {\n    return emitFieldBooleanClause(field, value, match);\n  }\n\n  throw new Error(\"unknown type of field value [\".concat(value, \"]\"));\n};\n\nvar emitFieldClause = function emitFieldClause(clause, isGroupMember) {\n  var field = clause.field,\n      value = clause.value,\n      operator = clause.operator;\n  var match = clause.match;\n\n  if (isGroupMember && AST.Match.isMust(match)) {\n    match = undefined;\n  }\n\n  if (!isArray(value)) {\n    return emitFieldSingleValueClause(field, value, operator, match);\n  }\n\n  var matchOp = emitMatch(match);\n  var clauses = value.map(function (v) {\n    return emitFieldSingleValueClause(field, v, operator);\n  }).join(' OR ');\n  return \"\".concat(matchOp, \"(\").concat(clauses, \")\");\n};\n\nvar emitTermClause = function emitTermClause(clause, isGroupMember) {\n  var value = clause.value;\n  var match = clause.match;\n\n  if (isGroupMember && AST.Match.isMust(match)) {\n    match = undefined;\n  }\n\n  var matchOp = emitMatch(match);\n  return \"\".concat(matchOp).concat(value);\n};\n\nvar emitIsClause = function emitIsClause(clause, isGroupMember) {\n  var flag = clause.flag,\n      match = clause.match;\n  var matchOp = isGroupMember ? '' : '+';\n  var flagValue = AST.Match.isMust(match);\n  return \"\".concat(matchOp).concat(flag, \":\").concat(flagValue);\n};\n\nvar emitGroupClause = function emitGroupClause(clause) {\n  var value = clause.value;\n  var formattedValues = value.map(function (clause) {\n    return emitClause(clause, true);\n  });\n  return \"+(\".concat(formattedValues.join(' '), \")\");\n};\n\nfunction emitClause(clause) {\n  var isGroupMember = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (AST.Field.isInstance(clause)) {\n    return emitFieldClause(clause, isGroupMember);\n  }\n\n  if (AST.Term.isInstance(clause)) {\n    return emitTermClause(clause, isGroupMember);\n  }\n\n  if (AST.Is.isInstance(clause)) {\n    return emitIsClause(clause, isGroupMember);\n  }\n\n  if (AST.Group.isInstance(clause)) {\n    return emitGroupClause(clause);\n  }\n\n  throw new Error(\"unknown clause type [\".concat(JSON.stringify(clause), \"]\"));\n}\n\nexport var astToEsQueryString = function astToEsQueryString(ast) {\n  if (ast.clauses.length === 0) {\n    return '*';\n  }\n\n  return ast.clauses.map(function (clause) {\n    return emitClause(clause);\n  }).join(' ');\n};"]},"metadata":{},"sourceType":"module"}