{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rgbToHex = rgbToHex;\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\nfunction asHex(value) {\n  var hex = parseInt(value, 10).toString(16);\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n\nfunction rgbToHex(rgb) {\n  var withoutWhitespace = rgb.replace(/\\s+/g, '');\n  var rgbMatch = withoutWhitespace.match(/^rgba?\\((\\d+),(\\d+),(\\d+)(?:,(?:1(?:\\.0*)?|0(?:\\.\\d+)?))?\\)$/i);\n\n  if (!rgbMatch) {\n    return '';\n  }\n\n  var _rgbMatch = _slicedToArray(rgbMatch, 4),\n      r = _rgbMatch[1],\n      g = _rgbMatch[2],\n      b = _rgbMatch[3];\n\n  return \"#\".concat(asHex(r)).concat(asHex(g)).concat(asHex(b));\n}","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/@elastic/eui/lib/services/color/rgb_to_hex.js"],"names":["Object","defineProperty","exports","value","rgbToHex","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","Symbol","iterator","prototype","toString","call","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","length","err","Array","isArray","asHex","hex","parseInt","concat","rgb","withoutWhitespace","replace","rgbMatch","match","_rgbMatch","r","g","b"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rgbToHex = rgbToHex;\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nfunction asHex(value) {\n  var hex = parseInt(value, 10).toString(16);\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n\nfunction rgbToHex(rgb) {\n  var withoutWhitespace = rgb.replace(/\\s+/g, '');\n  var rgbMatch = withoutWhitespace.match(/^rgba?\\((\\d+),(\\d+),(\\d+)(?:,(?:1(?:\\.0*)?|0(?:\\.\\d+)?))?\\)$/i);\n\n  if (!rgbMatch) {\n    return '';\n  }\n\n  var _rgbMatch = _slicedToArray(rgbMatch, 4),\n      r = _rgbMatch[1],\n      g = _rgbMatch[2],\n      b = _rgbMatch[3];\n\n  return \"#\".concat(asHex(r)).concat(asHex(g)).concat(asHex(b));\n}"]},"metadata":{},"sourceType":"script"}