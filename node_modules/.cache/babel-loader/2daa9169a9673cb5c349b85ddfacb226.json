{"ast":null,"code":"/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport moment from 'moment';\nimport dateMath from '@elastic/datemath';\nimport { isString } from '../../../../services/predicate';\nimport { relativeUnitsFromLargestToSmallest } from '../relative_options';\nimport { DATE_MODES } from '../date_modes';\nvar LAST = 'last';\nvar NEXT = 'next';\n\nvar isNow = function isNow(value) {\n  return value === DATE_MODES.NOW;\n};\n/**\n * This function returns time value, time unit and time tense for a given time string.\n *\n * For example: for `now-40m` it will parse output as time value to `40` time unit to `m` and time unit to `last`.\n *\n * If given a datetime string it will return a default value.\n *\n * If the given string is in the format such as `now/d` it will parse the string to moment object and find the time value, time unit and time tense using moment\n *\n * This function accepts two strings start and end time. I the start value is now then it uses the end value to parse.\n */\n\n\nexport var parseTimeParts = function parseTimeParts(start, end) {\n  var results = {\n    timeTense: LAST,\n    timeUnits: 'm',\n    timeValue: 15\n  };\n  var value = isNow(start) ? end : start;\n  var matches = isString(value) && value.match(/now(([-+])(\\d+)([smhdwMy])(\\/[smhdwMy])?)?/);\n\n  if (!matches) {\n    return results;\n  }\n\n  var operator = matches[2];\n  var matchedTimeValue = matches[3];\n  var timeUnits = matches[4];\n\n  if (matchedTimeValue && timeUnits && operator) {\n    return {\n      timeTense: operator === '+' ? NEXT : LAST,\n      timeUnits: timeUnits,\n      timeValue: parseInt(matchedTimeValue, 10)\n    };\n  }\n\n  var duration = moment.duration(moment().diff(dateMath.parse(value)));\n  var unitOp = '';\n\n  for (var i = 0; i < relativeUnitsFromLargestToSmallest.length; i++) {\n    var as = duration.as(relativeUnitsFromLargestToSmallest[i]);\n\n    if (as < 0) {\n      unitOp = '+';\n    }\n\n    if (Math.abs(as) > 1) {\n      return {\n        timeValue: Math.round(Math.abs(as)),\n        timeUnits: relativeUnitsFromLargestToSmallest[i],\n        timeTense: unitOp === '+' ? NEXT : LAST\n      };\n    }\n  }\n\n  return results;\n};","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/@elastic/eui/es/components/date_picker/super_date_picker/quick_select_popover/quick_select_utils.js"],"names":["moment","dateMath","isString","relativeUnitsFromLargestToSmallest","DATE_MODES","LAST","NEXT","isNow","value","NOW","parseTimeParts","start","end","results","timeTense","timeUnits","timeValue","matches","match","operator","matchedTimeValue","parseInt","duration","diff","parse","unitOp","i","length","as","Math","abs","round"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,QAAT,QAAyB,gCAAzB;AACA,SAASC,kCAAT,QAAmD,qBAAnD;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,IAAI,GAAG,MAAX;;AAEA,IAAIC,KAAK,GAAG,SAASA,KAAT,CAAeC,KAAf,EAAsB;AAChC,SAAOA,KAAK,KAAKJ,UAAU,CAACK,GAA5B;AACD,CAFD;AAGA;;;;;;;;;;;;;AAaA,OAAO,IAAIC,cAAc,GAAG,SAASA,cAAT,CAAwBC,KAAxB,EAA+BC,GAA/B,EAAoC;AAC9D,MAAIC,OAAO,GAAG;AACZC,IAAAA,SAAS,EAAET,IADC;AAEZU,IAAAA,SAAS,EAAE,GAFC;AAGZC,IAAAA,SAAS,EAAE;AAHC,GAAd;AAKA,MAAIR,KAAK,GAAGD,KAAK,CAACI,KAAD,CAAL,GAAeC,GAAf,GAAqBD,KAAjC;AACA,MAAIM,OAAO,GAAGf,QAAQ,CAACM,KAAD,CAAR,IAAmBA,KAAK,CAACU,KAAN,CAAY,4CAAZ,CAAjC;;AAEA,MAAI,CAACD,OAAL,EAAc;AACZ,WAAOJ,OAAP;AACD;;AAED,MAAIM,QAAQ,GAAGF,OAAO,CAAC,CAAD,CAAtB;AACA,MAAIG,gBAAgB,GAAGH,OAAO,CAAC,CAAD,CAA9B;AACA,MAAIF,SAAS,GAAGE,OAAO,CAAC,CAAD,CAAvB;;AAEA,MAAIG,gBAAgB,IAAIL,SAApB,IAAiCI,QAArC,EAA+C;AAC7C,WAAO;AACLL,MAAAA,SAAS,EAAEK,QAAQ,KAAK,GAAb,GAAmBb,IAAnB,GAA0BD,IADhC;AAELU,MAAAA,SAAS,EAAEA,SAFN;AAGLC,MAAAA,SAAS,EAAEK,QAAQ,CAACD,gBAAD,EAAmB,EAAnB;AAHd,KAAP;AAKD;;AAED,MAAIE,QAAQ,GAAGtB,MAAM,CAACsB,QAAP,CAAgBtB,MAAM,GAAGuB,IAAT,CAActB,QAAQ,CAACuB,KAAT,CAAehB,KAAf,CAAd,CAAhB,CAAf;AACA,MAAIiB,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvB,kCAAkC,CAACwB,MAAvD,EAA+DD,CAAC,EAAhE,EAAoE;AAClE,QAAIE,EAAE,GAAGN,QAAQ,CAACM,EAAT,CAAYzB,kCAAkC,CAACuB,CAAD,CAA9C,CAAT;;AAEA,QAAIE,EAAE,GAAG,CAAT,EAAY;AACVH,MAAAA,MAAM,GAAG,GAAT;AACD;;AAED,QAAII,IAAI,CAACC,GAAL,CAASF,EAAT,IAAe,CAAnB,EAAsB;AACpB,aAAO;AACLZ,QAAAA,SAAS,EAAEa,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACC,GAAL,CAASF,EAAT,CAAX,CADN;AAELb,QAAAA,SAAS,EAAEZ,kCAAkC,CAACuB,CAAD,CAFxC;AAGLZ,QAAAA,SAAS,EAAEW,MAAM,KAAK,GAAX,GAAiBnB,IAAjB,GAAwBD;AAH9B,OAAP;AAKD;AACF;;AAED,SAAOQ,OAAP;AACD,CA7CM","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport moment from 'moment';\nimport dateMath from '@elastic/datemath';\nimport { isString } from '../../../../services/predicate';\nimport { relativeUnitsFromLargestToSmallest } from '../relative_options';\nimport { DATE_MODES } from '../date_modes';\nvar LAST = 'last';\nvar NEXT = 'next';\n\nvar isNow = function isNow(value) {\n  return value === DATE_MODES.NOW;\n};\n/**\n * This function returns time value, time unit and time tense for a given time string.\n *\n * For example: for `now-40m` it will parse output as time value to `40` time unit to `m` and time unit to `last`.\n *\n * If given a datetime string it will return a default value.\n *\n * If the given string is in the format such as `now/d` it will parse the string to moment object and find the time value, time unit and time tense using moment\n *\n * This function accepts two strings start and end time. I the start value is now then it uses the end value to parse.\n */\n\n\nexport var parseTimeParts = function parseTimeParts(start, end) {\n  var results = {\n    timeTense: LAST,\n    timeUnits: 'm',\n    timeValue: 15\n  };\n  var value = isNow(start) ? end : start;\n  var matches = isString(value) && value.match(/now(([-+])(\\d+)([smhdwMy])(\\/[smhdwMy])?)?/);\n\n  if (!matches) {\n    return results;\n  }\n\n  var operator = matches[2];\n  var matchedTimeValue = matches[3];\n  var timeUnits = matches[4];\n\n  if (matchedTimeValue && timeUnits && operator) {\n    return {\n      timeTense: operator === '+' ? NEXT : LAST,\n      timeUnits: timeUnits,\n      timeValue: parseInt(matchedTimeValue, 10)\n    };\n  }\n\n  var duration = moment.duration(moment().diff(dateMath.parse(value)));\n  var unitOp = '';\n\n  for (var i = 0; i < relativeUnitsFromLargestToSmallest.length; i++) {\n    var as = duration.as(relativeUnitsFromLargestToSmallest[i]);\n\n    if (as < 0) {\n      unitOp = '+';\n    }\n\n    if (Math.abs(as) > 1) {\n      return {\n        timeValue: Math.round(Math.abs(as)),\n        timeUnits: relativeUnitsFromLargestToSmallest[i],\n        timeTense: unitOp === '+' ? NEXT : LAST\n      };\n    }\n  }\n\n  return results;\n};"]},"metadata":{},"sourceType":"module"}