{"ast":null,"code":"/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar GROUP_NUMERIC = /^([\\d.]+)(s|ms)/;\n\nfunction getMilliseconds(value, unit) {\n  // Given the regex match and capture groups, we can assume `unit` to be either 's' or 'ms'\n  var multiplier = unit === 's' ? 1000 : 1;\n  return parseFloat(value) * multiplier;\n} // Find CSS `transition-duration` and `transition-delay` intervals\n// and return the value of each computed property in 'ms'\n\n\nexport var getTransitionTimings = function getTransitionTimings(element) {\n  var computedStyle = window.getComputedStyle(element);\n  var computedDuration = computedStyle.getPropertyValue('transition-duration');\n  var durationMatchArray = computedDuration.match(GROUP_NUMERIC);\n  var durationMatch = durationMatchArray ? getMilliseconds(durationMatchArray[1], durationMatchArray[2]) : 0;\n  var computedDelay = computedStyle.getPropertyValue('transition-delay');\n  var delayMatchArray = computedDelay.match(GROUP_NUMERIC);\n  var delayMatch = delayMatchArray ? getMilliseconds(delayMatchArray[1], delayMatchArray[2]) : 0;\n  return {\n    durationMatch: durationMatch,\n    delayMatch: delayMatch\n  };\n};\n\nfunction isElementNode(element) {\n  return element.nodeType === document.ELEMENT_NODE;\n} // Uses `getTransitionTimings` to find the total transition time for\n// all elements targeted by a MutationObserver callback\n\n\nexport var getWaitDuration = function getWaitDuration(records) {\n  return records.reduce(function (waitDuration, record) {\n    // only check for CSS transition values for ELEMENT nodes\n    if (isElementNode(record.target)) {\n      var _getTransitionTimings = getTransitionTimings(record.target),\n          durationMatch = _getTransitionTimings.durationMatch,\n          delayMatch = _getTransitionTimings.delayMatch;\n\n      waitDuration = Math.max(waitDuration, durationMatch + delayMatch);\n    }\n\n    return waitDuration;\n  }, 0);\n}; // Uses `requestAnimationFrame` to perform a given callback after a specified waiting period\n\nexport var performOnFrame = function performOnFrame(waitDuration, toPerform) {\n  if (waitDuration > 0) {\n    var startTime = Date.now();\n    var endTime = startTime + waitDuration;\n\n    var onFrame = function onFrame() {\n      toPerform();\n\n      if (endTime > Date.now()) {\n        requestAnimationFrame(onFrame);\n      }\n    };\n\n    requestAnimationFrame(onFrame);\n  }\n}; // Convenience method for combining the result of 'getWaitDuration' directly with 'performOnFrame'\n\nexport var getDurationAndPerformOnFrame = function getDurationAndPerformOnFrame(records, toPerform) {\n  performOnFrame(getWaitDuration(records), toPerform);\n};","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/@elastic/eui/es/services/transition/transition.js"],"names":["GROUP_NUMERIC","getMilliseconds","value","unit","multiplier","parseFloat","getTransitionTimings","element","computedStyle","window","getComputedStyle","computedDuration","getPropertyValue","durationMatchArray","match","durationMatch","computedDelay","delayMatchArray","delayMatch","isElementNode","nodeType","document","ELEMENT_NODE","getWaitDuration","records","reduce","waitDuration","record","target","_getTransitionTimings","Math","max","performOnFrame","toPerform","startTime","Date","now","endTime","onFrame","requestAnimationFrame","getDurationAndPerformOnFrame"],"mappings":"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","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar GROUP_NUMERIC = /^([\\d.]+)(s|ms)/;\n\nfunction getMilliseconds(value, unit) {\n  // Given the regex match and capture groups, we can assume `unit` to be either 's' or 'ms'\n  var multiplier = unit === 's' ? 1000 : 1;\n  return parseFloat(value) * multiplier;\n} // Find CSS `transition-duration` and `transition-delay` intervals\n// and return the value of each computed property in 'ms'\n\n\nexport var getTransitionTimings = function getTransitionTimings(element) {\n  var computedStyle = window.getComputedStyle(element);\n  var computedDuration = computedStyle.getPropertyValue('transition-duration');\n  var durationMatchArray = computedDuration.match(GROUP_NUMERIC);\n  var durationMatch = durationMatchArray ? getMilliseconds(durationMatchArray[1], durationMatchArray[2]) : 0;\n  var computedDelay = computedStyle.getPropertyValue('transition-delay');\n  var delayMatchArray = computedDelay.match(GROUP_NUMERIC);\n  var delayMatch = delayMatchArray ? getMilliseconds(delayMatchArray[1], delayMatchArray[2]) : 0;\n  return {\n    durationMatch: durationMatch,\n    delayMatch: delayMatch\n  };\n};\n\nfunction isElementNode(element) {\n  return element.nodeType === document.ELEMENT_NODE;\n} // Uses `getTransitionTimings` to find the total transition time for\n// all elements targeted by a MutationObserver callback\n\n\nexport var getWaitDuration = function getWaitDuration(records) {\n  return records.reduce(function (waitDuration, record) {\n    // only check for CSS transition values for ELEMENT nodes\n    if (isElementNode(record.target)) {\n      var _getTransitionTimings = getTransitionTimings(record.target),\n          durationMatch = _getTransitionTimings.durationMatch,\n          delayMatch = _getTransitionTimings.delayMatch;\n\n      waitDuration = Math.max(waitDuration, durationMatch + delayMatch);\n    }\n\n    return waitDuration;\n  }, 0);\n}; // Uses `requestAnimationFrame` to perform a given callback after a specified waiting period\n\nexport var performOnFrame = function performOnFrame(waitDuration, toPerform) {\n  if (waitDuration > 0) {\n    var startTime = Date.now();\n    var endTime = startTime + waitDuration;\n\n    var onFrame = function onFrame() {\n      toPerform();\n\n      if (endTime > Date.now()) {\n        requestAnimationFrame(onFrame);\n      }\n    };\n\n    requestAnimationFrame(onFrame);\n  }\n}; // Convenience method for combining the result of 'getWaitDuration' directly with 'performOnFrame'\n\nexport var getDurationAndPerformOnFrame = function getDurationAndPerformOnFrame(records, toPerform) {\n  performOnFrame(getWaitDuration(records), toPerform);\n};"]},"metadata":{},"sourceType":"module"}