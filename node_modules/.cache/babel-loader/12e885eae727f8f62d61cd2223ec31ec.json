{"ast":null,"code":"/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isNil, isArray, isBoolean, isDate, isNaN, isNumber, isString } from '../predicate';\nimport { formatBoolean } from './format_boolean';\nimport { formatDate } from './format_date';\nimport { formatNumber } from './format_number';\nimport { formatText } from './format_text';\nexport var formatAuto = function formatAuto(value) {\n  if (isNil(value) || isNaN(value)) {\n    return '';\n  }\n\n  if (isString(value)) {\n    return formatText(value);\n  }\n\n  if (isDate(value)) {\n    return formatDate(value);\n  }\n\n  if (isBoolean(value)) {\n    return formatBoolean(value);\n  }\n\n  if (isNumber(value)) {\n    return formatNumber(value);\n  }\n\n  if (isArray(value)) {\n    return Array.isArray(value) ? value.map(function (item) {\n      return formatAuto(item);\n    }).join(', ') : formatAuto(value);\n  } // TODO not sure if we want that.. the (+) is that we show something, the (-) is that it's very technical\n\n\n  return JSON.stringify(value);\n};","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/@elastic/eui/es/services/format/format_auto.js"],"names":["isNil","isArray","isBoolean","isDate","isNaN","isNumber","isString","formatBoolean","formatDate","formatNumber","formatText","formatAuto","value","Array","map","item","join","JSON","stringify"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,KAAT,EAAgBC,OAAhB,EAAyBC,SAAzB,EAAoCC,MAApC,EAA4CC,KAA5C,EAAmDC,QAAnD,EAA6DC,QAA7D,QAA6E,cAA7E;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,OAAO,IAAIC,UAAU,GAAG,SAASA,UAAT,CAAoBC,KAApB,EAA2B;AACjD,MAAIZ,KAAK,CAACY,KAAD,CAAL,IAAgBR,KAAK,CAACQ,KAAD,CAAzB,EAAkC;AAChC,WAAO,EAAP;AACD;;AAED,MAAIN,QAAQ,CAACM,KAAD,CAAZ,EAAqB;AACnB,WAAOF,UAAU,CAACE,KAAD,CAAjB;AACD;;AAED,MAAIT,MAAM,CAACS,KAAD,CAAV,EAAmB;AACjB,WAAOJ,UAAU,CAACI,KAAD,CAAjB;AACD;;AAED,MAAIV,SAAS,CAACU,KAAD,CAAb,EAAsB;AACpB,WAAOL,aAAa,CAACK,KAAD,CAApB;AACD;;AAED,MAAIP,QAAQ,CAACO,KAAD,CAAZ,EAAqB;AACnB,WAAOH,YAAY,CAACG,KAAD,CAAnB;AACD;;AAED,MAAIX,OAAO,CAACW,KAAD,CAAX,EAAoB;AAClB,WAAOC,KAAK,CAACZ,OAAN,CAAcW,KAAd,IAAuBA,KAAK,CAACE,GAAN,CAAU,UAAUC,IAAV,EAAgB;AACtD,aAAOJ,UAAU,CAACI,IAAD,CAAjB;AACD,KAF6B,EAE3BC,IAF2B,CAEtB,IAFsB,CAAvB,GAESL,UAAU,CAACC,KAAD,CAF1B;AAGD,GAzBgD,CAyB/C;;;AAGF,SAAOK,IAAI,CAACC,SAAL,CAAeN,KAAf,CAAP;AACD,CA7BM","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isNil, isArray, isBoolean, isDate, isNaN, isNumber, isString } from '../predicate';\nimport { formatBoolean } from './format_boolean';\nimport { formatDate } from './format_date';\nimport { formatNumber } from './format_number';\nimport { formatText } from './format_text';\nexport var formatAuto = function formatAuto(value) {\n  if (isNil(value) || isNaN(value)) {\n    return '';\n  }\n\n  if (isString(value)) {\n    return formatText(value);\n  }\n\n  if (isDate(value)) {\n    return formatDate(value);\n  }\n\n  if (isBoolean(value)) {\n    return formatBoolean(value);\n  }\n\n  if (isNumber(value)) {\n    return formatNumber(value);\n  }\n\n  if (isArray(value)) {\n    return Array.isArray(value) ? value.map(function (item) {\n      return formatAuto(item);\n    }).join(', ') : formatAuto(value);\n  } // TODO not sure if we want that.. the (+) is that we show something, the (-) is that it's very technical\n\n\n  return JSON.stringify(value);\n};"]},"metadata":{},"sourceType":"module"}