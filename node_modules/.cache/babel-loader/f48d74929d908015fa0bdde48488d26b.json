{"ast":null,"code":"export default function createCellPositioner(_ref) {\n  var cellMeasurerCache = _ref.cellMeasurerCache,\n      columnCount = _ref.columnCount,\n      columnWidth = _ref.columnWidth,\n      _ref$spacer = _ref.spacer,\n      spacer = _ref$spacer === undefined ? 0 : _ref$spacer;\n  var columnHeights = void 0;\n  initOrResetDerivedValues();\n\n  function cellPositioner(index) {\n    // Find the shortest column and use it.\n    var columnIndex = 0;\n\n    for (var i = 1; i < columnHeights.length; i++) {\n      if (columnHeights[i] < columnHeights[columnIndex]) {\n        columnIndex = i;\n      }\n    }\n\n    var left = columnIndex * (columnWidth + spacer);\n    var top = columnHeights[columnIndex] || 0;\n    columnHeights[columnIndex] = top + cellMeasurerCache.getHeight(index) + spacer;\n    return {\n      left: left,\n      top: top\n    };\n  }\n\n  function initOrResetDerivedValues() {\n    // Track the height of each column.\n    // Layout algorithm below always inserts into the shortest column.\n    columnHeights = [];\n\n    for (var i = 0; i < columnCount; i++) {\n      columnHeights[i] = 0;\n    }\n  }\n\n  function reset(params) {\n    columnCount = params.columnCount;\n    columnWidth = params.columnWidth;\n    spacer = params.spacer;\n    initOrResetDerivedValues();\n  }\n\n  cellPositioner.reset = reset;\n  return cellPositioner;\n}\nimport { bpfrpt_proptype_CellMeasurerCache } from './Masonry';\nimport { bpfrpt_proptype_Positioner } from './Masonry';","map":{"version":3,"sources":["/home/nadaanbaalak/greendeck/client/node_modules/react-virtualized/dist/es/Masonry/createCellPositioner.js"],"names":["createCellPositioner","_ref","cellMeasurerCache","columnCount","columnWidth","_ref$spacer","spacer","undefined","columnHeights","initOrResetDerivedValues","cellPositioner","index","columnIndex","i","length","left","top","getHeight","reset","params","bpfrpt_proptype_CellMeasurerCache","bpfrpt_proptype_Positioner"],"mappings":"AAEA,eAAe,SAASA,oBAAT,CAA8BC,IAA9B,EAAoC;AACjD,MAAIC,iBAAiB,GAAGD,IAAI,CAACC,iBAA7B;AAAA,MACIC,WAAW,GAAGF,IAAI,CAACE,WADvB;AAAA,MAEIC,WAAW,GAAGH,IAAI,CAACG,WAFvB;AAAA,MAGIC,WAAW,GAAGJ,IAAI,CAACK,MAHvB;AAAA,MAIIA,MAAM,GAAGD,WAAW,KAAKE,SAAhB,GAA4B,CAA5B,GAAgCF,WAJ7C;AAMA,MAAIG,aAAa,GAAG,KAAK,CAAzB;AAEAC,EAAAA,wBAAwB;;AAExB,WAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B;AACA,QAAIC,WAAW,GAAG,CAAlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,aAAa,CAACM,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C,UAAIL,aAAa,CAACK,CAAD,CAAb,GAAmBL,aAAa,CAACI,WAAD,CAApC,EAAmD;AACjDA,QAAAA,WAAW,GAAGC,CAAd;AACD;AACF;;AAED,QAAIE,IAAI,GAAGH,WAAW,IAAIR,WAAW,GAAGE,MAAlB,CAAtB;AACA,QAAIU,GAAG,GAAGR,aAAa,CAACI,WAAD,CAAb,IAA8B,CAAxC;AAEAJ,IAAAA,aAAa,CAACI,WAAD,CAAb,GAA6BI,GAAG,GAAGd,iBAAiB,CAACe,SAAlB,CAA4BN,KAA5B,CAAN,GAA2CL,MAAxE;AAEA,WAAO;AACLS,MAAAA,IAAI,EAAEA,IADD;AAELC,MAAAA,GAAG,EAAEA;AAFA,KAAP;AAID;;AAED,WAASP,wBAAT,GAAoC;AAClC;AACA;AACAD,IAAAA,aAAa,GAAG,EAAhB;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,WAApB,EAAiCU,CAAC,EAAlC,EAAsC;AACpCL,MAAAA,aAAa,CAACK,CAAD,CAAb,GAAmB,CAAnB;AACD;AACF;;AAED,WAASK,KAAT,CAAeC,MAAf,EAAuB;AACrBhB,IAAAA,WAAW,GAAGgB,MAAM,CAAChB,WAArB;AACAC,IAAAA,WAAW,GAAGe,MAAM,CAACf,WAArB;AACAE,IAAAA,MAAM,GAAGa,MAAM,CAACb,MAAhB;AAEAG,IAAAA,wBAAwB;AACzB;;AAEDC,EAAAA,cAAc,CAACQ,KAAf,GAAuBA,KAAvB;AAEA,SAAOR,cAAP;AACD;AACD,SAASU,iCAAT,QAAkD,WAAlD;AACA,SAASC,0BAAT,QAA2C,WAA3C","sourcesContent":["\n\nexport default function createCellPositioner(_ref) {\n  var cellMeasurerCache = _ref.cellMeasurerCache,\n      columnCount = _ref.columnCount,\n      columnWidth = _ref.columnWidth,\n      _ref$spacer = _ref.spacer,\n      spacer = _ref$spacer === undefined ? 0 : _ref$spacer;\n\n  var columnHeights = void 0;\n\n  initOrResetDerivedValues();\n\n  function cellPositioner(index) {\n    // Find the shortest column and use it.\n    var columnIndex = 0;\n    for (var i = 1; i < columnHeights.length; i++) {\n      if (columnHeights[i] < columnHeights[columnIndex]) {\n        columnIndex = i;\n      }\n    }\n\n    var left = columnIndex * (columnWidth + spacer);\n    var top = columnHeights[columnIndex] || 0;\n\n    columnHeights[columnIndex] = top + cellMeasurerCache.getHeight(index) + spacer;\n\n    return {\n      left: left,\n      top: top\n    };\n  }\n\n  function initOrResetDerivedValues() {\n    // Track the height of each column.\n    // Layout algorithm below always inserts into the shortest column.\n    columnHeights = [];\n    for (var i = 0; i < columnCount; i++) {\n      columnHeights[i] = 0;\n    }\n  }\n\n  function reset(params) {\n    columnCount = params.columnCount;\n    columnWidth = params.columnWidth;\n    spacer = params.spacer;\n\n    initOrResetDerivedValues();\n  }\n\n  cellPositioner.reset = reset;\n\n  return cellPositioner;\n}\nimport { bpfrpt_proptype_CellMeasurerCache } from './Masonry';\nimport { bpfrpt_proptype_Positioner } from './Masonry';"]},"metadata":{},"sourceType":"module"}