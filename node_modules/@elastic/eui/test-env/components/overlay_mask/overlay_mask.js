"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EuiOverlayMask = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = require("react");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactDom = require("react-dom");

var _classnames = _interopRequireDefault(require("classnames"));

var _common = require("../common");

/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * NOTE: We can't test this component because Enzyme doesn't support rendering
 * into portals.
 */
var EuiOverlayMask =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(EuiOverlayMask, _Component);

  function EuiOverlayMask(props) {
    var _this;

    (0, _classCallCheck2.default)(this, EuiOverlayMask);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(EuiOverlayMask).call(this, props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "overlayMaskNode", void 0);
    var _this$props = _this.props,
        className = _this$props.className,
        children = _this$props.children,
        onClick = _this$props.onClick,
        rest = (0, _objectWithoutProperties2.default)(_this$props, ["className", "children", "onClick"]);
    _this.overlayMaskNode = document.createElement('div');
    _this.overlayMaskNode.className = (0, _classnames.default)('euiOverlayMask', className);

    if (onClick) {
      _this.overlayMaskNode.addEventListener('click', onClick);
    }

    (0, _common.keysOf)(rest).forEach(function (key) {
      if (typeof rest[key] !== 'string') {
        throw new Error("Unhandled property type. EuiOverlayMask property ".concat(key, " is not a string."));
      }

      _this.overlayMaskNode.setAttribute(key, rest[key]);
    });
    document.body.appendChild(_this.overlayMaskNode);
    return _this;
  }

  (0, _createClass2.default)(EuiOverlayMask, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      document.body.classList.add('euiBody-hasOverlayMask');
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.body.classList.remove('euiBody-hasOverlayMask');

      if (this.props.onClick) {
        this.overlayMaskNode.removeEventListener('click', this.props.onClick);
      }

      document.body.removeChild(this.overlayMaskNode);
      this.overlayMaskNode = undefined;
    }
  }, {
    key: "render",
    value: function render() {
      return (0, _reactDom.createPortal)(this.props.children, this.overlayMaskNode);
    }
  }]);
  return EuiOverlayMask;
}(_react.Component);

exports.EuiOverlayMask = EuiOverlayMask;
EuiOverlayMask.propTypes = {
  className: _propTypes.default.string,
  "aria-label": _propTypes.default.string,
  "data-test-subj": _propTypes.default.string,
  onClick: _propTypes.default.func,
  children: _propTypes.default.node
};
EuiOverlayMask.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "EuiOverlayMask",
  "props": {
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "aria-label": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "data-test-subj": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "onClick": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "children": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": ""
    }
  }
};