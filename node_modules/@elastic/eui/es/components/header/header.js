function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import React, { useEffect } from 'react';
import PropTypes from "prop-types";
import classNames from 'classnames';
import { EuiHeaderSectionItem, EuiHeaderSection } from './header_section';
import { EuiHeaderBreadcrumbs } from './header_breadcrumbs';

function createHeaderSection(sections, border) {
  return sections.map(function (section, index) {
    return React.createElement(EuiHeaderSectionItem, {
      key: index,
      border: border
    }, section);
  });
}

export var EuiHeader = function EuiHeader(_ref) {
  var children = _ref.children,
      className = _ref.className,
      sections = _ref.sections,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? 'static' : _ref$position,
      rest = _objectWithoutProperties(_ref, ["children", "className", "sections", "position"]);

  var classes = classNames('euiHeader', "euiHeader--".concat(position), className);
  useEffect(function () {
    if (position === 'fixed') {
      document.body.classList.add('euiBody--headerIsFixed');
    }

    return function () {
      document.body.classList.remove('euiBody--headerIsFixed');
    };
  }, [position]);
  var contents;

  if (sections) {
    if (children) {
      // In case both children and sections are passed, warn in the console that the children will be disregarded
      console.warn('EuiHeader cannot accept both `children` and `sections`. It will disregard the `children`.');
    }

    contents = sections.map(function (section, index) {
      var content = [];

      if (section.items) {
        // Items get wrapped in EuiHeaderSection and each item in a EuiHeaderSectionItem
        content.push(React.createElement(EuiHeaderSection, {
          key: "items-".concat(index)
        }, createHeaderSection(section.items, section.borders)));
      }

      if (section.breadcrumbs) {
        content.push( // Breadcrumbs are separate and cannot be contained in a EuiHeaderSection
        // in order for truncation to work
        React.createElement(EuiHeaderBreadcrumbs, _extends({
          key: "breadcrumbs-".concat(index),
          breadcrumbs: section.breadcrumbs
        }, section.breadcrumbProps)));
      }

      return content;
    });
  } else {
    contents = children;
  }

  return React.createElement("div", _extends({
    className: classes
  }, rest), contents);
};
EuiHeader.propTypes = {
  className: PropTypes.string,
  "aria-label": PropTypes.string,
  "data-test-subj": PropTypes.string,

  /**
       * An array of objects to wrap in a #EuiHeaderSection.
       * Each section is spaced using `space-between`.
       * See #EuiHeaderSectionsProp for object details.
       * This prop disregards the prop `children` if both are passed.
       */
  sections: PropTypes.arrayOf(PropTypes.shape({
    /**
       * An arry of items that will be wrapped in a #EuiHeaderSectionItem
       */
    items: PropTypes.arrayOf(PropTypes.node.isRequired),

    /**
       * Apply the passed border side to each #EuiHeaderSectionItem
       */
    borders: PropTypes.oneOf(["left", "right", "none"]),

    /**
       * Breadcrumbs in the header cannot be wrapped in a #EuiHeaderSection in order for truncation to work.
       * Simply pass the array of Breadcrumb objects
       */
    breadcrumbs: PropTypes.arrayOf(PropTypes.shape({
      className: PropTypes.string,
      "aria-label": PropTypes.string,
      "data-test-subj": PropTypes.string,
      text: PropTypes.node.isRequired,
      href: PropTypes.string,
      onClick: PropTypes.func,
      truncate: PropTypes.bool
    }).isRequired),

    /**
       * Other props to pass to #EuiHeaderBreadcrumbs
       */
    breadcrumbProps: PropTypes.any
  }).isRequired),

  /**
       * Helper that positions the header against the window body and
       * adds the correct amount of top padding to the window when in `fixed` mode
       */
  position: PropTypes.oneOf(["static", "fixed"])
};
EuiHeader.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "EuiHeader",
  "props": {
    "position": {
      "defaultValue": {
        "value": "'static'",
        "computed": false
      },
      "type": {
        "name": "enum",
        "value": [{
          "value": "\"static\"",
          "computed": false
        }, {
          "value": "\"fixed\"",
          "computed": false
        }]
      },
      "required": false,
      "description": "Helper that positions the header against the window body and\nadds the correct amount of top padding to the window when in `fixed` mode"
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "aria-label": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "data-test-subj": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "sections": {
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "shape",
          "value": {
            "items": {
              "name": "arrayOf",
              "value": {
                "name": "node"
              },
              "description": "An arry of items that will be wrapped in a #EuiHeaderSectionItem",
              "required": false
            },
            "borders": {
              "name": "enum",
              "value": [{
                "value": "\"left\"",
                "computed": false
              }, {
                "value": "\"right\"",
                "computed": false
              }, {
                "value": "\"none\"",
                "computed": false
              }],
              "description": "Apply the passed border side to each #EuiHeaderSectionItem",
              "required": false
            },
            "breadcrumbs": {
              "name": "arrayOf",
              "value": {
                "name": "shape",
                "value": {
                  "className": {
                    "name": "string",
                    "required": false
                  },
                  "aria-label": {
                    "name": "string",
                    "required": false
                  },
                  "data-test-subj": {
                    "name": "string",
                    "required": false
                  },
                  "text": {
                    "name": "node",
                    "required": true
                  },
                  "href": {
                    "name": "string",
                    "required": false
                  },
                  "onClick": {
                    "name": "func",
                    "required": false
                  },
                  "truncate": {
                    "name": "bool",
                    "required": false
                  }
                }
              },
              "description": "Breadcrumbs in the header cannot be wrapped in a #EuiHeaderSection in order for truncation to work.\nSimply pass the array of Breadcrumb objects",
              "required": false
            },
            "breadcrumbProps": {
              "name": "any",
              "description": "Other props to pass to #EuiHeaderBreadcrumbs",
              "required": false
            }
          }
        }
      },
      "required": false,
      "description": "An array of objects to wrap in a #EuiHeaderSection.\nEach section is spaced using `space-between`.\nSee #EuiHeaderSectionsProp for object details.\nThis prop disregards the prop `children` if both are passed."
    }
  }
};